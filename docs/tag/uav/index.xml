<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>UAV | Rapid Control Prototyping</title><link>https://lubin.kerhuel.eu/tag/uav/</link><atom:link href="https://lubin.kerhuel.eu/tag/uav/index.xml" rel="self" type="application/rss+xml"/><description>UAV</description><generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><copyright>Â© 2019 - 2020 Lubin Kerhuel</copyright><lastBuildDate>Mon, 01 Jul 2019 00:00:00 +0000</lastBuildDate><image><url>https://lubin.kerhuel.eu/img/img/firstar1600-qx7.jpg</url><title>UAV</title><link>https://lubin.kerhuel.eu/tag/uav/</link></image><item><title>block receiver &amp; telemetry: S.BUS, Smart Port, F.Port</title><link>https://lubin.kerhuel.eu/uxv/block-receiver-telemetry/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lubin.kerhuel.eu/uxv/block-receiver-telemetry/</guid><description>&lt;!-- Enable Photo Swipe + gallery features -->
&lt;link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/photoswipe/4.1.3/photoswipe.min.css" integrity="sha384-yX+tSqQp3yF8BiTuLLOwNyaqtmZ9yFQT7IYg7U9YU9Dz/JDlh6JJQmNClCmvYl+b" crossorigin="anonymous">
&lt;link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/photoswipe/4.1.3/default-skin/default-skin.min.css" integrity="sha384-R6P/wJIrxjHcm//YCjb0S6rRgebsNn3u6U4NxVI8R03iSPAR5CwPqoq1n6U/tjFE" crossorigin="anonymous">
&lt;script src="https://cdnjs.cloudflare.com/ajax/libs/photoswipe/4.1.3/photoswipe.min.js" integrity="sha384-jkeJ/ETDRD/P4Y3I3CQi1QIwrEJjR9GdAZV2/aqDwwgA5ldCNiExYJeBwKyQC/+q" crossorigin="anonymous">&lt;/script>
&lt;script src="https://cdnjs.cloudflare.com/ajax/libs/photoswipe/4.1.3/photoswipe-ui-default.min.js" integrity="sha384-HotcxRWS6/oszHPwknjGnd066fV8+ycnO5TXDcOscFWvTtaiCtEEv+9s5Qrn1iJD" crossorigin="anonymous">&lt;/script>
&lt;div class="pswp" tabindex="-1" role="dialog" aria-hidden="true">
&lt;div class="pswp__bg">&lt;/div>
&lt;div class="pswp__scroll-wrap">
&lt;div class="pswp__container">
&lt;div class="pswp__item">&lt;/div>
&lt;div class="pswp__item">&lt;/div>
&lt;div class="pswp__item">&lt;/div>
&lt;/div>
&lt;div class="pswp__ui pswp__ui--hidden">
&lt;div class="pswp__top-bar">
&lt;div class="pswp__counter">&lt;/div>
&lt;button class="pswp__button pswp__button--close" title="Close (Esc)">&lt;/button>
&lt;button class="pswp__button pswp__button--share" title="Share">&lt;/button>
&lt;button class="pswp__button pswp__button--fs" title="Toggle fullscreen">&lt;/button>
&lt;button class="pswp__button pswp__button--zoom" title="Zoom in/out">&lt;/button>
&lt;div class="pswp__preloader">
&lt;div class="pswp__preloader__icn">
&lt;div class="pswp__preloader__cut">
&lt;div class="pswp__preloader__donut">&lt;/div>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="pswp__share-modal pswp__share-modal--hidden pswp__single-tap">
&lt;div class="pswp__share-tooltip">&lt;/div>
&lt;/div>
&lt;button class="pswp__button pswp__button--arrow--left" title="Previous (arrow left)">
&lt;/button>
&lt;button class="pswp__button pswp__button--arrow--right" title="Next (arrow right)">
&lt;/button>
&lt;div class="pswp__caption">
&lt;div class="pswp__caption__center">&lt;/div>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>Three blocks add support for three protocol found in receivers. Traditional PWM output receiver can be handled directly through the Input Capture or Change Notification peripheral and do not required a specific block.&lt;/p>
&lt;h2 id="sbus-smart-port-and-fport">S.BUS, Smart Port and F.Port&lt;/h2>
&lt;p>S.BUS, Smart Port (also named S.Port) and F.Port are three protocol available in FrSky RC receiver and compatible. All three protocol rely on the UART peripheral with different settings. Their purpose is specific:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>S.BUS&lt;/strong> is a unidirectional protocol from the receiver to an external device to provide channels values and RSSI&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup> (i.e. radio link quality).&lt;/li>
&lt;li>&lt;strong>Smart Port (S.Port)&lt;/strong> is a bidirectional protocol. The receiver ping for various connected sensors and retrieve measurements to send through telemetry to the remote control.&lt;/li>
&lt;li>&lt;strong>F.Port&lt;/strong> is a bidirectional protocol where the receiver communicate channels values and RSSI, and get values from connected sensors to send through telemetry to the remote control.&lt;/li>
&lt;/ul>
&lt;p>The two bidirectional protocol &lt;em>Smart Port&lt;/em> and &lt;em>F.Port&lt;/em> use one single wire for Tx and Rx. Communication is done in Half duplex mode.&lt;/p>
&lt;p>FrSky receiver have two variants: (model shipped with Smart port: x4r, rx4r, x6r, s6r, rx6r, x8r, s8r, xsr, xsr-m, r-xsr &amp;hellip;)&lt;/p>
&lt;ol>
&lt;li>&lt;strong>S.Bus &amp;amp; Smart Port&lt;/strong> (stock), available on two distinct three pins ports&lt;/li>
&lt;li>&lt;strong>F.Port&lt;/strong> available on one replaced Smart Port three pin port&lt;/li>
&lt;/ol>
&lt;p>Stock receiver have two ports: S.BUS and Smart Port. This is changed for a unique F.Port by flashing an alternative firmware provided by
&lt;a href="https://www.frsky-rc.com/" target="_blank" rel="noopener">FrSky&lt;/a>. The alternative firmware remove the S.BUS port and convert the Smart Port to an F.Port.&lt;/p>
&lt;h3 id="uart-settings-and-implementation">UART settings and implementation&lt;/h3>
&lt;p>S.BUS, S.Port and F.Port have different UART setting defined in the table:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;/th>
&lt;th align="center">Baudrate&lt;/th>
&lt;th align="center">Duplex&lt;/th>
&lt;th align="center">Logic&lt;/th>
&lt;th align="center">parity&lt;/th>
&lt;th align="center">stop-bit&lt;/th>
&lt;th align="center">flow-ctrl&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>S.BUS&lt;/td>
&lt;td align="center">100000&lt;/td>
&lt;td align="center">Rx only&lt;/td>
&lt;td align="center">3.3V inverted&lt;/td>
&lt;td align="center">even&lt;/td>
&lt;td align="center">2&lt;/td>
&lt;td align="center">no&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Smart Port&lt;/td>
&lt;td align="center">57600&lt;/td>
&lt;td align="center">&lt;strong>Half&lt;/strong>&lt;/td>
&lt;td align="center">3.3V inverted&lt;/td>
&lt;td align="center">no&lt;/td>
&lt;td align="center">1&lt;/td>
&lt;td align="center">no&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>F.Port&lt;/td>
&lt;td align="center">115200&lt;/td>
&lt;td align="center">&lt;strong>Half&lt;/strong>&lt;/td>
&lt;td align="center">3.3V inverted&lt;/td>
&lt;td align="center">no&lt;/td>
&lt;td align="center">1&lt;/td>
&lt;td align="center">no&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>Implementation on dsPIC with the MPLAB block for Simulink was successfully used with the implementation below set through the UART Configuration block:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;/th>
&lt;th align="center">Implementation&lt;/th>
&lt;th align="center">Buffer size&lt;/th>
&lt;th align="center">Interrupt priority&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>S.BUS Rx&lt;/td>
&lt;td align="center">Circular Buffer&lt;/td>
&lt;td align="center">64&lt;/td>
&lt;td align="center">5&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>S.BUS Tx&lt;/td>
&lt;td align="center">None&lt;/td>
&lt;td align="center">-&lt;/td>
&lt;td align="center">-&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Smart Port Rx&lt;/td>
&lt;td align="center">Circular Buffer&lt;/td>
&lt;td align="center">32&lt;/td>
&lt;td align="center">5&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Smart Port Tx&lt;/td>
&lt;td align="center">Circular Buffer&lt;/td>
&lt;td align="center">32&lt;/td>
&lt;td align="center">6&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>F.Port Rx&lt;/td>
&lt;td align="center">Circular Buffer&lt;/td>
&lt;td align="center">32&lt;/td>
&lt;td align="center">5&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>F.Port Tx&lt;/td>
&lt;td align="center">Circular Buffer&lt;/td>
&lt;td align="center">64&lt;/td>
&lt;td align="center">5&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="connecting-sbus-smart-port-and-fport-simulink-blocks-to-uart-rx--tx">Connecting S.BUS, Smart Port and F.Port simulink blocks to UART Rx &amp;amp; Tx&lt;/h3>
&lt;p>S.Bus, F.Port and Smart Port xxx takes receiver output stream to extract control values sent by the remote. The input stream is a vector which length is defined by end user. All values of the vector do not have to be set. The block use the N input length scalar to know how many bytes from the input vector are received values and must be processed. The block input vector can received partial data packet. The whole receiver packet can be sliced over time and sent as values are received by the MCU ; these blocks reconstruct the packet before processing it.&lt;/p>
&lt;h2 id="sbus-protocol">S.BUS protocol&lt;/h2>
&lt;p>UART Configuration:&lt;/p>
&lt;p>Only Rx channel is used with the following parameters:&lt;/p>
&lt;ul>
&lt;li>100 000 bauds/s&lt;/li>
&lt;li>Rx inverted logic (Idle state is low level), 3.3V&lt;/li>
&lt;li>Even parity&lt;/li>
&lt;li>2 stop bits&lt;/li>
&lt;li>No control flow&lt;/li>
&lt;/ul>
&lt;p>Rx is implemented with a Circular Buffer with 64 bytes buffer and interrupt priority 5.&lt;/p>
&lt;p>UART Rx block is sampled at 1kHz (1ms).
Vector output size set to &amp;ldquo;inherited via internal rule&amp;rdquo; is given a value of 10 (no more than 10 bytes can be received in 1 ms at 100000 bauds/s with two stop bits)&lt;/p>
&lt;p>The S.BUS block GUI allows to set which block output shoudl be decoded and the scaling for each channels decoded.&lt;/p>
&lt;link rel="stylesheet" href="https://lubin.kerhuel.eu/css/hugo-easy-gallery.css" />
&lt;div class="box" style="max-width:40%">
&lt;figure itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
&lt;div class="img">
&lt;img itemprop="thumbnail" data-src="https://lubin.kerhuel.eu/img/uxv-block-sbus-gui-control-frame.png" class="lazyload" alt="This simulink block decode S.BUS input stream. Scaling for output RC channels can be selected for each channels."/>
&lt;/div>
&lt;a href="https://lubin.kerhuel.eu/img/uxv-block-sbus-gui-control-frame.png" itemprop="contentUrl">&lt;/a>
&lt;figcaption data-pre="Figure " data-post=":" class="numbered">&lt;h4>Simulink S.BUS block user interface&lt;/h4>
&lt;p>This simulink block decode S.BUS input stream. Scaling for output RC channels can be selected for each channels.&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;/div>
&lt;div class="box" style="max-width:100%">
&lt;figure itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
&lt;div class="img">
&lt;img itemprop="thumbnail" data-src="https://lubin.kerhuel.eu/img/uxv-block-sbus-scheme-uart-connection.png" class="lazyload" alt="Scheme to decode S.BUS for use in a dsPIC"/>
&lt;/div>
&lt;a href="https://lubin.kerhuel.eu/img/uxv-block-sbus-scheme-uart-connection.png" itemprop="contentUrl">&lt;/a>
&lt;figcaption data-pre="Figure " data-post=":" class="numbered">&lt;h4>Scheme of the UART Rx block connected to the the S.BUS block.&lt;/h4>
&lt;p>Scheme to decode S.BUS for use in a dsPIC&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;/div>
&lt;div class="box" style="max-width:100%">
&lt;figure itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
&lt;div class="img">
&lt;img itemprop="thumbnail" data-src="https://lubin.kerhuel.eu/img/uxv-block-sbus-sport-channels-scaling.png" class="lazyload" alt="raw values from S.BUS are not centered and scaled with power of 2."/>
&lt;/div>
&lt;a href="https://lubin.kerhuel.eu/img/uxv-block-sbus-sport-channels-scaling.png" itemprop="contentUrl">&lt;/a>
&lt;figcaption data-pre="Figure " data-post=":" class="numbered">&lt;h4>Scheme to center and scale S.BUS channels output within [-1000 1000]&lt;/h4>
&lt;p>raw values from S.BUS are not centered and scaled with power of 2.&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;/div>
&lt;h2 id="smart-port-protocol">Smart Port protocol&lt;/h2>
&lt;p>Smart Port (S.Port) use UART where Rx and Tx pins are set on the same pin with inverted logic (1 is high level). One single wire is used in half duplex communication mode.&lt;/p>
&lt;p>UART configuration setting:&lt;/p>
&lt;ul>
&lt;li>56700 bauds/s&lt;/li>
&lt;li>Half duplex&lt;/li>
&lt;li>Rx and Tx inverted logic (Idle state is low level), 3.3V&lt;/li>
&lt;li>No parity&lt;/li>
&lt;li>1 stop bit&lt;/li>
&lt;li>No control flow&lt;/li>
&lt;/ul>
&lt;p>Implementation:&lt;/p>
&lt;p>Rx is implemented with a Circular Buffer with 32 bytes buffer and interrupt priority 5.&lt;br>
Tx is implemented with a circular buffer with 32 bytes buffer and interrupt priority 6.&lt;/p>
&lt;p>The Smart port block decode inputs from the receiver and from other sensors connected to the one wire bus.&lt;/p>
&lt;p>If a sensor frame is received, it is decoded and values are available at the block output.&lt;/p>
&lt;p>When a receiver request for one sensor Id is received and if this sensor Id is set in one of the sensor block of the model, then the Smart port block generates the sensor frame with the latest values set in the sensor block.
The message is sent through an UART Tx block.&lt;/p>
&lt;h2 id="fport-protocol">F.Port protocol&lt;/h2>
&lt;div class="box" style="max-width:40%">
&lt;figure itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
&lt;div class="img">
&lt;img itemprop="thumbnail" data-src="https://lubin.kerhuel.eu/img/uxv-block-fport-gui-control-frame.png" class="lazyload" />
&lt;/div>
&lt;a href="https://lubin.kerhuel.eu/img/uxv-block-fport-gui-control-frame.png" itemprop="contentUrl">&lt;/a>
&lt;/figure>
&lt;/div>
&lt;div class="box" style="max-width:80%">
&lt;figure itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
&lt;div class="img">
&lt;img itemprop="thumbnail" data-src="https://lubin.kerhuel.eu/img/uxv-block-fport-scheme-uart-connection.png" class="lazyload" />
&lt;/div>
&lt;a href="https://lubin.kerhuel.eu/img/uxv-block-fport-scheme-uart-connection.png" itemprop="contentUrl">&lt;/a>
&lt;/figure>
&lt;/div>
&lt;div class="gallery caption-position-bottom caption-effect-slide hover-effect-zoom hover-transition" itemscope itemtype="http://schema.org/ImageGallery">
&lt;div class="box" >
&lt;figure itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
&lt;div class="img" style="background-image: url('/img/uxv-block-rc-pwm-gui.png');">
&lt;img itemprop="thumbnail" data-src="https://lubin.kerhuel.eu/img/uxv-block-rc-pwm-gui.png" class="lazyload" alt="caption"/>
&lt;/div>
&lt;a href="https://lubin.kerhuel.eu/img/uxv-block-rc-pwm-gui.png" itemprop="contentUrl">&lt;/a>
&lt;figcaption data-pre="Figure " data-post=":" class="numbered">&lt;h4>Title&lt;/h4>
&lt;p>caption&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;/div>
&lt;div class="box" >
&lt;figure itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
&lt;div class="img" style="background-image: url('/img/uxv-block-rc-pwm-input-scaling.png');">
&lt;img itemprop="thumbnail" data-src="https://lubin.kerhuel.eu/img/uxv-block-rc-pwm-input-scaling.png" class="lazyload" alt="caption"/>
&lt;/div>
&lt;a href="https://lubin.kerhuel.eu/img/uxv-block-rc-pwm-input-scaling.png" itemprop="contentUrl">&lt;/a>
&lt;figcaption data-pre="Figure " data-post=":" class="numbered">&lt;h4>title&lt;/h4>
&lt;p>caption&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;/div>
&lt;/div>
&lt;p>UART configuration:
Rx and Tx channels are used. They are assigned to the same pin. UART is configured for to half duplex.&lt;/p>
&lt;ul>
&lt;li>115200 bauds/s&lt;/li>
&lt;li>Half duplex&lt;/li>
&lt;li>Rx and Tx inverted logic (Idle state is low level), 3.3V&lt;/li>
&lt;li>No parity&lt;/li>
&lt;li>1 stop bit&lt;/li>
&lt;li>No control flow&lt;/li>
&lt;/ul>
&lt;p>Rx is implemented with a Circular Buffer with 32 bytes buffer and interrupt priority 5.&lt;/p>
&lt;p>Tx is implemented with a circular buffer with 64 bytes buffer and interrupt priority 5.&lt;/p>
&lt;h3 id="ressources">Ressources&lt;/h3>
&lt;p>FrSky protocol are not always documented. The following website helped understanding the various protocol:&lt;/p>
&lt;ul>
&lt;li>
&lt;a href="http://www.robotmaker.eu/ROBOTmaker/quadcopter-3d-proximity-sensing/frysky-s-port-interface" target="_blank" rel="noopener">Smart Port on ROBOTmaker&lt;/a>&lt;/li>
&lt;li>
&lt;a href="https://code.google.com/archive/p/telemetry-convert/wikis/FrSkySPortProtocol.wiki" target="_blank" rel="noopener">Smart Port on telemetry-convert project&lt;/a>&lt;/li>
&lt;li>
&lt;a href="https://github.com/yaapu/FrskyTelemetryScript/wiki/FrSky-SPort-protocol-specs" target="_blank" rel="noopener">Smart Port TelemetryScript by Allesandro Apostoli&lt;/a>&lt;/li>
&lt;li>
&lt;a href="https://github.com/bolderflight/SBUS" target="_blank" rel="noopener">S.BUS on Arduino lib project&lt;/a>&lt;/li>
&lt;li>
&lt;a href="https://github.com/athertop/MavLink_FrSkySPort/wiki" target="_blank" rel="noopener">Smart Port on MavLink-FrSkySPort project&lt;/a>&lt;/li>
&lt;li>
&lt;a href="https://github.com/betaflight/betaflight/tree/master/src/main/telemetry" target="_blank" rel="noopener">betaflight source code&lt;/a>&lt;/li>
&lt;li>
&lt;a href="http://ardupilot.org/copter/docs/common-frsky-passthrough.html" target="_blank" rel="noopener">ArduCopter project&lt;/a>&lt;/li>
&lt;li>
&lt;a href="http://sbustelemetrysensors.blogspot.com/" target="_blank" rel="noopener">SBUS2 by Jerry Chapman&lt;/a>&lt;/li>
&lt;/ul>
&lt;section class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1" role="doc-endnote">
&lt;p>Received Signal Strength Indicator &lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/section></description></item><item><title>block Sensor</title><link>https://lubin.kerhuel.eu/uxv/block-sensor/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lubin.kerhuel.eu/uxv/block-sensor/</guid><description>&lt;!-- Enable Photo Swipe + gallery features -->
&lt;link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/photoswipe/4.1.3/photoswipe.min.css" integrity="sha384-yX+tSqQp3yF8BiTuLLOwNyaqtmZ9yFQT7IYg7U9YU9Dz/JDlh6JJQmNClCmvYl+b" crossorigin="anonymous">
&lt;link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/photoswipe/4.1.3/default-skin/default-skin.min.css" integrity="sha384-R6P/wJIrxjHcm//YCjb0S6rRgebsNn3u6U4NxVI8R03iSPAR5CwPqoq1n6U/tjFE" crossorigin="anonymous">
&lt;script src="https://cdnjs.cloudflare.com/ajax/libs/photoswipe/4.1.3/photoswipe.min.js" integrity="sha384-jkeJ/ETDRD/P4Y3I3CQi1QIwrEJjR9GdAZV2/aqDwwgA5ldCNiExYJeBwKyQC/+q" crossorigin="anonymous">&lt;/script>
&lt;script src="https://cdnjs.cloudflare.com/ajax/libs/photoswipe/4.1.3/photoswipe-ui-default.min.js" integrity="sha384-HotcxRWS6/oszHPwknjGnd066fV8+ycnO5TXDcOscFWvTtaiCtEEv+9s5Qrn1iJD" crossorigin="anonymous">&lt;/script>
&lt;div class="pswp" tabindex="-1" role="dialog" aria-hidden="true">
&lt;div class="pswp__bg">&lt;/div>
&lt;div class="pswp__scroll-wrap">
&lt;div class="pswp__container">
&lt;div class="pswp__item">&lt;/div>
&lt;div class="pswp__item">&lt;/div>
&lt;div class="pswp__item">&lt;/div>
&lt;/div>
&lt;div class="pswp__ui pswp__ui--hidden">
&lt;div class="pswp__top-bar">
&lt;div class="pswp__counter">&lt;/div>
&lt;button class="pswp__button pswp__button--close" title="Close (Esc)">&lt;/button>
&lt;button class="pswp__button pswp__button--share" title="Share">&lt;/button>
&lt;button class="pswp__button pswp__button--fs" title="Toggle fullscreen">&lt;/button>
&lt;button class="pswp__button pswp__button--zoom" title="Zoom in/out">&lt;/button>
&lt;div class="pswp__preloader">
&lt;div class="pswp__preloader__icn">
&lt;div class="pswp__preloader__cut">
&lt;div class="pswp__preloader__donut">&lt;/div>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="pswp__share-modal pswp__share-modal--hidden pswp__single-tap">
&lt;div class="pswp__share-tooltip">&lt;/div>
&lt;/div>
&lt;button class="pswp__button pswp__button--arrow--left" title="Previous (arrow left)">
&lt;/button>
&lt;button class="pswp__button pswp__button--arrow--right" title="Next (arrow right)">
&lt;/button>
&lt;div class="pswp__caption">
&lt;div class="pswp__caption__center">&lt;/div>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>The block add a sensor &amp;ldquo;packet&amp;rdquo; to be transmitted to a receiver through the Smart Port of the F.Port. The receiver send the telemetry packet to the Remote controller (RC). Thus the Simulink should have either a Smart Port or a F.Port block.&lt;/p>
&lt;p>Each sensor block declare the sensor reference composed of the two parameters PhysId and {Address+Offset}. Sensor value is composed of 4 bytes array block input. Multiple instance of the sensor block can be added in a model. Two instance can have the same sensor reference wihch is used for sensor sending multiple packets with various values (see FrSky FVLSS or GPS sensor).&lt;/p>
&lt;p>Each block instance add a 4 bytes buffer to store the sensor value which is updated at block execution time. The block sample rate defines the update rate of the internal buffer.&lt;/p>
&lt;p>The behaviour vary between Smart Port and F.Port protocol:&lt;/p>
&lt;h3 id="behaviour-with-smart-port">behaviour with Smart Port&lt;/h3>
&lt;p>The receiver ping the electronics connected on Smart Port for one sensor reference. When a given sensor is ping, it must reply by providing its 4 bytes values within 3ms.&lt;/p>
&lt;p>If more than one instance of the sensor block address the same sensor reference (PhysId, Address+Offset), each blocks data packet are sent one after another.&lt;/p>
&lt;ul>
&lt;li>If a specific sensor Id is ping twice with his (none of his when multiple) block beeing updated in between, the same content is sent again.&lt;/li>
&lt;li>If a sensor block is updated while its previous content has not been sent yet, the block update has no effect and the newer value is lost.&lt;/li>
&lt;/ul>
&lt;h3 id="behaviour-with-fport">behaviour with F.Port&lt;/h3>
&lt;p>The unique controller connected to the F.Port send a sensor value each RC channel packet received. The sensor to be send depends only on the controller which might send any sensor.&lt;/p>
&lt;p>Each sensor block update add the sensor in a FIFO queue list of sensor request to send.
Only one request for each sensor block instance can be present in this FIFO.&lt;/p>
&lt;ul>
&lt;li>If a sensor block is updated while its previous value has not been sent yet ; this block sensor request to send is still in the FIFO, then the update has no effect and the newer value is lost.&lt;/li>
&lt;/ul>
&lt;p>Unlike the Smart Port, a sensor cannot be sent twice without having been updated once first because the sensor is placed in the send request FIFO while being updated.&lt;/p>
&lt;p>for its corresponding sensor
The block update sample rate is selected by end user. whose value will be sent to the receiver. The receiver send then the sensor Id and the corresponding values to the remote through telemetry.&lt;/p>
&lt;p>Communication with the receiver can use either the Smart Port, or the F.Port.&lt;/p>
&lt;p>The sensor PhyId, APPID and APPID Offset variant are set within the block.
The PRIM field must be set to 0X10 for a sensor. The sensor value unit is set within the block.
Block input is the 4 bytes codint for the sensor value.&lt;/p></description></item><item><title>Fixed-wing autopilot based on Simulink model</title><link>https://lubin.kerhuel.eu/project/autopilot-plane/</link><pubDate>Sun, 19 May 2019 00:00:00 +0200</pubDate><guid>https://lubin.kerhuel.eu/project/autopilot-plane/</guid><description>&lt;!-- Enable Photo Swipe + gallery features -->
&lt;link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/photoswipe/4.1.3/photoswipe.min.css" integrity="sha384-yX+tSqQp3yF8BiTuLLOwNyaqtmZ9yFQT7IYg7U9YU9Dz/JDlh6JJQmNClCmvYl+b" crossorigin="anonymous">
&lt;link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/photoswipe/4.1.3/default-skin/default-skin.min.css" integrity="sha384-R6P/wJIrxjHcm//YCjb0S6rRgebsNn3u6U4NxVI8R03iSPAR5CwPqoq1n6U/tjFE" crossorigin="anonymous">
&lt;script src="https://cdnjs.cloudflare.com/ajax/libs/photoswipe/4.1.3/photoswipe.min.js" integrity="sha384-jkeJ/ETDRD/P4Y3I3CQi1QIwrEJjR9GdAZV2/aqDwwgA5ldCNiExYJeBwKyQC/+q" crossorigin="anonymous">&lt;/script>
&lt;script src="https://cdnjs.cloudflare.com/ajax/libs/photoswipe/4.1.3/photoswipe-ui-default.min.js" integrity="sha384-HotcxRWS6/oszHPwknjGnd066fV8+ycnO5TXDcOscFWvTtaiCtEEv+9s5Qrn1iJD" crossorigin="anonymous">&lt;/script>
&lt;div class="pswp" tabindex="-1" role="dialog" aria-hidden="true">
&lt;div class="pswp__bg">&lt;/div>
&lt;div class="pswp__scroll-wrap">
&lt;div class="pswp__container">
&lt;div class="pswp__item">&lt;/div>
&lt;div class="pswp__item">&lt;/div>
&lt;div class="pswp__item">&lt;/div>
&lt;/div>
&lt;div class="pswp__ui pswp__ui--hidden">
&lt;div class="pswp__top-bar">
&lt;div class="pswp__counter">&lt;/div>
&lt;button class="pswp__button pswp__button--close" title="Close (Esc)">&lt;/button>
&lt;button class="pswp__button pswp__button--share" title="Share">&lt;/button>
&lt;button class="pswp__button pswp__button--fs" title="Toggle fullscreen">&lt;/button>
&lt;button class="pswp__button pswp__button--zoom" title="Zoom in/out">&lt;/button>
&lt;div class="pswp__preloader">
&lt;div class="pswp__preloader__icn">
&lt;div class="pswp__preloader__cut">
&lt;div class="pswp__preloader__donut">&lt;/div>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="pswp__share-modal pswp__share-modal--hidden pswp__single-tap">
&lt;div class="pswp__share-tooltip">&lt;/div>
&lt;/div>
&lt;button class="pswp__button pswp__button--arrow--left" title="Previous (arrow left)">
&lt;/button>
&lt;button class="pswp__button pswp__button--arrow--right" title="Next (arrow right)">
&lt;/button>
&lt;div class="pswp__caption">
&lt;div class="pswp__caption__center">&lt;/div>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;h2 id="a-16-bits-autopilot-designed-with-simulink-and-rapid-control-prototyping-tools-">A 16-bits autopilot designed with Simulink and rapid control prototyping tools&lt;/h2>
&lt;h3 id="motivation-">Motivation&lt;/h3>
&lt;p>Building a platform for testing various autopilot control loop has become simple thanks to the many low cost elements available. To cite few of them:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>10 DoF IMU&lt;/strong>: (~$5\ $$),&lt;/li>
&lt;li>&lt;strong>GPS board&lt;/strong>: (~$10\ $$),&lt;/li>
&lt;li>&lt;strong>Pitot tube&lt;/strong> (
&lt;a href="https://lubin.kerhuel.eu/post/pitot-build/">custom&lt;/a>): (~$20\ $$),&lt;/li>
&lt;li>&lt;strong>Microcontroller board&lt;/strong>: depend on the board; rely on $\approx 5\ $$ mcu,&lt;/li>
&lt;li>&lt;strong>Plane&lt;/strong> platform: from $60$ to $120\ $$ including servos and motors.&lt;/li>
&lt;li>You also need few RC hardware:
&lt;ul>
&lt;li>&lt;strong>receiver&lt;/strong>&lt;/li>
&lt;li>&lt;strong>remote control&lt;/strong>&lt;/li>
&lt;li>&lt;strong>battery pack&lt;/strong>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>few optional hardware for &lt;strong>data logging&lt;/strong>, &lt;strong>telemetry&lt;/strong>, &lt;strong>camera&lt;/strong>&amp;hellip;&lt;/li>
&lt;/ul>
&lt;h3 id="difference-with-existing-autopilot-">Difference with existing autopilot&lt;/h3>
&lt;p>Many off the shelf autopilot exists and works great. To mention few of them:&lt;/p>
&lt;ul>
&lt;li>
&lt;a href="http://ardupilot.org/" target="_blank" rel="noopener">Ardupilot&lt;/a>&lt;/li>
&lt;li>
&lt;a href="https://px4.io/" target="_blank" rel="noopener">PX4&lt;/a>&lt;/li>
&lt;li>
&lt;a href="http://inavflight.com/" target="_blank" rel="noopener">iNav&lt;/a>&lt;/li>
&lt;li>
&lt;a href="https://www.librepilot.org/site/index.html" target="_blank" rel="noopener">LibrePilot&lt;/a>&lt;/li>
&lt;li>
&lt;a href="https://wiki.paparazziuav.org/wiki/Main_Page" target="_blank" rel="noopener">Paparazzi&lt;/a>.&lt;/li>
&lt;li>Others are listed on the
&lt;a href="https://blog.dronetrest.com/flight-controller-firmware/" target="_blank" rel="noopener">DroneTrest review&lt;/a>).&lt;/li>
&lt;/ul>
&lt;p>Usually, their internal parameters can be tuned. But, inserting your customized control-loop in such autopilot requires understanding the code structure underneath. Even well documented, it represents hundreds of C functions to navigate into, before starting any changes.
Your custom control loop might not fit within the existing structure. You might want to implement a more advanced controller than existing PIDs, use a different sample rate etc&amp;hellip;&lt;/p>
&lt;p>Starting a new project is sometime faster than re-use a pre-existing advanced one.
The presented autopilot uses a Model Based Design (MBD) approach: The autopilot code is generated from a unique Simulink model. Everything is within the diagram, from low level sensors handling up to the controller design. This MBD aproach is also named Rapid Control Prototyping (RCP).&lt;/p>
&lt;p>The autopilot control-loop uses standard math blocks. Low level systems is taken care with the Microchip blockset driving the microcontroller peripherals. The UxV blockset provide easily access to GPS, Remote Control S.BUS, F.Port and Smart Port protocol, MAVLink messaging including Way Point and Parameters protocols.
Such Simulink model allows to &amp;ldquo;get-in&amp;rdquo; the project graphically. It allows simulating parts of the system based on a simulated plane or based on values previously logged from a real flight which is helpful to design feed-forward sensor fusions algorithms.&lt;/p>
&lt;p>Another key difference is the use of a 16-bit microcontroller while other autopilot uses 32-bit microcontroller. 16-bits dsPIC prove to provide all required resources thanks to the efficient architecture underneath which handle the many peripheral used in an efficient way (UART, I2C, Output Capture, Input Compare&amp;hellip;).&lt;/p>
&lt;p>Note however a similar model based design using dsPIC microcontroller beeing developed at UCSC by Pr G.H.Elkaim in a project named SLUG. Their design is independent from the one presented here. The original project handled by M.I Lizarraga [SLUG] (&lt;a href="https://slugsuav.soe.ucsc.edu/">https://slugsuav.soe.ucsc.edu/&lt;/a>) is available online. The update
&lt;a href="https://doi.org/10.1155/2018/6892153" target="_blank" rel="noopener">SLUG II&lt;/a> projects rely on the same tool used here to target the dsPIC: the blockset for Microchip microcontrollers (free).&lt;/p>
&lt;h3 id="hardware-list-">Hardware list&lt;/h3>
&lt;p>Various combination of material was tested. Below is a selected list of hardware which prove to be efficient.&lt;/p>
&lt;link rel="stylesheet" href="https://lubin.kerhuel.eu/css/hugo-easy-gallery.css" />
&lt;div class="box" style="max-width:80%">
&lt;figure itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
&lt;div class="img">
&lt;img itemprop="thumbnail" data-src="https://lubin.kerhuel.eu/img/firstar1600-qx7.jpg" class="lazyload" alt="Volantex Firstar 1600 with Qx7 remote control."/>
&lt;/div>
&lt;a href="https://lubin.kerhuel.eu/img/firstar1600-qx7.jpg" itemprop="contentUrl">&lt;/a>
&lt;figcaption data-pre="Figure " data-post=":" class="numbered">&lt;h4>autopilot platform&lt;/h4>
&lt;p>Volantex Firstar 1600 with Qx7 remote control.&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;/div>
&lt;ul>
&lt;li>&lt;strong>RC platform&lt;/strong>: Volantex Firstar 1600 with stock motors and servos (Alternative platform are Bixler 2 and Ranger 1600)&lt;/li>
&lt;li>&lt;strong>Remote Control&lt;/strong>: FrSky QX7&lt;/li>
&lt;li>&lt;strong>Receiver&lt;/strong>: FrSky XSR-M / XSR used with either the S.Bus (receiver channel output) and Smart Port (Telemetry) protocol or with the F.Port protocol which combine both both S.bus with Smart Port saving one UART peripheral of the microcontroller. Each protocol uses only one wire thus half duplex UART. dsPIC UART peripheral enable configuring Tx and Rx on one line.&lt;/li>
&lt;li>&lt;strong>Microcontroller&lt;/strong>: dsPIC 33EP on a AUAV V3 board. External motion sensor is used instead of built-in AUAV3 sensors. Tiny sensor board with recent chip are easier to firmly attach near the CG reducing vibrations. A custom board based on a dsPIC might replace the AUAV3 board which is difficult to find now. The UDB5 mini is similar and can still be found.&lt;/li>
&lt;li>&lt;strong>IMU sensor&lt;/strong>: Gy-91 (10 DoF with 3 accelerometers, 3 rate gyro, 3 magnetometers and one barometer). Firmly attached near the CG of the plane. I2C bus is used between sensors and MCU.&lt;/li>
&lt;li>&lt;strong>Pitot tube&lt;/strong>:
&lt;ul>
&lt;li>An inner tube and an outer tube on which four holes are done laterally.&lt;/li>
&lt;li>Signal conditioning: the pitot tube pressure sensor (MP3V 5004 DP) is done with a MCHP ADC converter which integrate an analog amplifier. Converted pressure is sent to the microcontroller through the I2C bus. See
&lt;a href="https://lubin.kerhuel.eu/post/pitot-build/">build and test&lt;/a> page.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>GPS&lt;/strong>: based on a $\mu$blox M8N chip providing up to 10Hz refresh rate and provided good results compared to competitors chips.&lt;/li>
&lt;li>&lt;strong>Data logger&lt;/strong>: OpenLager board to log on SD card. It allows logging continuous UART output flow with at a baud up to 2 470 000 (much higher than a 115 200 baud rate that OpenLog data logger cannot sustain.).&lt;/li>
&lt;li>&lt;strong>Radio link&lt;/strong>: 3DR Sik based Radio module for MAVLink telemetry (plane attitude, position, Way Point and Parameters tuning) with
&lt;a href="http://qgroundcontrol.com/" target="_blank" rel="noopener">qgroundcontrol&lt;/a> base station running on most platforms (PC, android, windows, Linux).&lt;/li>
&lt;li>&lt;strong>Action cam&lt;/strong>: RunCam2 to film the plane and its surface control from the top; getting a visual behavior of the autopilot in the action.&lt;/li>
&lt;/ul>
&lt;div class="box" style="max-width:80%">
&lt;figure itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
&lt;div class="img">
&lt;img itemprop="thumbnail" data-src="https://lubin.kerhuel.eu/img/autopilot-electronic-sensors-bundle_1.jpg" class="lazyload" />
&lt;/div>
&lt;a href="https://lubin.kerhuel.eu/img/autopilot-electronic-sensors-bundle_1.jpg" itemprop="contentUrl">&lt;/a>
&lt;figcaption data-pre="Figure " data-post=":" class="numbered">&lt;h4>Embedded electronics. One early configuration for testing various sensors. Elements used: X8R receiver, PDB-XPM power board, OpenLager SD data logger, AUAV3 16-bit dsPIC microcontroller with sensors (MPU6050), IMU board 1, IMU board 2, Pressure sensor MP3V5004DP for pitot tube, GPS1, GPS2, 3S 2200maH LiPo battery, Qx7 transmitter.&lt;/h4>
&lt;/figcaption>
&lt;/figure>
&lt;/div>
&lt;h3 id="results-">Results&lt;/h3>
&lt;p>Sliding mode-based controller tested in both pitch and roll axis with two mode:&lt;/p>
&lt;ul>
&lt;li>Control plane angular rate control (angular speed set-point given through the remote control)&lt;/li>
&lt;li>Control plane angle attitude (angle set point provided through the remote control)&lt;/li>
&lt;/ul>
&lt;p>Average CPU load was 7 to 8% on a dsPIC 33EP running at 70 MIPS. It includes the IMU estimation algorithm, autopilot control loop and all low tasks (handle various protocols (I2C, NMEA for GPS, F.Port, MAVLink and log sensors data at 1Khz through an UART configured at 24700000)&lt;/p>
&lt;p>Tested with strong wind. Showing good robustness despite the low number of parameters tuned so far (video link on top).&lt;/p>
&lt;p>Pitot tube airspeed estimation validated using GPS speed measurement as reference (
&lt;a href="https://lubin.kerhuel.eu/post/pitot-build">here&lt;/a>).&lt;/p>
&lt;p>Validated the wind speed and direction estimation based on a difference between the GPS and pitot tube speed measurement considering the plane orientation.&lt;/p>
&lt;p>Validated automatic calibration of the magnetometer&amp;rsquo;s axis offset and gain. Once in the air, the magnetic perturbation near the floor are negligible. An algorithm automatically determines if the calibration can be refined using current data (using standard flight input data, no looping or specific roll required).&lt;/p>
&lt;h3 id="next-steps-">Next steps&lt;/h3>
&lt;p>Reduce chattering on ailerons when sliding mode control is enabled.&lt;/p>
&lt;p>Test in flight MAVLink protocol parameters tuning.&lt;/p>
&lt;p>Add automatic guidance of the plane, using MAVLink Way point sets.&lt;/p>
&lt;h3 id="site-content-">Site content&lt;/h3>
&lt;p>Time constraints does not allow writing a complete description of the project as originally planned. Part of projects which I find interesting and inspiring will be posted.&lt;/p>
&lt;p>Ideas to dvpt:&lt;/p>
&lt;ul>
&lt;li>IMU&lt;/li>
&lt;li>
&lt;a href="https://lubin.kerhuel.eu/post/pitot-build/">Pitot tube&lt;/a>&lt;/li>
&lt;li>
&lt;a href="https://lubin.kerhuel.eu/post/pitot-build/#wind-estimation">Wind estimation&lt;/a> combining GPS ground-speed with Pitot tube airspeed&lt;/li>
&lt;li>UxV blocks including GPS, Remote Control and MAVLink blocks and functionalities&lt;/li>
&lt;li>Magnetometers auto calibration&lt;/li>
&lt;/ul></description></item></channel></rss>
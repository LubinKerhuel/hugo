[{"authors":null,"categories":null,"content":"I\u0026rsquo;m a signal processing and control theory Ph.D with a strong engineering background in embedded system.\nEnthusiastic about applied mathematics, I realized projects on control theory from school years (1999-2005). However, the programming developpment absorbed most of the effort therefore projects ended up with simplest PID algorithm tuned by successive trials. The dedicated time spent on model, identification and control law was almost null.\nI developed a blockset to deploy Simulink models on dsPIC Micro-Controllers Unit (MCU) in 2005 which improved the situation.\nThis model based designed was a game changer to complete a PhD thesis on robots inspired from the fly\u0026rsquo;s visual control system (Biorobotics). It reduces the time from the simulation or dSPACE test bench platform to our autonomous OSCAR II robot.\nThereafter I joined MOVEA, a spin-up of the CEA-Leti research center where I designed various data fusion algorithm for sports applications experimenting the same rapid control prototyping approach in industrial context.\nI\u0026rsquo;m now part of the team developing the Microchip blockset for dsPIC and PIC32 microcontrollers at Microchip Technology Inc.\nFor company, scientists, and students\u0026rsquo; projects, the model-based design allows focusing on the high-level algorithm rather than consuming time on low level programming. It allows quick validation and improvement of algorithms through onboard tests and reduces time to market improvement.\nThe present website shares experience of Rapid Control Prototyping tools through simple but fun projects. All are based on the Microchip blockset (available for free, requires matlab/Simulink with embedded coder) and a board endowed with a dsPIC or PIC32.\nComplementary information might be found on my publications listed on Google Scholar. Theses work were achieved using a model-based design approach.\n","date":1548111549,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1548111549,"objectID":"a23063a19101e1fd52114ecb54c47e50","permalink":"https://lubin.kerhuel.eu/author/lubin/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/author/lubin/","section":"author","summary":"I\u0026rsquo;m a signal processing and control theory Ph.D with a strong engineering background in embedded system.\nEnthusiastic about applied mathematics, I realized projects on control theory from school years (1999-2005). However, the programming developpment absorbed most of the effort therefore projects ended up with simplest PID algorithm tuned by successive trials. The dedicated time spent on model, identification and control law was almost null.\nI developed a blockset to deploy Simulink models on dsPIC Micro-Controllers Unit (MCU) in 2005 which improved the situation.","tags":null,"title":"","type":"author"},{"authors":null,"categories":null,"content":"I\u0026rsquo;m a signal processing and control theory Ph.D with a strong engineering background in embedded system.\nEnthusiastic about applied mathematics, I realized projects on control theory from school years (1999-2005). However, the programming developpment absorbed most of the effort therefore projects ended up with simplest PID algorithm tuned by successive trials. The dedicated time spent on model, identification and control law was almost null.\nI developed a blockset to deploy Simulink models on dsPIC Micro-Controllers Unit (MCU) in 2005 which improved the situation.\nThis model based designed was a game changer to complete a PhD thesis on robots inspired from the fly\u0026rsquo;s visual control system (Biorobotics). It reduces the time from the simulation or dSPACE test bench platform to our autonomous OSCAR II robot.\nThereafter I joined MOVEA, a spin-up of the CEA-Leti research center where I designed various data fusion algorithm for sports applications experimenting the same rapid control prototyping approach in industrial context.\nI\u0026rsquo;m now part of the team developing the Microchip blockset for dsPIC and PIC32 microcontrollers at Microchip Technology Inc.\nFor company, scientists, and students\u0026rsquo; projects, the model-based design allows focusing on the high-level algorithm rather than consuming time on low level programming. It allows quick validation and improvement of algorithms through onboard tests and reduces time to market improvement.\nThe present website shares experience of Rapid Control Prototyping tools through simple but fun projects. All are based on the Microchip blockset (available for free, requires matlab/Simulink with embedded coder) and a board endowed with a dsPIC or PIC32.\nComplementary information might be found on my publications listed on Google Scholar. Theses work were achieved using a model-based design approach.\n","date":-62135596800,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":-62135596800,"objectID":"2d9f759bef3b84d9984be44bfdcf0358","permalink":"https://lubin.kerhuel.eu/author/thomas/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/author/thomas/","section":"author","summary":"I\u0026rsquo;m a signal processing and control theory Ph.D with a strong engineering background in embedded system.\nEnthusiastic about applied mathematics, I realized projects on control theory from school years (1999-2005). However, the programming developpment absorbed most of the effort therefore projects ended up with simplest PID algorithm tuned by successive trials. The dedicated time spent on model, identification and control law was almost null.\nI developed a blockset to deploy Simulink models on dsPIC Micro-Controllers Unit (MCU) in 2005 which improved the situation.","tags":null,"title":"","type":"author"},{"authors":null,"categories":null,"content":"","date":-62135596800,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":-62135596800,"objectID":"d41d8cd98f00b204e9800998ecf8427e","permalink":"https://lubin.kerhuel.eu/author/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/author/","section":"author","summary":"","tags":null,"title":"Authors","type":"author"},{"authors":null,"categories":null,"content":"Overview of projects\n","date":1547805295,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1547805295,"objectID":"4cdd37113783e47641dd300543c94e1b","permalink":"https://lubin.kerhuel.eu/docs/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/docs/","section":"docs","summary":"Overview of projects","tags":null,"title":"Overview","type":"docs"},{"authors":null,"categories":null,"content":"","date":1543618800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1547860577,"objectID":"84a25e4cc91f774777fb3b8fd89fceb3","permalink":"https://lubin.kerhuel.eu/project/inverted_pendulum_flywheels/","publishdate":"2018-12-01T00:00:00+01:00","relpermalink":"/project/inverted_pendulum_flywheels/","section":"project","summary":"Inverted pendulum running on a microstick II dsPIC board. Angle is estimated from low cost MEMS sensors with an IMU data fusion algorithm. Stabilizing control loop drives two DC motors from a modified RC toy. No encoder sensor are used.","tags":["Inverted pendulum","control","state space","LQR","rapid prototyping","model-based design","matlab","simulink","DIY","dsPIC"],"title":"Inverted Pendulum","type":"project"},{"authors":null,"categories":null,"content":" Control a 24V DC motor using the MCLV V2 board with a dsPIC 33EP256MC506. This hands-on is for 5th year students at INSA-Lyon.\nThe hands-on Lab subject available at: https://rtdc.ctrl-elec.fr/.\nSlides presents the adaptation required to go from a Simulink model for Simulation (or DSPACE) to a Simulink model targeting a microcontrollers. Two topics are presented:\n Real-time scheduler / CPU load analysis Fixed-point datatypes  Authors:  Romain DELPOUX (Romain.Delpoux at insa-lyon.fr), Assistant Professor, INSA de Lyon, Laboratoire Amp√®re UMR CNRS 5005. Lubin KERHUEL (Lubin.Kerhuel at microchip.com), Dr-Engineer, Microchip Technology Inc.  ","date":1543618800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1547860577,"objectID":"302c3fd4ee8916cc61aece44dff60b9e","permalink":"https://lubin.kerhuel.eu/project/lab_dc_motor/","publishdate":"2018-12-01T00:00:00+01:00","relpermalink":"/project/lab_dc_motor/","section":"project","summary":"Simulation \u0026 real-time control of a 24v DC motor (INSA Lyon hands-on)","tags":["simulink","matlab","motor-control","rapid-prototyping","DC-motor","speed-controller"],"title":"Real Time Control for a DC Motor","type":"project"},{"authors":null,"categories":null,"content":" Presentation  Objective is to build an unstable pendulum platform to experiment various control loop to stabilize it.\n    Top of the inverted pendulum   The DIY hardware is presented. An overview of the model is given and a LQR feedback control loop tested.\n    -- Video of the stabilized platform with a 4 state LQR feedback loop. The platform is completely autonomous (no user input).\nThe top of the pendulum is comparable to a head where the microcontroller acts as a brain and the inertial sensor (accelerometers and rate gyro) as the inner ears. The base of the pendulum is a modified RC toys comprising two wheels driven by two independent DC motor (see pictures below).\nhardware The head and the base trolley are described successively. They are separated with an $8mm$ carbon tube. The pendulum length is $0.52m$ from wheel axis to the top. Wheels diameters is $8cm$. Pendulum total weight is $200g$ comprising $111g$ for the 4 AA batteries.\n  Inverted Pendulum   head electronics Microcontroller The controller is a Microstick II board equipped with a dsPIC 33EP128MC202 running at $\\approx 70\\ MIPS$. It is powered through the USB modified cable which provide only the power supply from 4 AA batteries hold in the base.\n  Microcontroller and sensor on top of the inverted pendulum  A prototyping board support a Microstick II board with the dsPIC 33EP128MC202. A sensor board from drotek endowing the ICM-20608 inertial sensor is screwed on the base board.   IMU sensor The unique sensor used is a 6 DoF1 IMU2 sensor: the ICM-20608 from invensense mounted on a drotek board provides:\n a 3 axis Accelerometers and a 3 axis rate gyro.  The ICM-20608 values are read through an I2C interface running at 400kHz. The I2C interface implemented through the I2C blocks for dsPIC enable hot plug of the sensor: The microcontroller sends an initialization sequence for the sensor each time this last is detected. Others sensor boards were tested endowed with MPU9250 and MPU6050 chips. The GY-91 board is currently the more commonly found on the market and has 10 DoF1.\n The accelerometer is configured with a range of $\\pm 8g$ low pass filtered at $99Hz$. The rage gyro is configured with a range of $\\pm 500 \\deg/s$ low pass filtered at $250Hz$.  The PCB board provides a $3.3V$ regulator and 4 pin extra interface ( GND, +3.3v, Tx, Rx ) to connect either a data logger, a radio link for telemetry module or an RC receiver capable of S.BUS or S.Port protocol (i.e. UART based).\nBase trolley Motors The base trolley is based on low cost a 2-wheel remote control toy. Its electronics is removed. Two pairs of wires power the two DC motors in either direction through an L298N H bridge external module.\n  FlyWheels toy package     Inside of the FlyWheels toy with its two DC motors   Power electronics The L298N H bridge controls two DC motors. For each motor:\n Two logic signals set the motor state: direction, brake, or free-wheels. One logic signal power-up the motor depending on to the state defined. This third signal is modulated with a 100Hz square periodic signal (PWM) whose duty cycle vary from 0% to 100%. It sets the torque for the motor.  The flat multicolor rubbon connects 6 logic control signal (3 for each motor) from the Microstick II dsPIC to the input of the L298N H bridge.\n  Base trolley of the inverted pendulum  A L298N H bridge (for arduino) power board drives the two DC motors of a modified FlyWheels toy. Four AA batteries powers the pendulum.   Batteries Four $1.2V$ AA NiMh batteries are dispatched on both side of the trolley. $\\approx 4.8V$ powers the motors and the electronics. The black and red wires from the trolley to the top of the pendulum powers the Microstick II electronic and sensors.\nModel The pendulum model is composed of two intertwinned sub-system:\n The 1 DoF pendulum, with 1 rotational DoF1 around the wheels axis The 1 DoF trolley, with 1 horizontal translation DoF1.  The 1 DoF pendulum is characterized by a length $L$ and a weight $M$. It is a $2^{nd}$ order system.\nThe 1 DoF trolley is characterized by the motors dynamics when translating the base loaded with an up-right pendulum. The model is $1^{st}$ order system characterized by its time constant $\\tau$.\n1 rotational DoF pendulum bla bla bla\n1 translational DoF trolley Controller Stabilization overview: The microcontroller computes the angle of the pendulum from the inertial sensor measurements (accelerometers and rate gyro). A feedback loop stabilize the pendulum up right while maintaining the pendulum position still. The pendulum translation is estimated through an internal dynamic model of the trolley stimulated with a copy of the DC motor command. The pendulum slow translations reflect the drift of the internal estimation of the displacement.\nVideo of the inverted Pendulum when it encounters a wall:     --\n Degree of Freedom ^ Inertial Measurement Unit ^   ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1547937328,"objectID":"c13377e7fa82e136ee7818015f8986c8","permalink":"https://lubin.kerhuel.eu/docs/invertedpendulum/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/docs/invertedpendulum/","section":"docs","summary":"Presentation  Objective is to build an unstable pendulum platform to experiment various control loop to stabilize it.\n    Top of the inverted pendulum   The DIY hardware is presented. An overview of the model is given and a LQR feedback control loop tested.\n    -- Video of the stabilized platform with a 4 state LQR feedback loop. The platform is completely autonomous (no user input).","tags":null,"title":"Inverted Pendulum","type":"docs"},{"authors":null,"categories":null,"content":" Prototypage rapide avec Simulink sur dsPIC MPLAB device blocks for Simulink\nL.Kerhuel \u0026amp; R.Delpoux\n Pendule inverse  Video\nPlan: Mod√®le de simulation \u0026amp; g√©n√©ration de code\n Diff√©rences Temporel optimisation et type de donn√©es blocks et fonctionnalit√©s Simulink  DSPACE  Aspect Temporel: Simulation Mod√©lisation en temps continue, transform√© de Laplace dans le domaine p (ou s)\n Solver r√©sout les √©quations diff√©rentielles Pas de contrainte temps r√©elle R√©sultat d√©pend du solveur ; pas de calcul variable.  Aspect Temporel: Impl√©mentation Impl√©mentation en temps discret avec un pas de calcul fixe\n pas de solveur Contrainte temps r√©el Single-Rate \u0026amp; Multi-Rate Single-Tasking \u0026amp; Multi-Tasking   Discrete times  Single-rate:\n Les blocks ont tous la m√™me p√©riode d\u0026rsquo;ex√©cution (M√™me couleur)  Multi-Rate\n Les blocks peuvent avoir des p√©riodes d\u0026rsquo;ex√©cution diff√©rentes (Sch√©ma multicolore)    Mod√®le multi-rate Charge CPU d\u0026rsquo;un mod√®le multi-rate single-tasking (@70 mips)  Charge CPU d\u0026rsquo;un mod√®le multi-rate single-tasking (@20 mips)  Single-Tasking Single-Tasking: Dans le slot de temps, l\u0026rsquo;ex√©cution de tous les blocks doit se terminer avant la fin du slot.\nMulti-Tasking Multi-Tasking: Pr√©emption possible -\u0026gt; Monotonic Rate Scheduler\n La t√¢che la plus fr√©quente √† la priorit√© maximale  Pr√©emptera une tache plus lente Beaucoup plus flexible Mode par d√©faut (voir options du solveur)   Charge CPU d\u0026rsquo;un mod√®le multi-rate single-tasking (@70 mips)  Charge CPU d\u0026rsquo;un mod√®le multi-rate single-tasking (@20 mips)  Tasking Conclusion  Single-Tasking @ 20 MIPS -\u0026gt; Overload  dispatcher la tache la plus lente sur plusieurs slots (option d\u0026rsquo;offset dans Time Step -\u0026gt; [.001 .005])  Multi-Tasking @ 20 MIPS -\u0026gt; Ok  Rate transfert block options  Data Integrity Deterministic data transfert    Optimisation type de donn√©es  Virgule Fixe Virgule Flottante  Flotant    IEEE 754 Single Double     Format width 32 64   Sign bit 1 1   exponent width 8 11   Precision width 23+1 52+1    1st bit of the significand is always 1. Phantom bit\nCustom 8 bit Floating point    Parameter Single Double Custom     Format width 32 64 8   Sign bit 1 1 1   exponent width 8 11 4   Precision width 23+1 52+1 3+1    Script Matlab pour tester un flottant 8 bits % 4 bit exponent (signed) emin = -7; emax = 6; % 3 bits significand p = 3; exps = 2.^[emin:emax]; vals = (2^p) + [0:(2^p-1)]; % significand with leading 1 TotalVal = vals'*exps; % add denormalized values 8bitFloat = unique([TotalVal ; 2^emin * [0:(2^m-1)]']); 8bitFloat = unique(flipud(-TotalVal) ;TotalVal]); % with neg vals  Simulink Data-type Datatype  int8\u0026hellip;uint23 fixdt(1,16,15)  Scaling is En15 (Exp neg) $$\\rightarrow 2^-15$$  fixdt(1,16)  signed (1) 16 bit width Scaling is derived from min \u0026amp; max   Datatype  fixdt(1,16,.01,0)  Scaling is sfix16Sp01 Slope point 01\n   TP https://www.ctrl-elec.fr https://lubin.kerhuel.eu/slides/slides_dcmotor_insa\nElements de correction PWM settings Liens:  MPLAB device blocks for Simulink: https://www.microchip.com/SimulinkBlocks MPLAB X: https://www.microchip.com/MPLABX XC16: https://www.microchip.com/XC16  ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1547655532,"objectID":"813e22095d4c80ec8db0c156d303b80c","permalink":"https://lubin.kerhuel.eu/slides/slides_dcmotor_insa/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/slides/slides_dcmotor_insa/","section":"slides","summary":"Prototypage rapide avec Simulink sur dsPIC MPLAB device blocks for Simulink\nL.Kerhuel \u0026amp; R.Delpoux\n Pendule inverse  Video\nPlan: Mod√®le de simulation \u0026amp; g√©n√©ration de code\n Diff√©rences Temporel optimisation et type de donn√©es blocks et fonctionnalit√©s Simulink  DSPACE  Aspect Temporel: Simulation Mod√©lisation en temps continue, transform√© de Laplace dans le domaine p (ou s)\n Solver r√©sout les √©quations diff√©rentielles Pas de contrainte temps r√©elle R√©sultat d√©pend du solveur ; pas de calcul variable.","tags":null,"title":"Prototypage Rapide avec Simulink sur dsPIC","type":"slides"},{"authors":null,"categories":null,"content":" Test slides  My Title !   mes notes\nControls  Next: Right Arrow or Space Previous: Left Arrow Start: Home Finish: End Overview: Esc Speaker notes: S Fullscreen: F Zoom: Alt + Click PDF Export: E  Code Highlighting Inline code: variable\nCode block:\nporridge = \u0026quot;blueberry\u0026quot; if porridge == \u0026quot;blueberry\u0026quot;: print(\u0026quot;Eating...\u0026quot;)  Math In-line math: $x + y = z$\nBlock math:\n$$ f\\left( x \\right) = \\;\\frac{{2\\left( {x + 4} \\right)\\left( {x - 4} \\right)}}{{\\left( {x + 4} \\right)\\left( {x + 1} \\right)}} $$\nFragments Make content appear incrementally\n{{% fragment %}} One {{% /fragment %}} {{% fragment %}} **Two** {{% /fragment %}} {{% fragment %}} Three {{% /fragment %}}  Press Space to play!\nOne  Two  Three \nA fragment can accept two optional parameters:\n class: use a custom style (requires definition in custom CSS) weight: sets the order in which a fragment appears  Speaker Notes Add speaker notes to your presentation\n{{% speaker_note %}} - Only the speaker can read these notes - Press `S` key to view {{% /speaker_note %}}  Press the S key to view the speaker notes!\n Only the speaker can read these notes Press S key to view   Themes  black: Black background, white text, blue links (default) white: White background, black text, blue links league: Gray background, white text, blue links beige: Beige background, dark text, brown links sky: Blue background, thin dark text, blue links   night: Black background, thick white text, orange links serif: Cappuccino background, gray text, brown links simple: White background, black text, blue links solarized: Cream-colored background, dark green text, blue links  Custom Slide Customize the slide style and background\n{{\u0026lt; slide background-image=\u0026quot;/img/boards.jpg\u0026quot; \u0026gt;}} {{\u0026lt; slide background-color=\u0026quot;#0000FF\u0026quot; \u0026gt;}} {{\u0026lt; slide class=\u0026quot;my-style\u0026quot; \u0026gt;}}  Custom CSS Example Let\u0026rsquo;s make headers navy colored.\nCreate assets/css/reveal_custom.css with:\n.reveal section h1, .reveal section h2, .reveal section h3 { color: navy; }  Questions? Ask\nDocumentation\n","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1547655532,"objectID":"83f508f052e23f7ee5731151e8db499c","permalink":"https://lubin.kerhuel.eu/slides/testslides/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/slides/testslides/","section":"slides","summary":"Test slides  My Title !   mes notes\nControls  Next: Right Arrow or Space Previous: Left Arrow Start: Home Finish: End Overview: Esc Speaker notes: S Fullscreen: F Zoom: Alt + Click PDF Export: E  Code Highlighting Inline code: variable\nCode block:\nporridge = \u0026quot;blueberry\u0026quot; if porridge == \u0026quot;blueberry\u0026quot;: print(\u0026quot;Eating...\u0026quot;)  Math In-line math: $x + y = z$\nBlock math:\n$$ f\\left( x \\right) = \\;\\frac{{2\\left( {x + 4} \\right)\\left( {x - 4} \\right)}}{{\\left( {x + 4} \\right)\\left( {x + 1} \\right)}} $$","tags":null,"title":"test slides","type":"slides"}]
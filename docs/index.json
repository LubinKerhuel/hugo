[{"authors":null,"categories":null,"content":"\rThree blocks add support for three protocol found in receivers. Traditional PWM output receiver can be handled directly through the Input Capture or Change Notification peripheral and do not required a specific block.\nS.BUS, Smart Port and F.Port S.BUS, Smart Port (also named S.Port) and F.Port are three protocol available in FrSky RC receiver and compatible. All three protocol rely on the UART peripheral with different settings. Their purpose is specific:\nS.BUS is a unidirectional protocol from the receiver to an external device to provide channels values and RSSI1 (i.e. radio link quality). Smart Port (S.Port) is a bidirectional protocol. The receiver ping for various connected sensors and retrieve measurements to send through telemetry to the remote control. F.Port is a bidirectional protocol where the receiver communicate channels values and RSSI, and get values from connected sensors to send through telemetry to the remote control. The two bidirectional protocol Smart Port and F.Port use one single wire for Tx and Rx. Communication is done in Half duplex mode.\nFrSky receiver have two variants: (model shipped with Smart port: x4r, rx4r, x6r, s6r, rx6r, x8r, s8r, xsr, xsr-m, r-xsr …)\nS.Bus \u0026amp; Smart Port (stock), available on two distinct three pins ports F.Port available on one replaced Smart Port three pin port Stock receiver have two ports: S.BUS and Smart Port. This is changed for a unique F.Port by flashing an alternative firmware provided by FrSky. The alternative firmware remove the S.BUS port and convert the Smart Port to an F.Port.\nUART settings and implementation S.BUS, S.Port and F.Port have different UART setting defined in the table:\nBaudrate Duplex Logic parity stop-bit flow-ctrl S.BUS 100000 Rx only 3.3V inverted even 2 no Smart Port 57600 Half 3.3V inverted no 1 no F.Port 115200 Half 3.3V inverted no 1 no Implementation on dsPIC with the MPLAB block for Simulink was successfully used with the implementation below set through the UART Configuration block:\nImplementation Buffer size Interrupt priority S.BUS Rx Circular Buffer 64 5 S.BUS Tx None - - Smart Port Rx Circular Buffer 32 5 Smart Port Tx Circular Buffer 32 6 F.Port Rx Circular Buffer 32 5 F.Port Tx Circular Buffer 64 5 Connecting S.BUS, Smart Port and F.Port simulink blocks to UART Rx \u0026amp; Tx S.Bus, F.Port and Smart Port xxx takes receiver output stream to extract control values sent by the remote. The input stream is a vector which length is defined by end user. All values of the vector do not have to be set. The block use the N input length scalar to know how many bytes from the input vector are received values and must be processed. The block input vector can received partial data packet. The whole receiver packet can be sliced over time and sent as values are received by the MCU ; these blocks reconstruct the packet before processing it.\nS.BUS protocol UART Configuration:\nOnly Rx channel is used with the following parameters:\n100 000 bauds/s Rx inverted logic (Idle state is low level), 3.3V Even parity 2 stop bits No control flow Rx is implemented with a Circular Buffer with 64 bytes buffer and interrupt priority 5.\nUART Rx block is sampled at 1kHz (1ms). Vector output size set to “inherited via internal rule” is given a value of 10 (no more than 10 bytes can be received in 1 ms at 100000 bauds/s with two stop bits)\nThe S.BUS block GUI allows to set which block output shoudl be decoded and the scaling for each channels decoded.\nSimulink S.BUS block user interface\rThis simulink block decode S.BUS input stream. Scaling for output RC channels can be selected for each channels.\nScheme of the UART Rx block connected to the the S.BUS block.\rScheme to decode S.BUS for use in a dsPIC\nScheme to center and scale S.BUS channels output within [-1000 1000]\rraw values from S.BUS are not centered and scaled with power of 2.\nSmart Port protocol Smart Port (S.Port) use UART where Rx and Tx pins are set on the same pin with inverted logic (1 is high level). One single wire is used in half duplex communication mode.\nUART configuration setting:\n56700 bauds/s Half duplex Rx and Tx inverted logic (Idle state is low level), 3.3V No parity 1 stop bit No control flow Implementation:\nRx is implemented with a Circular Buffer with 32 bytes buffer and interrupt priority 5.\nTx is implemented with a circular buffer with 32 bytes buffer and interrupt priority 6.\nThe Smart port block decode inputs from the receiver and from other sensors connected to the one wire bus.\nIf a sensor frame is received, it is decoded and values are available at the block output.\nWhen a receiver request for one sensor Id is received and if this sensor Id is set in one of the sensor block of the model, then the Smart port block generates the sensor frame with the latest values set in the sensor block. The message is sent through an UART Tx block.\nF.Port protocol Title\rcaption\ntitle\rcaption\nUART configuration: Rx and Tx channels are used. They are assigned to the same pin. UART is …","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1573724420,"objectID":"807f296dcbc57cc503a05f5db01065d0","permalink":"https://lubin.kerhuel.eu/uxv/block-receiver-telemetry/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/uxv/block-receiver-telemetry/","section":"uxv","summary":"Simulink blocks to get data from a receiver and set data to be sent to the remote controller through the telemetry channel. S.BUS, Smart Port and F.Port block support respective protocols.","tags":["rapid prototyping","model based design (MBD)","matlab","simulink","UAV","UxV","receiver-telemetry","S.BUS","F.Port","Smart Port","block"],"title":"block receiver \u0026 telemetry: S.BUS, Smart Port, F.Port","type":"docs"},{"authors":null,"categories":null,"content":"\rThe block add a sensor “packet” to be transmitted to a receiver through the Smart Port of the F.Port. The receiver send the telemetry packet to the Remote controller (RC). Thus the Simulink should have either a Smart Port or a F.Port block.\nEach sensor block declare the sensor reference composed of the two parameters PhysId and {Address+Offset}. Sensor value is composed of 4 bytes array block input. Multiple instance of the sensor block can be added in a model. Two instance can have the same sensor reference wihch is used for sensor sending multiple packets with various values (see FrSky FVLSS or GPS sensor).\nEach block instance add a 4 bytes buffer to store the sensor value which is updated at block execution time. The block sample rate defines the update rate of the internal buffer.\nThe behaviour vary between Smart Port and F.Port protocol:\nbehaviour with Smart Port The receiver ping the electronics connected on Smart Port for one sensor reference. When a given sensor is ping, it must reply by providing its 4 bytes values within 3ms.\nIf more than one instance of the sensor block address the same sensor reference (PhysId, Address+Offset), each blocks data packet are sent one after another.\nIf a specific sensor Id is ping twice with his (none of his when multiple) block beeing updated in between, the same content is sent again. If a sensor block is updated while its previous content has not been sent yet, the block update has no effect and the newer value is lost. behaviour with F.Port The unique controller connected to the F.Port send a sensor value each RC channel packet received. The sensor to be send depends only on the controller which might send any sensor.\nEach sensor block update add the sensor in a FIFO queue list of sensor request to send. Only one request for each sensor block instance can be present in this FIFO.\nIf a sensor block is updated while its previous value has not been sent yet ; this block sensor request to send is still in the FIFO, then the update has no effect and the newer value is lost. Unlike the Smart Port, a sensor cannot be sent twice without having been updated once first because the sensor is placed in the send request FIFO while being updated.\nfor its corresponding sensor The block update sample rate is selected by end user. whose value will be sent to the receiver. The receiver send then the sensor Id and the corresponding values to the remote through telemetry.\nCommunication with the receiver can use either the Smart Port, or the F.Port.\nThe sensor PhyId, APPID and APPID Offset variant are set within the block. The PRIM field must be set to 0X10 for a sensor. The sensor value unit is set within the block. Block input is the 4 bytes codint for the sensor value.\n","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1573724420,"objectID":"f33b6c46eb55fe1127635a3c72cc9404","permalink":"https://lubin.kerhuel.eu/uxv/block-sensor/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/uxv/block-sensor/","section":"uxv","summary":"The Sensor block set sensor ID and data values to send to the remote through telemetry. Data are sent to the receiver either through the F.Port or through a Smart Port.","tags":["rapid prototyping","model based design (MBD)","matlab","simulink","UAV","UxV","Sensor","F.Port","Smart Port","block"],"title":"block Sensor","type":"docs"},{"authors":["Lubin Kerhuel"],"categories":["DIY"],"content":"\rOriginal motor of my parrot Disco Flying wing is broken after few flights. It is not burned. The CHUCK controller is still ok including the motor power stage. The problem comes from wires connections cut at the interface between motor and power cable. It is difficult to repair as the connection break is just few millimeters from the motor windings.\nThe root cause for theses wire cuts seems to be vibrations: On the original PF070253 DISCO motor, the power cable is not attached on the motor but directly connected on the thin motor wiring. Vibration of the cable powering the motor is likely to break thin motor wiring at the interface between cable and motor.\nParrot DISCO original PF070253 motor (1280KV) with added connectors - front\rParrot DISCO original PF070253 motor (1280KV) with added connectors - front\nAttempt to repair the motor PF070253 of the DISCO FPV\rParrot DISCO original PF070253 motor - back\nThe original DISCO motor (PF070253, 1280KV) is difficult to find and out-priced. The SURPASS Hobby C2826 (size 2208) - 1350KV have similar shape and electrical characteristics. It is compatible with the Parrot stock foldable propeller and DISCO wing motor mount. The motor reference is unclear as the motor size correspond to a “2208” but the motor is stamped (and sold) with reference C2826. Box of the SURPASS Hobby motor mention is “C2826 (2208) - 1350KV”.\nWith this motor upgrade, the DISCO Flying wing is flying as with the original motor. The Parrot CHUCK controller handle motor speed as if it was the original one. Power consumption seems similar than the one with the original motor. It has been tested with the original DISCO propeller.\nI get a propeller replacement candidate in case the original did not fit the motor: the GEMFAN 8040 which fit that motor and has the same size as the stock propeller (Not tested).\nParrot DISCO with SURPASS Hobby C2826 (2208) - 1350KV replacement motor - inside\rParrot DISCO with SURPASS Hobby C2826 (2208) - 1350KV replacement motor - inside\nParrot DISCO with SURPASS Hobby C2826 (2208) - 1350KV replacement motor - detail\rParrot DISCO with SURPASS Hobby C2826 (2208) - 1350KV replacement motor - detail\n","date":1602374400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1604394563,"objectID":"11742c5c3dab1657d1468dbaab1960c6","permalink":"https://lubin.kerhuel.eu/post/parrot-disco-motor-replacement/","publishdate":"2020-10-11T00:00:00Z","relpermalink":"/post/parrot-disco-motor-replacement/","section":"post","summary":"Motor candidate to replace the original PF070253 motor on the Parrot Disco Flying Wing.","tags":["Parrot","Disco","Motor"],"title":"Replacement motor for Parrot Disco FPV Flying Wing","type":"post"},{"authors":["Lubin Kerhuel"],"categories":["DIY"],"content":"\rA KOMBI bike motorized with the TSDZ2 mid drive motor. The motor firmware is upgraded with the TSDZ2 Flexible OpenSource firmware initiated by Casainho.\nTypically, empty or loaded with two kids; three in rare occasions; 2300km so far with original bike chain and original motor blue gear and clutch.\nThe first blue bike (pictures below) uses a 36V motor - 36V battery (battery swing from 33V to 42.4V). A second bike realized with the 48V TSDZ2 motor - 48V battery (swing from 40V to 52V). The 48V version is more comfortable than the 36V version. With the 36V version, the battery swing does not allows to benefit the full potential of the motor when once it is half empty. This is not noticed with the 48V motor.\nProblems encountered:\n2300 km: crank bearing noise. Seems cranck were not tight enough. Noise in warm weather (\u0026gt;15°C) Not changed yet but working fine (it’s winter time). Motor Installation (1/3)\rOriginal pedals\nMotor Installation (2/3)\rAccessing the BSA 68 bottom bracket\nMotor Installation (3/3)\rBSA 68 bottom bracket\nTSDZ2 motor installed\rTSDZ2 lying against the front tube protected by an air tube\nYuba KOMBI bike equipped with TSDZ2 motor and battery\rBattery vertically installed behind the seat\nYuba KOMBI bike trailing a bike\rSetup for trailing a BMX race-mini bike (no-one on the BMX). The trailed bike is free to rotate about its steering wheel axis and vertically (up-down) following smoothly the front bike.\nAttachment setup for trailing another bike\rThe front wheel of the trailed bike is engaged in a fence of the foot pod. A strap maintains the front wheel firmly attached to the trailing bike providing two degree of freedom to the trailed bike frame. A second strap helps to maintain the bike the same vertical plane. Note the foot-pod fence small angle providing space for kids foots on the front bike.\nKOMBI bike on a car rack\rYuba KOMBI bike attached with two other bikes on the car rack.\nVarious https://em3ev.com/\n36V battery: 3.385 kg 42V battery: 3.965 kg ","date":1579132800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1610569999,"objectID":"eba5776a9430c06f7a9a193cbfd13f4b","permalink":"https://lubin.kerhuel.eu/post/motorized-kombi-bike/","publishdate":"2020-01-16T00:00:00Z","relpermalink":"/post/motorized-kombi-bike/","section":"post","summary":"Yuba long-tail bike KOMBI equipped with Tongsheng TSDZ2 motor. Update TSDZ2 with an open-source e-bike firmware. Modified Kombi foot-pods to trail another bike.","tags":["bike"],"title":"Electric Kombi bike","type":"post"},{"authors":["Lubin Kerhuel"],"categories":["electronics","sensor"],"content":"\rTable of Contents Pitot tube principle Pitot-Prandtl tube Electronics Sensitivity requirements and Pressure sensor Signal conditioning and conversion Sensor static tests Flight setup Experimental results Comparison with GPS ground speed Wind estimation Pitot tube principle A Pitot-Darcy probe is an airspeed sensor commonly used in aviation. It consists of a tube pointing in the forward direction. When the sensor moves forward a stop pressure $P_t$ is added at its tip. The differential pressure $P_{diff}$ is measured between the tip of the tube $P_t$ and the static pressure $P_s$. One variant named from its inventor Prandtl tube has static air ports directly on the side of the tube.\nThe pressure added at tube tip is the square of the airspeed : $P_t = P_s + \\frac{1}{2}\\rho v^2$ where $ P_t $ and $P_s$ are measured in Pascal unit (Pa). $\\rho$ is the air density constant typically in $[1.14 \\ 1.34]$ depending on temperature \u0026amp; altitude. $v$ is the airspeed in $m.s^{-1}$. The differential pressure measured is $P_{diff} = P_t - P_s = \\frac{1}{2}\\rho v^2$\nPitot-Prandtl tube Prandtl tube is one version of a Pitot probe where an inner tube is placed in the center of an outer tube. Space between the two tubes is filled-in on few mm near the tip with an epoxy adhesive (Araldite or equivalent). The side of the outer tube is drilled to sense the static pressure. At the bottom, the inner tube which is longer act as a connector for the dynamic pressure sensor and third short tube is added to create a connector to the static pressure area which lies in the empty space between the two tube.\nThe static pressure holes must be drilled at a minimum distance from the tube tip where airflow perturbations are reduced. A distance 4 times the diameter (d=4mm)of the outer tube is retains here (16mm). Four 1mm holes were drilled with a Dremel hand tool. The three tubes are presented on the figure below.\nFirst test was done using brass tubes. Inner tube width is 2/1mm (outside/inside) and outer tube is 4/3mm.\nBrass inner and outer tubes of the Pitot tube.\rTube alfer from Leroy Merlin. Inner tube is 2mm/1mm. Outer tube is 4mm/3mm. Outer tube length is m=86mm. Four 1mm holes are drilled at l=16mm from the tip.\nReferences:\nreport by W.Gracey on the impact of the various shape on the measurement. report (french) from ANSTJ with general information on Pitot sensor. website (French) from Rémi Bourgin with experimental Pitot tube for RC plane Electronics Sensitivity requirements and Pressure sensor The differential pressure measured vary with the square of the speed. RC plane speed can be quite low. Challenge is to be sensitive enough to obtain good measurement even in the low speed range of few meters per seconds.\nThe MP3V5004dp from NXP is a sensitive differential pressure sensor. Its differential measurement range goes from 0 to 3.92 kPa. The analog output is ratio-metric and swing from 0.6V to 3V ($\\Delta V =2.4V$). For reference, 1 kPa is approximately the pressure of 10cm of water.\nWe are interested in speed range varying from $0$ to $25 m.s^{-1}$ ($90km/h$) which correspond to a maximum differential pressure of 3.75 cm of water, or 0.375 kPa. The MP3V5004DP sensor is used in 10% of its nominal range.\nTable below provide theoretical differential pressure expected for various speed using $P_{diff} = \\frac{1}{2}\\rho v^2$ with $\\rho=1.15$.\nv (m/s) v (Km/h) $P_{diff}$ (Pa) ~ $H_2O$ (cm) MP3V5004dp \u0026amp; MCP3428 (0.2041Pa / LSB1) 1 3.6 0.6 0.006 3 2 7.2 2.4 0.024 12 4 14.4 9.6 0.096 47 7 25.2 29.4 0.294 144 10 36 60 0.6 294 15 54 135 1.3 661 20 72 240 2.4 1176 25 90 375 3.75 1837 30 108 540 5.4 2646 40 144 960 9.6 4704 (4095 sat) Signal conditioning and conversion The pressure sensor electronics is placed in the wing close (~10cm) to the Pitot tube. The analog to digital conversion is integrated in the sensor board. The MCP3428 from Microchip is a high resolution sigma-delta converter with a programmable gain factor from 1 to 8. It has a digital I2C bus interface and its I2C address can be selected. Similar DAC to consider are MCP342x, the newer MCP346x family or the MCP356x providing increased accuracy and higher sampling rate but its package is smaller thus more difficult to handle for a DIY project.\nThe MP3V5004dp output analog signal is connected to the MCP3428 Sigma-Delta ADC through a first order RC low pass filter with a cut off frequency at $28Hz$ ($R=5.6 kOhm$,$C=1\\mu F$). The 2nd differential input is connected on a voltage divisor to obtain 1V from the 3.3V reference (480 \u0026amp; 1kOhms). $10\\mu F$ decoupling capacitor are used on power supply. The I2C bus wires are pulled up with 10kOhm and are connected to a 10pf capacitor protecting from glitches.\nThe MCP3428 Sigma-Delta ADC is configured for\n12 bits x8 Gain 240 Samples Per Seconds (SPS) The resulting resolution is provided from:\n(1) MP3V5004dp Analog output sensitivity is 1633 Pa/V (2) MCP3428 12 bits with a gain of 8 : 0.125mV/LSB1 With (1) and (2), we obtain a resolution of $1633 * …","date":1559001600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1614196709,"objectID":"ee6f9909f961cf96b2a6b108320fe801","permalink":"https://lubin.kerhuel.eu/post/pitot-build/","publishdate":"2019-05-28T00:00:00Z","relpermalink":"/post/pitot-build/","section":"post","summary":"Build and test of a miniature Pitot static (Prandtl) tube. Parts and electronic design are described. In flight airspeed performance is compared to a GPS ground speed used as reference. Wind speed is estimated to remove bias between airspeed and ground speed.","tags":["Pitot","sensor","air-speed","wind","experiment","DIY"],"title":"Miniature airspeed sensor for RC plane and UAVs.","type":"post"},{"authors":null,"categories":null,"content":"\rA 16-bits autopilot designed with Simulink and rapid control prototyping tools Motivation Building a platform for testing various autopilot control loop has become simple thanks to the many low cost elements available. To cite few of them:\n10 DoF IMU: (~$5\\ $$), GPS board: (~$10\\ $$), Pitot tube (custom): (~$20\\ $$), Microcontroller board: depend on the board; rely on $\\approx 5\\ $$ mcu, Plane platform: from $60$ to $120\\ $$ including servos and motors. You also need few RC hardware: receiver remote control battery pack few optional hardware for data logging, telemetry, camera… Difference with existing autopilot Many off the shelf autopilot exists and works great. To mention few of them:\nArdupilot PX4 iNav LibrePilot Paparazzi. Others are listed on the DroneTrest review). Usually, their internal parameters can be tuned. But, inserting your customized control-loop in such autopilot requires understanding the code structure underneath. Even well documented, it represents hundreds of C functions to navigate into, before starting any changes. Your custom control loop might not fit within the existing structure. You might want to implement a more advanced controller than existing PIDs, use a different sample rate etc…\nStarting a new project is sometime faster than re-use a pre-existing advanced one. The presented autopilot uses a Model Based Design (MBD) approach: The autopilot code is generated from a unique Simulink model. Everything is within the diagram, from low level sensors handling up to the controller design. This MBD aproach is also named Rapid Control Prototyping (RCP).\nThe autopilot control-loop uses standard math blocks. Low level systems is taken care with the Microchip blockset driving the microcontroller peripherals. The UxV blockset provide easily access to GPS, Remote Control S.BUS, F.Port and Smart Port protocol, MAVLink messaging including Way Point and Parameters protocols. Such Simulink model allows to “get-in” the project graphically. It allows simulating parts of the system based on a simulated plane or based on values previously logged from a real flight which is helpful to design feed-forward sensor fusions algorithms.\nAnother key difference is the use of a 16-bit microcontroller while other autopilot uses 32-bit microcontroller. 16-bits dsPIC prove to provide all required resources thanks to the efficient architecture underneath which handle the many peripheral used in an efficient way (UART, I2C, Output Capture, Input Compare…).\nNote however a similar model based design using dsPIC microcontroller beeing developed at UCSC by Pr G.H.Elkaim in a project named SLUG. Their design is independent from the one presented here. The original project handled by M.I Lizarraga [SLUG] (https://slugsuav.soe.ucsc.edu/) is available online. The update SLUG II projects rely on the same tool used here to target the dsPIC: the blockset for Microchip microcontrollers (free).\nHardware list Various combination of material was tested. Below is a selected list of hardware which prove to be efficient.\nautopilot platform\rVolantex Firstar 1600 with Qx7 remote control.\nRC platform: Volantex Firstar 1600 with stock motors and servos (Alternative platform are Bixler 2 and Ranger 1600) Remote Control: FrSky QX7 Receiver: FrSky XSR-M / XSR used with either the S.Bus (receiver channel output) and Smart Port (Telemetry) protocol or with the F.Port protocol which combine both both S.bus with Smart Port saving one UART peripheral of the microcontroller. Each protocol uses only one wire thus half duplex UART. dsPIC UART peripheral enable configuring Tx and Rx on one line. Microcontroller: dsPIC 33EP on a AUAV V3 board. External motion sensor is used instead of built-in AUAV3 sensors. Tiny sensor board with recent chip are easier to firmly attach near the CG reducing vibrations. A custom board based on a dsPIC might replace the AUAV3 board which is difficult to find now. The UDB5 mini is similar and can still be found. IMU sensor: Gy-91 (10 DoF with 3 accelerometers, 3 rate gyro, 3 magnetometers and one barometer). Firmly attached near the CG of the plane. I2C bus is used between sensors and MCU. Pitot tube: An inner tube and an outer tube on which four holes are done laterally. Signal conditioning: the pitot tube pressure sensor (MP3V 5004 DP) is done with a MCHP ADC converter which integrate an analog amplifier. Converted pressure is sent to the microcontroller through the I2C bus. See build and test page. GPS: based on a $\\mu$blox M8N chip providing up to 10Hz refresh rate and provided good results compared to competitors chips. Data logger: OpenLager board to log on SD card. It allows logging continuous UART output flow with at a baud up to 2 470 000 (much higher than a 115 200 baud rate that OpenLog data logger cannot sustain.). Radio link: 3DR Sik based Radio module for MAVLink telemetry (plane attitude, position, Way Point and Parameters tuning) with qgroundcontrol base station running on most platforms (PC, …","date":1558224e3,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1573724420,"objectID":"04e0d53a7e70716ebb790ffe0137ed2b","permalink":"https://lubin.kerhuel.eu/project/autopilot-plane/","publishdate":"2019-05-19T00:00:00Z","relpermalink":"/project/autopilot-plane/","section":"project","summary":"16-bits fixed-wing autopilot Model Based Design","tags":["simulink","matlab","rapid prototyping","model based design (MBD)","dsPIC","sliding-mode","autopilot","UAV","MAVLink","UxV blockset","AUAV V3 board"],"title":"Fixed-wing autopilot based on Simulink model","type":"project"},{"authors":["Lubin Kerhuel"],"categories":["electronics"],"content":"\rThe board PDB-XPW from MATEK System is a voltage regulator with an current measurement adapted for quad copters current with a max current measurement of 140 Amps. For an RC plane project, the current measurement might be reduced to increase current measurement resolution.\nThe chip “INA1x9 High-Side Measurement Current Shunt Monitor” from Texas Instrument condition and amplify the shunt resistor voltage drop providing an analog output proportional to the current.\nOn the PDB-XPW board, the INA1x9 chip is the black 5 pins component tagged E39 below the 0.05 Ohms shunt resistor, itself just below to the Power supply input connector.\nThe amplification gain is set with the 47 kOhm resistor next to the INA1x9 component. This original value of 47 kOhm correspond to a gain of 47. The gain is the value in kOhm as stated by the chip documentation:\nResistor Gain 1 kOhm 1 5 Kohm 5 10 Kohm 10 50 Kohm 50 100 Kohm 100 The 47 kOhm resistor is replaced with a 270 kOhm resistor providing a gain of 270 instead of 47. The original current measurement range is reduced from 140 (A) to 20 (A) (140 * 47/270 = 20).\nThe current measurement output is an analog signal swinging from 0 to 3.3V coding linearly for current in [0 - 20] Amps range. This lower current range fit with the RC plane platform like Bixler 2, Firstar 1600 or Ranger 1600.\n","date":1558137600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1560378917,"objectID":"da6a22aa858c7a5f96d5e913362c1b8b","permalink":"https://lubin.kerhuel.eu/post/matek-pdb-xpw/","publishdate":"2019-05-18T00:00:00Z","relpermalink":"/post/matek-pdb-xpw/","section":"post","summary":"Adapt the MATEKSYS PDB-XPW power module for quad rotor to fit electric RC plane with lower current requirements. Change current measurement range by replacing one single resistor from the Op-Amp current measurement circuit.","tags":["electronics","power","PDB-XPW"],"title":"MATEKSYS PDB-XPW Dual BEC \u0026 Current Module tweak to increase current measurement sensitivity","type":"post"},{"authors":["Lubin Kerhuel"],"categories":["sensor"],"content":"\rCable exist to connect a RunCam2 action cam to an RC receiver for remotely start and stop a record from the receiver PWM output (20ms period, 1ms to 2ms duty cycle). The cable has logic to decode the RC PWM signal and generate the signal pulse scheme to start and stop the RunCam2 record.\nControlling the camera can be done with a microcontroller by generating the required pulse scheme described below.\nThe micro USB cable pinout is\nPin 1 (VCC): +5V (higher voltage possible for the RunCam2 connector) Pin 3 (D+): TTL signal (5V) Pin 5 (GND): GND When the Camera USB port is set for “Remote Control” and not for “mass storage” with the configuration application, it is possible to switch back and forth the camera from video mode to photo mode, and to start/stop recording, or take a picture.\nThe pulse scheme is the following:\nOne pulse switch the camera from video recording mode to Photo mode. Two pulses separated with 85ms start or stop a video record (or take a picture in photo mode). Pulse level is 5V but it works with 3.3V. Line is low state when idle. Pulses are 85ms in high state duration separated by 85ms on multiple pulse.\nTested with a runCam2 powered from a 3S LiPo battery (10 to 14V), no battery in the camera and pulse generated with a 3.3V dsPIC pin configured as digital output.\nThe figure below is the Simulink diagram with the logic used to generate the appropriate pulse on a dsPIC. Code is generated through the Simulink Coder and the MPLAB block from Microchip.\nSimulink logic to control a runCam2 action Cam. The subsystem time step resolution is 1ms. The integrator is reset on each state change of the subsystem input, which trig the generation of two 85ms pulse pattern. Integrator reset is locked while pulses are being generated. Logic at the output of the integrator generate the pulses. The generated code was tested on a dsPIC target\n","date":1558137600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1608299444,"objectID":"846bcf7bfde3b6d647364cf1e29ac2d5","permalink":"https://lubin.kerhuel.eu/post/runcam-remote-control-cable/","publishdate":"2019-05-18T00:00:00Z","relpermalink":"/post/runcam-remote-control-cable/","section":"post","summary":"Signal to remotely start / stop / take a picture on a runCam2 and compatible action cam through the USB connector.","tags":["camera"],"title":"Start/Stop signal for RunCam2 action cam","type":"post"},{"authors":null,"categories":null,"content":"Simulink Rapid Prototyping based inverted pendulum running on a microstick II dsPIC board. The embedded IMU data fusion algorithm use the ICM-20608 inertial sensor to estimate the angle. LQR control loop drives two DC motors of the modified toy. No encoder sensor are present.\n","date":1543622400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1575217562,"objectID":"129288b19260e15ffe68b30053e899ae","permalink":"https://lubin.kerhuel.eu/project/inverted-pendulum/","publishdate":"2018-12-01T00:00:00Z","relpermalink":"/project/inverted-pendulum/","section":"project","summary":"Inverted pendulum running on a microstick II dsPIC board. An IMU algorithm estimate the angle based on a MEMS inertial sensor. LQR feedback controls the DC motors of the trolley. No encoder are used.","tags":null,"title":"Inverted Pendulum","type":"project"},{"authors":["Lubin Kerhuel","Romain Delpoux"],"categories":null,"content":"Control a 24V motor (Pravalux 24v DC) using the MCLV-V2 board with a dsPIC 33EP256MC506. This hands-on is for 5th year students at INSA-Lyon.\nThe hands-on Lab subject available at: https://rtdc.ctrl-elec.fr/.\nSlides presents the adaptation required to go from a Simulink model for Simulation (or DSPACE) to a Simulink model targeting a microcontrollers. Two topics are presented:\nReal-time scheduler / CPU load analysis Fixed-point datatypes 2021: Dspace project not feasible in labs due to Covid-19. It was replaced with home lab on MCLV-2 boards (sent to students) replacing Dspace. lab subject is availalbe at: http://rcp.ctrl-elec.fr/\n","date":1543622400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1619773903,"objectID":"ca467799ccaf7d76ad29a70379a0e6c5","permalink":"https://lubin.kerhuel.eu/project/lab-dc-motor/","publishdate":"2018-12-01T00:00:00Z","relpermalink":"/project/lab-dc-motor/","section":"project","summary":"Simulation \u0026 real-time control of a motor with MCLV 2 board","tags":["simulink","matlab","motor","control","rapid prototyping"],"title":"Lab INSA - Real Time Control for a DC / PMSM Motors","type":"project"},{"authors":null,"categories":null,"content":"\rTop of the inverted pendulum\nPresentation Stabilization of an inverted pendulum is a common engineering challenge. Objective is to build a low-cost DIY1 platform to test various feedback control loop.\nThis document describes the hardware and the theoretical model of the pendulum. Simulation are presented with Simulink models and an LQR2 feedback control loop finally stabilizes the platform.\nVideo of the stabilized platform with a 4 state LQR feedback loop. The platform is completely autonomous (no user input).\nThe electronic placed at the top of the pendulum composed of a dsPIC 16 bits microcontroller and an inertial sensor (accelerometers and rate gyro). The base of the pendulum is a modified RC toys comprising two wheels driven by two independent DC motor (see pictures below).\nHardware Overview The head and the base trolley are described successively. They are separated with an $8mm$ carbon tube. The pendulum length is $0.52m$ from wheel axis to the top. Wheels diameters is $8cm$. Pendulum total weight is $200g$ comprising $111g$ for the 4 AA batteries.\nInverted Pendulum platform\nHead electronics Microcontroller The controller is a Microstick II board equipped with a dsPIC 33EP128MC202 running at $70\\ MIPS$. It is powered through the USB connector which only provide the power supply from 4 AA batteries hold in the base.\nMicrocontroller and sensor on top of the inverted pendulum\rA prototyping board support a Microstick II board with the dsPIC 33EP128MC202. A board from Drotek endowing the Invensense ICM-20608 inertial sensor is screwed on the base board.\nIMU sensor The unique sensor used is the 6 DoF3 Invensense ICM-20608 mounted on a Drotek sensor board. It endows:\na 3 axis Accelerometers and a 3 axis rate gyros. The I2C blocks set the BUS clock at $400kHz$ and fetch the 6 sensors values every $1ms$ $(1kHz)$. The Simulink I2C blocks setting enable hot plug of the I2C sensor: The microcontroller initializes the sensor each time it is newly detected on the I2C bus.\nThe accelerometer is configured with a range of $\\pm 8g$ low pass filtered at $99Hz$. The rage gyro is configured with a range of $\\pm 500 \\deg/s$ low pass filtered at $250Hz$. A Simulink IMU4 sub-system run a data fusion algorithm to reconstruct a drift-free quaternion angular position at $1kHz$ (the yaw angle drift when magnetometer is not present). The stabilization control loop uses the drift-free pitch angle.\nIt is possible to use other sensors like the MPU9250 or MPU6050 with either an I2C or SPI interface. The GY-91 board is a 10 DoF3 widespread board based on the 9 DoF MPU9250 (3 accelerometers, 3 magnetometers, 3 rate gyros) and has a pressure sensor.\nUART interface The PCB board provides a $3.3V$ regulator and 4 pin extra interface ( GND, +3.3v, Tx, Rx ) to connect either an UART data-logger or radio link for telemetry module or an RC receiver capable of S.BUS, Smart Port or P.Port protocol (all UART based).\nBase trolley Motors The base trolley is a low cost a 2-wheel remote control toy named flywheels. The toy is from 2012 but 2 wheeled equivalents exist. Its electronics is removed. Two pairs of wires power two DC motors in either direction through an L298N H bridge board module.\nFlyWheels toy package\rFlyWheels toy package\nTwo DC motors\rTwo DC motors\nPower electronics The L298N H bridge controls two DC motors. For each motor:\nTwo logic signals set the 4 states: direction CW or CCW, brake, or freewheel. The third logic signal power the motor depending on to the state defined. The third signal is modulated with a 100Hz square periodic signal whose duty cycle vary from 0% to 100% (PWM). It sets the torque for the motor.\nThe flat multicolor ribbon connects 6 logic control signals (3 for each motor) from the Microstick II dsPIC output to the of the L298N H bridge.\nBase trolley of the inverted pendulum\rA L298N H bridge (for Arduino) power board drives the two DC motors of a modified FlyWheels toy. Four AA batteries powers the pendulum.\nBatteries Four $1.2V$ AA Ni-Mh batteries are dispatched on both side of the trolley. $\\approx 4.8V$ powers the motors and the electronics. The black and red wire from the trolley to the top of the pendulum powers the Microstick II electronic and sensors.\nPendulum Model The pendulum model is composed of two intertwined sub-system:\nThe pendulum*, with 1 rotation DoF3 $\\theta$ angle around the wheel’s axis The trolley*, with 1 translation DoF3 $x$ position. Pendulum free body diagram\r$\\vec{P}$ is the weight at the center of gravity. $\\vec{R}$ is the reaction force from the stiff rod and the floor. $\\vec{F}$ is a friction force when the pendulum is rotating. $\\{ \\vec{i},\\vec{j} \\}$ is the earth frame and $\\{ \\vec{r},\\vec{n} \\}$ is the rotating pendulum frame. The inertial sensors are placed on top of the pendulum and measure all accelerations.\nPendul Equations The Dynamic fundamental law applied on the pendulum: $$ \\sum \\vec{Force} = m.\\vec{a} $$\nThe three forces presents are the weight $\\vec{P}$, the Friction …","date":1536451200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1607376007,"objectID":"b0ae7d29be8baee87b074905e65b1536","permalink":"https://lubin.kerhuel.eu/docs/inverted-pendulum/","publishdate":"2018-09-09T00:00:00Z","relpermalink":"/docs/inverted-pendulum/","section":"docs","summary":"LQR stabilization of an inverted pendulum platform based on a low-cost toy. Simulink model and generation of code for dsPIC Microchip microcontroller are provided (Rapid Control Prototyping: RCP)","tags":["inverted pendulum","state space","LQR","rapid prototyping","model based design (MBD)","matlab","simulink","DIY","dsPIC","L298N","ICM-20608","Microstick II","33EP128MC202"],"title":"Inverted Pendulum","type":"docs"},{"authors":null,"categories":null,"content":"\r","date":130896e4,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1614196709,"objectID":"9c72f31aea2d56d43e42390c6bcb6f82","permalink":"https://lubin.kerhuel.eu/project/www-kerhuel-eu-wiki/","publishdate":"2011-06-25T00:00:00Z","relpermalink":"/project/www-kerhuel-eu-wiki/","section":"project","summary":"rapid control prototyping experiments (2006-2011) with dsPIC. Former blockset, website and forum.","tags":null,"title":"Old website","type":"project"},{"authors":null,"categories":null,"content":"Pitot tube Miniature airspeed sensor for RC plane \u0026amp; UAV full description\nBrass tube mp3v5004dp \u0026amp; mcp3428 Resolution: 0.2041 Pa/LSB Range: [0 836] Pa ($\\approx 100km/h $) Static sensor noise 90 min log @ 100Hz, indoor, still Standard Dev : 0.5 Pa Flight tests Pressure - Speed $P_{diff} = \\frac{1}{2}\\rho v^2$\n$v = \\sqrt{\\frac{2}{\\rho} * P_{diff}}$\nwith $\\rho = 1.16 $\nresults $\\underbrace{v_{pitot}-v_{wind}^{p}-v_{gps}}_{error}$ m/s km/h mean 0.017 0.06 standard deviation 0.74 2.6 with wind:\n2.6 m/s from 101° (east) page with further details\nflight trace connecting (fish line protection) ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1613816478,"objectID":"b17b97d62bfb9b070cdf54182a9f2c18","permalink":"https://lubin.kerhuel.eu/slides/pitot-build/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/slides/pitot-build/","section":"slides","summary":"Pitot tube Miniature airspeed sensor for RC plane \u0026 UAV full description\nBrass tube mp3v5004dp \u0026 mcp3428 Resolution: 0.2041 Pa/LSB Range: [0 836] Pa ($\\approx 100km/h $) Static sensor noise 90 min log @ 100Hz, indoor, still Standard Dev : 0.","tags":null,"title":"miniature airspeed sensor","type":"slides"},{"authors":null,"categories":null,"content":"Parameters Identification for motor PMSM dsPIC embedded parts comes from joint work with Dr. R.Delpoux from INSA Lyon (Fr)\n2 steps Stand-still Identification (coarse) {R, L} Starts Sliding Mode Observer with current control loop Runtime Identification (refined in situe) {R, L and Ke} Stand-still Identification R during rotor “alignement” (800ms)\nL during current relaxation phase (300ms)\nAssuming: $Ts \u0026lt;\u0026lt; \\tau$\nwith $Ts$ Sample time and $\\tau = \\frac{L}{R}$\nrelaxation phase $A \\exp(-\\frac{nT_s}{\\tau})$\nwith\n$ \\exp(-\\frac{nT_s}{\\tau}) = 1 -\\frac{nT_s}{\\tau} + \\frac{(\\frac{nT_s}{\\tau})^2}{2!} + \\ldots$\ninitialisation sequence up: $V_{dq}$ down: $I_{dq}$\nrelaxation phase $ \\frac{x_{n+1} - x_n}{x_n} = \\exp(-\\frac{Ts}{\\tau})- 1$\n$ \\frac{x_{n+1} - x_n}{x_n} \\approx -\\frac{Ts}{\\tau} + \\frac{(\\frac{Ts}{\\tau})^2}{2!} - \\frac{(\\frac{Ts}{\\tau})^3}{3!} + \\ldots$\n$ \\frac{x_{n+1} - x_n}{x_n} \\approx -\\frac{Ts}{\\tau} + O(\\frac{Ts}{\\tau}^2)$\nrelaxation phase $ \\frac{x_{n+1} - x_n}{x_{n+1} + x_n} = -\\tanh(\\frac{Ts}{2\\tau}) $\n$ \\frac{x_{n+1} - x_n}{x_{n+1} + x_n} \\approx -\\frac{Ts}{2\\tau} + \\frac{Ts^3}{24\\tau^3} + \\ldots$\nIncreased precision (Mitigate denominator noise) Increased accuracy ($O(\\frac{Ts}{\\tau}^3$) relaxation phase Averaging on one or more relaxation phase (for 300ms)\n$ \\frac{1}{N}\\sum_n \\frac{x_{n+1} - x_n}{x_{n+1} + x_n} \\approx -\\frac{Ts}{2\\tau} + O(\\frac{Ts}{\\tau}^3)$)\ninitialisation sequence up: $V_{dq}$ down: $I_{dq}$\nStatic ident results Long Hurst motor R = 0.671 Ohm\tL = 0.229 mH R = 0.678 Ohm\tL = 0.271 mH R = 0.663 Ohm\tL = 0.198 mH R = 0.678 Ohm\tL = 0.271 mH R = 0.670 Ohm\tL = 0.227 mH R = 0.671 Ohm\tL = 0.237 mH R = 0.647 Ohm\tL = 0.185 mH Static ident results Short Hurst motor R = 2.561 Ohm\tL = 1.741 mH R = 2.582 Ohm\tL = 1.610 mH R = 2.699 Ohm\tL = 1.871 mH R = 2.588 Ohm\tL = 2.022 mH R = 2.776 Ohm\tL = 2.180 mH R = 2.672 Ohm\tL = 1.606 mH R = 2.709 Ohm\tL = 1.629 mH Next Step Parameters {R,L} are good enough to start:\ncurrent control loop Sliding Mode Observer -\u0026gt; refine parameteres during runtime\nrunning identification Motor electric equations when set\n$\\begin{bmatrix} v_d\\\\ v_q \\end{bmatrix} = \\begin{bmatrix} i_d \u0026amp; -\\omega i_q \u0026amp; 0 \\\\ i_q \u0026amp; \\omega i_d \u0026amp; \\omega \\end{bmatrix} \\begin{bmatrix} R \\\\ L \\\\ Ke \\end{bmatrix} $\nfollowing part from joint work with Dr. R.Delpoux from INSA Lyon (Fr, Lab ampere)\nrunning identification $\\underbrace{\\begin{bmatrix} v_d\\\\ v_q \\end{bmatrix}}_y = \\underbrace{\\begin{bmatrix} i_d \u0026amp; -\\omega i_q \u0026amp; 0 \\\\ i_q \u0026amp; \\omega i_d \u0026amp; \\omega \\end{bmatrix}}_A \\underbrace{\\begin{bmatrix} R \\\\ L \\\\ Ke \\end{bmatrix}}_x $\nMinimum Mean Square Error (MMSE): $\\min_x\\left(y-Ax\\right)^2$\nbest fit for the model might not be the best real parameters values\nrunning identification $\\underbrace{\\begin{bmatrix} v_d\\\\ v_q \\end{bmatrix}}_y = \\underbrace{\\begin{bmatrix} i_d \u0026amp; -\\omega i_q \u0026amp; 0 \\\\ i_q \u0026amp; \\omega i_d \u0026amp; \\omega \\end{bmatrix}}_A \\underbrace{\\begin{bmatrix} R \\\\ L \\\\ Ke \\end{bmatrix}}_x $\n$\\min_x\\left(y-Ax\\right)^2$\n$\\frac{d}{dx}\\left( y^ty - 2y^tAx + x^tA^tAx \\right) = 0$\n$ (A^tA)x_{best} = y^tA$\n$x_{best} = -(A^tA)^{-1}*y^tA$\nimplementation $\\underbrace{A^tA}_{\\text{3x3 matrix}} = \\sum_n \\begin{bmatrix} i_d^n \u0026amp; i_q^n \\\\ -\\omega^n i_q^n \u0026amp; \\omega i_d^n \\\\ 0 \u0026amp; \\omega^n \\end{bmatrix} \\begin{bmatrix} i_d^n \u0026amp; -\\omega^n i_q^n \u0026amp; 0 \\\\ i_q^n \u0026amp; \\omega i_d^n \u0026amp; \\omega^n \\end{bmatrix} $\n$\\underbrace{y^tA}_{\\text{3x1 vector}} = \\sum_n \\begin{bmatrix} v_d^n \u0026amp; v_q^n \\end{bmatrix} \\begin{bmatrix} i_d^n \u0026amp; -\\omega^n i_q^n \u0026amp; 0 \\\\ i_q^n \u0026amp; \\omega i_d^n \u0026amp; \\omega^n \\end{bmatrix} $\nSolve $Ax=b$ linear system with Cholesky factorization\nSimulink block Cholesky Solve $Ax=b$ linear system with Cholesky factorization\nremarks requires \u0026gt; 3 states (speed, load, $I_d injection$…) use data history from the beginning better results with higher current (i.e. load) $(y-Ax)$ error indicate parameters mismatch/changes\nruntime ident results short hurst R = 2.655 Ohm\tL = 2.554 mH\tPhif = 4.320 V/Krpm R = 2.699 Ohm\tL = 2.604 mH\tPhif = 4.290 V/Krpm R = 2.696 Ohm\tL = 2.630 mH\tPhif = 4.293 V/Krpm R = 2.772 Ohm\tL = 2.592 mH\tPhif = 4.277 V/Krpm R = 2.750 Ohm\tL = 2.609 mH\tPhif = 4.281 V/Krpm R = 2.666 Ohm\tL = 3.885 mH\tPhif = 4.278 V/Krpm R = 2.789 Ohm\tL = 2.583 mH\tPhif = 4.252 V/Krpm runtime ident results long hurst R = 0.571 Ohm\tL = 0.305 mH\tPhif = 4.199 V/Krpm R = 0.648 Ohm\tL = 0.338 mH\tPhif = 4.192 V/Krpm R = 0.604 Ohm\tL = 0.248 mH\tPhif = 4.199 V/Krpm R = 0.640 Ohm\tL = 0.271 mH\tPhif = 4.197 V/Krpm after reset (remove standstill data history) R = 0.487 Ohm\tL = 0.242 mH\tPhif = 4.245 V/Krpm R = 0.472 Ohm\tL = 0.257 mH\tPhif = 4.250 V/Krpm R = 0.480 Ohm\tL = 0.280 mH\tPhif = 4.246 V/Krpm R = 0.481 Ohm\tL = 0.280 mH\tPhif = 4.245 V/Krpm go further Other method tested without angle requirement\nrequires ${v_\\alpha, v_\\beta, i_\\alpha, i_\\beta}$\nWorks in open-loop during startup.\nRequire solving system with constraints.\net voilà !\nAppendix Tasking \u0026gt;\r","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"9f7d6013edd19e9272acaf2e159ac1b3","permalink":"https://lubin.kerhuel.eu/slides/motor-param-identification/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/slides/motor-param-identification/","section":"slides","summary":"Parameters Identification for motor PMSM dsPIC embedded parts comes from joint work with Dr. R.Delpoux from INSA Lyon (Fr)\n2 steps Stand-still Identification (coarse) {R, L} Starts Sliding Mode Observer with current control loop Runtime Identification (refined in situe) {R, L and Ke} Stand-still Identification R during rotor “alignement” (800ms)","tags":null,"title":"Motor Parameters Identification","type":"slides"},{"authors":null,"categories":null,"content":"Prototypage Rapide Model Based Design [Lab] - L.Kerhuel - R.Delpoux\nPlan: Model Based Design\nModel De la simulation au programme embarqué\nDifférences temporelles type de données et optimisation Model Based Design (MDB) Model Based Design (MDB) Model Based Design (MDB) Commande en Vitesse Model Based Design (MDB) Identification Model Based Design (MDB) rasoir d’Ockham Prediction Simu vs reel Model Based Design Identification Simulation / synthèse commande Test TP: Validation du modèle de moteur DC fournit log de command \u0026amp; réponse Simulation comparaison commande avec modèle moteur vs système réel TP: Validation du modèle de moteur DC fournit De la simulation au programme embarqué Pendule inverse Couleurs : Period echantillonnage Datatype Aspect Temporel: Simulation Modélisation en temps continue:\ntransformé de Laplace en p (s)\nSolver résoud les équations différentielles approximation numérique Pas de contraintes temps réelle différent solveurs (Runge-Kutta, ODEx,…) Couleurs : Period echantillonnage DSPACE discretise le modèle Aspect Temporel: Implémentation Implémentation en temps discret:\n“pas” de calcul fixe\npas de solveur Contrainte temps réel model Single-Rate \u0026amp; Multi-Rate implementation Single-Tasking \u0026amp; Multi-Tasking Single Rate / Multi rate Single Tasking / Multi Tasking Discrete times Single-rate:\nLes blocks ont tous la même période d’exécution (Même couleur) Multi-Rate\nLes blocks peuvent avoir des périodes d’exécution différentes (Schéma multicolore) Modèle multi-rate Charge CPU d’un modèle multi-rate single-tasking (@70 mips) Charge CPU d’un modèle multi-rate single-tasking (@20 mips) OVERLOAD Single-Tasking Single-Tasking: Dans le slot de temps, l’exécution de tous les blocks doit se terminer avant la fin du slot.\nMulti-Tasking Multi-Tasking: Préemption possible -\u0026gt; Monotonic Rate Scheduler\nLa tâche la plus fréquente à la priorité maximale Préemptera une tache plus lente Beaucoup plus flexible Mode par défaut (voir options du solveur) Charge CPU d’un modèle multi-rate multi-tasking (@70 mips) Charge CPU d’un modèle multi-rate multi-tasking (@20 mips) Tasking Conclusion Single-Tasking @ 20 MIPS -\u0026gt; Overload\ndispatcher la tache la plus lente sur plusieurs slots (option d’offset dans Time Step -\u0026gt; [.001 .005]) Multi-Tasking @ 20 MIPS -\u0026gt; Ok\nRate transfert block options Data Integrity Deterministic data transfert 20 MIPS ok avec multi-tasking Single tasking: deterministe Optimisation type de données Virgule Fixe Virgule Flottante Virgule fixe int8 $\\underbrace{1}_{sign\\ (1)} \\ \\underbrace{1111111}_{mantisse\\ (7)} * \\underbrace{slope}_{\\text{LSB value}}$\n$v = (mantisse-sign*128) * slope $\nplage: $\\pm 2^{7} * slope$\n2 digit [0-9] significatifs\nslope est fixe Virgule flotante Single (32 bits) $\\underbrace{1}_{sign\\ (1)} \\ \\underbrace{11111111}_{exponent\\ (8)} \\ \\color{yellow}{1}\\underbrace{11111111111111111111111}_{mantisse\\ (23)} $\n$v \\approx (1-2 sign) * mantisse * 2^{exponent-127}$\nplage: $\\pm 2^{128} = \\pm 3.4*10^{38}$\n7 digit [0-9] significatifs\nIEEE 754 Single Double Format width 32 64 Sign bit 1 1 exponent width 8 11 Precision width 23+1 52+1 1st phantom bitof the significand is always 1.\nVirgule flotante Custom (8 bits) $\\underbrace{1}_{sign\\ (1)} \\ \\underbrace{1111}_{exponent\\ (4)} \\ \\color{yellow}{1}\\underbrace{111}_{mantisse\\ (3)} $\n$v \\approx (1-2 sign) * mantisse * 2^{exponent-127}$\nplage: $\\pm 2^{128} = 3.4*10^{38}$\n0.9 digit [0-9] significatifs\nCustom 8 bit Floating point Parameter Single Double Custom Format width 32 64 8 Sign bit 1 1 1 exponent width 8 11 4 Precision width 23+1 52+1 3+1 Integrateur (avec petit TS) GPS Script Matlab pour tester un flottant 8 bits % 4 bit exponent (signed) emin = -7; emax = 6; % 3 bits significand p = 3; exps = 2.^[emin:emax]; vals = (2^p) + [0:(2^p-1)]; % significand with leading 1 TotalVal = vals\u0026#39;*exps; % add denormalized values 8bitFloat = unique([TotalVal ; 2^emin * [0:(2^m-1)]\u0026#39;]); 8bitFloat = unique(flipud(-TotalVal) ;TotalVal]); % with neg vals Simulink Data-type Data-type notation int8…uint23 fixdt(1,16) signed (1) 16 bit width Scaling is derived from defined min \u0026amp; max fixdt(1,16,15) Scaling is En15 (Exp neg $\\rightarrow 2^{-15}$) fixdt(1,16,-15) Scaling is E15 (Exp $\\rightarrow 2^{15}$) Datatype notation fixdt(1,16,.01,0) Scaling is sfix16Sp01 Slope point 01 SI: Stored Integer RWV: Real World Value TP https://rtdc.ctrl-elec.fr/\ndownload base model Elements de correction Liens: MPLAB device blocks for Simulink: https://www.mathworks.com/matlabcentral/fileexchange/71892-mplab-device-blocks-for-simulink\nMPLAB X: https://www.microchip.com/MPLABX\nXC16: https://www.microchip.com/XC16\nhttps://lubin.kerhuel.eu\nhttp://www.ctrl-elec.fr\nSlide control: Next: Right Arrow or Space Previous: Left Arrow Start: Home Finish: End Overview: Esc Speaker notes: S Fullscreen: F Zoom: Alt + Click ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1619773903,"objectID":"813e22095d4c80ec8db0c156d303b80c","permalink":"https://lubin.kerhuel.eu/slides/slides_dcmotor_insa/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/slides/slides_dcmotor_insa/","section":"slides","summary":"Prototypage Rapide Model Based Design [Lab] - L.Kerhuel - R.Delpoux\nPlan: Model Based Design\nModel De la simulation au programme embarqué\nDifférences temporelles type de données et optimisation Model Based Design (MDB) Model Based Design (MDB) Model Based Design (MDB) Commande en Vitesse Model Based Design (MDB) Identification Model Based Design (MDB) rasoir d’Ockham Prediction Simu vs reel Model Based Design Identification Simulation / synthèse commande Test TP: Validation du modèle de moteur DC fournit log de command \u0026 réponse Simulation comparaison commande avec modèle moteur vs système réel TP: Validation du modèle de moteur DC fournit De la simulation au programme embarqué Pendule inverse Couleurs : Period echantillonnage Datatype Aspect Temporel: Simulation Modélisation en temps continue:","tags":null,"title":"Prototypage Rapide avec Simulink sur dsPIC","type":"slides"},{"authors":null,"categories":null,"content":"Test slides Vertical slide 1 Vertical slide 3 Vertical slide 2 My Title ! mes notes\nControls Next: Right Arrow or Space Previous: Left Arrow Start: Home Finish: End Overview: Esc Speaker notes: S Fullscreen: F Zoom: Alt + Click PDF Export: E Code Highlighting Inline code: variable\nCode block:\nporridge = \u0026#34;blueberry\u0026#34; if porridge == \u0026#34;blueberry\u0026#34;: print(\u0026#34;Eating...\u0026#34;) Math In-line math: $x + y = z$\nBlock math:\n$$ f\\left( x \\right) = ;\\frac{{2\\left( {x + 4} \\right)\\left( {x - 4} \\right)}}{{\\left( {x + 4} \\right)\\left( {x + 1} \\right)}} $$\nFragments Make content appear incrementally\n{{% fragment %}} One {{% /fragment %}} {{% fragment %}} **Two** {{% /fragment %}} {{% fragment %}} Three {{% /fragment %}} Press Space to play!\nOne Two Three A fragment can accept two optional parameters:\nclass: use a custom style (requires definition in custom CSS) weight: sets the order in which a fragment appears Speaker Notes Add speaker notes to your presentation\n{{% speaker_note %}} - Only the speaker can read these notes - Press `S` key to view {{% /speaker_note %}} Press the S key to view the speaker notes!\nOnly the speaker can read these notes Press S key to view Themes black: Black background, white text, blue links (default) white: White background, black text, blue links league: Gray background, white text, blue links beige: Beige background, dark text, brown links sky: Blue background, thin dark text, blue links night: Black background, thick white text, orange links serif: Cappuccino background, gray text, brown links simple: White background, black text, blue links solarized: Cream-colored background, dark green text, blue links Custom Slide Customize the slide style and background\n{{\u0026lt; slide background-image=\u0026#34;/img/boards.jpg\u0026#34; \u0026gt;}} {{\u0026lt; slide background-color=\u0026#34;#0000FF\u0026#34; \u0026gt;}} {{\u0026lt; slide class=\u0026#34;my-style\u0026#34; \u0026gt;}} Custom CSS Example Let’s make headers navy colored.\nCreate assets/css/reveal_custom.css with:\n.reveal section h1, .reveal section h2, .reveal section h3 { color: navy; } Questions? Ask\nDocumentation\n","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1613729864,"objectID":"83f508f052e23f7ee5731151e8db499c","permalink":"https://lubin.kerhuel.eu/slides/testslides/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/slides/testslides/","section":"slides","summary":"Test slides Vertical slide 1 Vertical slide 3 Vertical slide 2 My Title ! mes notes\nControls Next: Right Arrow or Space Previous: Left Arrow Start: Home Finish: End Overview: Esc Speaker notes: S Fullscreen: F Zoom: Alt + Click PDF Export: E Code Highlighting Inline code: variable","tags":null,"title":"test slides","type":"slides"}]
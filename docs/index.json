[{"authors":null,"categories":null,"content":"This feature can be used for publishing content such as:\n1\u0026frasl;5\n Project or software documentation Online courses Tutorials  The parent folder may be renamed, for example, to docs for project documentation or course for creating an online course.\nTo disable this feature, either delete the parent folder, or set draft = true in the front matter of all its pages.\nAfter renaming or deleting the parent folder, you may wish to update any [[menu.main]] menu links to it in the config.toml.\n","date":1536444000,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1544729880,"objectID":"82838cdca3b9d984e69fad40be3f8623","permalink":"https://lubin.kerhuel.eu/tutorial/subtutorial2/","publishdate":"2018-09-09T00:00:00+02:00","relpermalink":"/tutorial/subtutorial2/","section":"tutorial","summary":"This feature can be used for publishing content such as:\n1\u0026frasl;5\n Project or software documentation Online courses Tutorials  The parent folder may be renamed, for example, to docs for project documentation or course for creating an online course.\nTo disable this feature, either delete the parent folder, or set draft = true in the front matter of all its pages.\nAfter renaming or deleting the parent folder, you may wish to update any [[menu.","tags":null,"title":"Overview11","type":"docs"},{"authors":null,"categories":null,"content":"This feature can be used for publishing content such as:\n Project or software documentation Online courses Tutorials  The parent folder may be renamed, for example, to docs for project documentation or course for creating an online course.\nTo disable this feature, either delete the parent folder, or set draft = true in the front matter of all its pages.\nAfter renaming or deleting the parent folder, you may wish to update any [[menu.main]] menu links to it in the config.toml.\n","date":1536444000,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1544729880,"objectID":"061e2a233da05999c57110b8c9a1b6ac","permalink":"https://lubin.kerhuel.eu/tutorial/subtutorial/","publishdate":"2018-09-09T00:00:00+02:00","relpermalink":"/tutorial/subtutorial/","section":"tutorial","summary":"This feature can be used for publishing content such as:\n Project or software documentation Online courses Tutorials  The parent folder may be renamed, for example, to docs for project documentation or course for creating an online course.\nTo disable this feature, either delete the parent folder, or set draft = true in the front matter of all its pages.\nAfter renaming or deleting the parent folder, you may wish to update any [[menu.","tags":null,"title":"Overview11","type":"docs"},{"authors":null,"categories":null,"content":"This feature can be used for publishing content such as:\n1\u0026frasl;5\n Project or software documentation Online courses Tutorials  The parent folder may be renamed, for example, to docs for project documentation or course for creating an online course.\nTo disable this feature, either delete the parent folder, or set draft = true in the front matter of all its pages.\nAfter renaming or deleting the parent folder, you may wish to update any [[menu.main]] menu links to it in the config.toml.\n","date":1536444000,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1536444000,"objectID":"291258a73440a4584c591f8825ec0408","permalink":"https://lubin.kerhuel.eu/tutorial/subtutorial3/","publishdate":"2018-09-09T00:00:00+02:00","relpermalink":"/tutorial/subtutorial3/","section":"tutorial","summary":"This feature can be used for publishing content such as:\n1\u0026frasl;5\n Project or software documentation Online courses Tutorials  The parent folder may be renamed, for example, to docs for project documentation or course for creating an online course.\nTo disable this feature, either delete the parent folder, or set draft = true in the front matter of all its pages.\nAfter renaming or deleting the parent folder, you may wish to update any [[menu.","tags":null,"title":"Subtutorial3","type":"docs"},{"authors":null,"categories":null,"content":" Table of Contents  Introduction Hardware  head electronics: IMU sensor and microcontroller Base trolley: Motor, batteries and power electronics  Pendulum model  1 rotational DoF pendulum 1 translational DoF trolley  Control feedback loop      Acronyms:      Introduction Objective is to build an unstable platform to experiment various control loop to stabilize it. The platform hardware is described below; a brief overview of the model is given and a LQR algorithm implemented as proof of concept.\n    -- Video of the stabilized platform with a 4 state LQR feedback loop. The platform is completely autonomous (no user input).\nThe top of the pendulum is comparable to a head where the microcontroller acts as a brain and the inertial sensor (accelerometers and rate gyro) as the inner ears. The base of the pendulum is a modified RC toys comprising two wheels driven by two independent DC motor (see pictures below).\nStabilization overview: The microcontroller computes the angle of the pendulum from the inertial sensor measurements (accelerometers and rate gyro). A feedback loop stabilize the pendulum up right while maintaining the pendulum position still. The pendulum translation is estimated through an internal dynamic model of the trolley stimulated with a copy of the DC motor command. The pendulum slow translations reflect the drift of the internal estimation of the displacement.\n Hardware The head and the base trolley are described successively. They are separated with an $8mm$ carbon tube. The pendulum length is $0.52m$ from wheel axis to the top. Wheels diameters is $8cm$. Pendulum total weight is $200g$ comprising $111g$ for the 4 AA batteries.\n  inverted Pendulum  click to open vertical full sized picture   head electronics: IMU sensor and microcontroller The controller is a Microstick II board equipped with a dsPIC 33EP128MC202 running at $\\approx 70\\ MIPS$. It is powered through the USB modified cable which provide only the power supply from 4 AA batteries hold in the base.\n  head on top of the inverted pendulum  A prototyping board support a Microstick II board with the dsPIC 33EP128MC202. A sensor board from drotek endowing the ICM-20608 inertial sensor is screwed on the base board.   The unique sensor used is a 6 DoF1 IMU2 sensor: the ICM-20608 from invensense mounted on a drotek board provides:\n a 3 axis Accelerometers and a 3 axis rate gyro.  The ICM-20608 values are read through an I2C interface running at 400kHz. The I2C interface implemented through the I2C blocks for dsPIC enable hot plug of the sensor: The microcontroller sends an initialization sequence for the sensor each time this last is detected. Others sensor boards were tested endowed with MPU9250 and MPU6050 chips. The GY-91 board is currently the more commonly found on the market and has 10 DoF1.\n The accelerometer is configured with a range of $\\pm 8g$ low pass filtered at $99Hz$. The rage gyro is configured with a range of $\\pm 500 \\deg/s$ low pass filtered at $250Hz$.  The PCB board provides a $3.3V$ regulator and 4 pin extra interface ( GND, +3.3v, Tx, Rx ) to connect either a data logger, a radio link for telemetry module or an RC receiver capable of S.BUS or S.Port protocol (i.e. UART based).\nBase trolley: Motor, batteries and power electronics    The base trolley is based on low cost a 2-wheel remote control toy. Its electronics is removed. Two pairs of wires power the two DC motors in either direction through an L298N H bridge external module.\nThe L298N H bridge can control up to two DC motors: for each motor,\n Two digital input signal set the motor state: direction, brake or free-wheels. A third digital signal power-up the motor accordingly to the state defined. This third signal is modulated thanks to a 100Hs PWM signal whose duty cycle vary from 0 to 100%.  Three similar signals control the $2^{nd}$ motor. The flat multicolor rubbon connect 6 digital control signal from the Microstick II dsPIC to the input of the L298N H bridge.\n  Base trolley of the inverted pendulum  A L298N H bridge (for arduino) power board drives the two DC motors of a modified FlyWheels toy. Four AA batteries powers the pendulum.   Each side of the trolley hold two $1.2V$ AA NiMh batteries (total is 4 x AA) which powers both the DC motors and the electronics with $\\approx 4.8V$. The black and red wires from the trolley to the top of the pendulum powers the Microstick II electronic equipement.\nPendulum model The pendulum model is composed of two intertwinned sub-system:\n The 1 DoF pendulum, with 1 rotational DoF1 around the wheels axis The 1 DoF trolley, with 1 horizontal translation DoF1.  The 1 DoF pendulum is characterized by a length $L$ and a weight $M$. It is a $2^{nd}$ order system.\nThe 1 DoF trolley is characterized by the motors dynamics when translating the base loaded with an up-right pendulum. The model is $1^{st}$ order system characterized by its time constant $\\tau$.\n1 rotational DoF pendulum 1 translational DoF trolley Control feedback loop Video of the inverted Pendulum when it encounters a wall:     --\nAcronyms:  --  Degree of Freedom\r^ Inertial Measurement Unit\r^   ","date":1543618800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1547592794,"objectID":"84a25e4cc91f774777fb3b8fd89fceb3","permalink":"https://lubin.kerhuel.eu/project/inverted_pendulum_flywheels/","publishdate":"2018-12-01T00:00:00+01:00","relpermalink":"/project/inverted_pendulum_flywheels/","section":"project","summary":"Inverted pendulum running on a microstick II dsPIC board. Angle is estimated from low cost MEMS sensors with an IMU data fusion algorithm. Stabilizing control loop drives two DC motors from a modified RC toy. No encoder sensor are used.","tags":["Inverted pendulum","control","state space","LQR","rapid prototyping","model-based design","matlab","simulink"],"title":"Inverted Pendulum","type":"project"},{"authors":null,"categories":null,"content":" Control a 24V DC motor using the MCLV V2 board with a dsPIC 33EP256MC506. This hands-on is for 5th year students at INSA-Lyon.\nThe hands-on Lab subject available at: https://rtdc.ctrl-elec.fr/.\nSlides presents the adaptation required to go from a Simulink model for Simulation (or DSPACE) to a Simulink model targeting a microcontrollers. Two topics are presented:\n Real-time scheduler / CPU load analysis Fixed-point datatypes  Authors:  Romain DELPOUX (Romain.Delpoux at insa-lyon.fr), Assistant Professor, INSA de Lyon, Laboratoire Ampère UMR CNRS 5005. Lubin KERHUEL (Lubin.Kerhuel at microchip.com), Dr-Engineer, Microchip Technology Inc.  ","date":1543618800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1547414831,"objectID":"302c3fd4ee8916cc61aece44dff60b9e","permalink":"https://lubin.kerhuel.eu/project/lab_dc_motor/","publishdate":"2018-12-01T00:00:00+01:00","relpermalink":"/project/lab_dc_motor/","section":"project","summary":"Simulation \u0026 real-time control of a 24v DC motor (INSA Lyon hands-on)","tags":["simulink","matlab","motor-control","rapid-prototyping","DC-motor","speed-controller"],"title":"Real Time Control for a DC Motor","type":"project"},{"authors":null,"categories":null,"content":" #include \u0026ldquo;includeme.md\u0026rdquo;\nIn this tutorial, I\u0026rsquo;ll share my top 10 tips for getting started with Academic:\nmain title Simulink Simulink, Mavlink keywords. Matlab,\n2nd bullet $$ \\frac{\\pi}{2} = 5 $$\nTip 1 Matlab code 1 + 2 . 0 5 6 8 4 8 sin(2)  \u0026hellip;\nTip 2 \u0026hellip;\nsecond main title piou piou\n","date":1536444000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1544729880,"objectID":"6ef0d9bcbe3d85e4da3dcd36b4e188bf","permalink":"https://lubin.kerhuel.eu/tutorial/subtutorial/example/","publishdate":"2018-09-09T00:00:00+02:00","relpermalink":"/tutorial/subtutorial/example/","section":"tutorial","summary":"#include \u0026ldquo;includeme.md\u0026rdquo;\nIn this tutorial, I\u0026rsquo;ll share my top 10 tips for getting started with Academic:\nmain title Simulink Simulink, Mavlink keywords. Matlab,\n2nd bullet $$ \\frac{\\pi}{2} = 5 $$\nTip 1 Matlab code 1 + 2 . 0 5 6 8 4 8 sin(2)  \u0026hellip;\nTip 2 \u0026hellip;\nsecond main title piou piou","tags":null,"title":"Example Page11","type":"docs"},{"authors":null,"categories":null,"content":" je suis un titre $\\frac{1}{pi}$\nmavlink\n","date":1536444000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1544729880,"objectID":"d85f4f79b587053cdadb6aed023fc71b","permalink":"https://lubin.kerhuel.eu/tutorial/subtutorial/example3/","publishdate":"2018-09-09T00:00:00+02:00","relpermalink":"/tutorial/subtutorial/example3/","section":"tutorial","summary":"je suis un titre $\\frac{1}{pi}$\nmavlink","tags":null,"title":"Example Page 13","type":"docs"},{"authors":null,"categories":null,"content":" Simulink model to target a dsPIC MCLV board running a DC motor The model contains blocks to configure dsPIC peripheral (PWM, ADC and QEI) to run a DC motor with the MCLV-V2 board equipped with the dsPIC-33EP256MC506 PIM using internal Op-Amps. Sensors measurements are visualized on the computer while the motor is running.\nGetting Started The model MCLV2_dsPIC33EP256MC506_externalOpAmp_HardwareTest.mdl is for code generation (peripheral blocks have no effects during a simulation). Open the Simulink model and push the build button on the top right, below the Simulink windows menu bar.\n *fig: Model MCLV2_dsPIC33EP256MC506_externalOpAmp_HardwareTest.mdl set-up the dsPIC 33EP256MC506 peripherals with internal op-amps for the MCLV-v2 board. Two PWM signals updated at 20kHz drives a DC motor through a H mosfet structure. One QEI peripheral sampled at 500Hz provides shaft position and speed from an optical encoder. Two ADC channels provides respectively the board potentiometer position and the current measurement from a shunt resistor. These four measurements are under-sampled at 100Hz and sent through the 115200 UART connection to the computer and decoded with the picgui graphical interface.*\nHardware requirements:  MCLV-V2 Motor Control Board PIM dsPIC33EP256MC506 with internal Op-Amp Programmer (PICkit 4, ICD4, Real-Ice, PICkit 3, ICD3, \u0026hellip;) DC motor (Pravalux Brushed DC Motor, 90 W, 24 V dc, 3000 rpm) Cable to send data from the MCLV board (Tx) to the PC (Rx) (like a FTDI cable)  Software requirements:  Matlab/Simulink  Embedded coder (Matlab Coder \u0026amp; Simulink Coder) Fixed point toolbox  MPLAB device blocks for Simulink MPLAB X IDE development (required to flash the binary from matlab) XC16 compiler  Experiment Generate code and compile: The build icon on top right of Simulink model, (see fig above) do: 1. generates c source code, 2. compiles c code and 3. flash the resulting binary to the MCLV targeted board.\n If programming the board fails (not powered, not connected,\u0026hellip;), use the Microchip -\u0026gt; Flash within the Simulink model menu.\n Run the DC motor: With the MCLV2 board powered and programmed, rotate the potentiometer to accelerate motor / reverse direction. Setting the potentiometer at middle position (off) at power on to avoid current surge.\nData Visualization with picgui: Open the picgui interface (fig) (type picgui at matlab prompt or double click on the Interface Tx-Matlab block in the model) 1. Select host UART port and connect at 115200 bauds 1. Replace the default script within the picgui interface to a call the customized matlab script DataVisu.m 1. Push the start button to visualize runtime curves showing potentiometer, motor position, motor speed and current measured on shunt resistors\n fig: The picgui interface decode the incoming UART data stream and plot in real-time received values, here potentiometer, motor speed and current measured. Plots in figure are realized with a matlab script which is continuously refreshing the graphs using incoming data. This script can be modified providing all the matlab capabilities to customize visualization or perform further analysis on received data in real-time.\nBack to project presentation\n","date":1536444000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1544729880,"objectID":"77b379e520306c567527b7924ce2c428","permalink":"https://lubin.kerhuel.eu/tutorial/subtutorial/hardware_setup/","publishdate":"2018-09-09T00:00:00+02:00","relpermalink":"/tutorial/subtutorial/hardware_setup/","section":"tutorial","summary":"Simulink model to target a dsPIC MCLV board running a DC motor The model contains blocks to configure dsPIC peripheral (PWM, ADC and QEI) to run a DC motor with the MCLV-V2 board equipped with the dsPIC-33EP256MC506 PIM using internal Op-Amps. Sensors measurements are visualized on the computer while the motor is running.\nGetting Started The model MCLV2_dsPIC33EP256MC506_externalOpAmp_HardwareTest.mdl is for code generation (peripheral blocks have no effects during a simulation).","tags":null,"title":"Example Page1111","type":"docs"},{"authors":null,"categories":null,"content":" Simulink model to target a dsPIC MCLV board running a DC motor The model contains blocks to configure dsPIC peripheral (PWM, ADC and QEI) to run a DC motor with the MCLV-V2 board equipped with the dsPIC-33EP256MC506 PIM using internal Op-Amps. Sensors measurements are visualized on the computer while the motor is running.\nGetting Started The model MCLV2_dsPIC33EP256MC506_externalOpAmp_HardwareTest.mdl is for code generation (peripheral blocks have no effects during a simulation). Open the Simulink model and push the build button on the top right, below the Simulink windows menu bar.\n *fig: Model MCLV2_dsPIC33EP256MC506_externalOpAmp_HardwareTest.mdl set-up the dsPIC 33EP256MC506 peripherals with internal op-amps for the MCLV-v2 board. Two PWM signals updated at 20kHz drives a DC motor through a H mosfet structure. One QEI peripheral sampled at 500Hz provides shaft position and speed from an optical encoder. Two ADC channels provides respectively the board potentiometer position and the current measurement from a shunt resistor. These four measurements are under-sampled at 100Hz and sent through the 115200 UART connection to the computer and decoded with the picgui graphical interface.*\nHardware requirements:  MCLV-V2 Motor Control Board PIM dsPIC33EP256MC506 with internal Op-Amp Programmer (PICkit 4, ICD4, Real-Ice, PICkit 3, ICD3, \u0026hellip;) DC motor (Pravalux Brushed DC Motor, 90 W, 24 V dc, 3000 rpm) Cable to send data from the MCLV board (Tx) to the PC (Rx) (like a FTDI cable)  Software requirements:  Matlab/Simulink  Embedded coder (Matlab Coder \u0026amp; Simulink Coder) Fixed point toolbox  MPLAB device blocks for Simulink MPLAB X IDE development (required to flash the binary from matlab) XC16 compiler  Experiment Generate code and compile: The build icon on top right of Simulink model, (see fig above) do: 1. generates c source code, 2. compiles c code and 3. flash the resulting binary to the MCLV targeted board.\n If programming the board fails (not powered, not connected,\u0026hellip;), use the Microchip -\u0026gt; Flash within the Simulink model menu.\n Run the DC motor: With the MCLV2 board powered and programmed, rotate the potentiometer to accelerate motor / reverse direction. Setting the potentiometer at middle position (off) at power on to avoid current surge.\nData Visualization with picgui: Open the picgui interface (fig) (type picgui at matlab prompt or double click on the Interface Tx-Matlab block in the model) 1. Select host UART port and connect at 115200 bauds 1. Replace the default script within the picgui interface to a call the customized matlab script DataVisu.m 1. Push the start button to visualize runtime curves showing potentiometer, motor position, motor speed and current measured on shunt resistors\n fig: The picgui interface decode the incoming UART data stream and plot in real-time received values, here potentiometer, motor speed and current measured. Plots in figure are realized with a matlab script which is continuously refreshing the graphs using incoming data. This script can be modified providing all the matlab capabilities to customize visualization or perform further analysis on received data in real-time.\nBack to project presentation\n","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1544729880,"objectID":"22df4e171e4c05300fe92452fdcd8b0c","permalink":"https://lubin.kerhuel.eu/tutorial/subtutorial2/hardware_setup/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/tutorial/subtutorial2/hardware_setup/","section":"tutorial","summary":"Simulink model to target a dsPIC MCLV board running a DC motor The model contains blocks to configure dsPIC peripheral (PWM, ADC and QEI) to run a DC motor with the MCLV-V2 board equipped with the dsPIC-33EP256MC506 PIM using internal Op-Amps. Sensors measurements are visualized on the computer while the motor is running.\nGetting Started The model MCLV2_dsPIC33EP256MC506_externalOpAmp_HardwareTest.mdl is for code generation (peripheral blocks have no effects during a simulation).","tags":null,"title":"","type":"docs"},{"authors":null,"categories":null,"content":" Simulink model to target a dsPIC MCLV board running a DC motor The model contains blocks to configure dsPIC peripheral (PWM, ADC and QEI) to run a DC motor with the MCLV-V2 board equipped with the dsPIC-33EP256MC506 PIM using internal Op-Amps. Sensors measurements are visualized on the computer while the motor is running.\nGetting Started The model MCLV2_dsPIC33EP256MC506_externalOpAmp_HardwareTest.mdl is for code generation (peripheral blocks have no effects during a simulation). Open the Simulink model and push the build button on the top right, below the Simulink windows menu bar.\n *fig: Model MCLV2_dsPIC33EP256MC506_externalOpAmp_HardwareTest.mdl set-up the dsPIC 33EP256MC506 peripherals with internal op-amps for the MCLV-v2 board. Two PWM signals updated at 20kHz drives a DC motor through a H mosfet structure. One QEI peripheral sampled at 500Hz provides shaft position and speed from an optical encoder. Two ADC channels provides respectively the board potentiometer position and the current measurement from a shunt resistor. These four measurements are under-sampled at 100Hz and sent through the 115200 UART connection to the computer and decoded with the picgui graphical interface.*\nHardware requirements:  MCLV-V2 Motor Control Board PIM dsPIC33EP256MC506 with internal Op-Amp Programmer (PICkit 4, ICD4, Real-Ice, PICkit 3, ICD3, \u0026hellip;) DC motor (Pravalux Brushed DC Motor, 90 W, 24 V dc, 3000 rpm) Cable to send data from the MCLV board (Tx) to the PC (Rx) (like a FTDI cable)  Software requirements:  Matlab/Simulink  Embedded coder (Matlab Coder \u0026amp; Simulink Coder) Fixed point toolbox  MPLAB device blocks for Simulink MPLAB X IDE development (required to flash the binary from matlab) XC16 compiler  Experiment Generate code and compile: The build icon on top right of Simulink model, (see fig above) do: 1. generates c source code, 2. compiles c code and 3. flash the resulting binary to the MCLV targeted board.\n If programming the board fails (not powered, not connected,\u0026hellip;), use the Microchip -\u0026gt; Flash within the Simulink model menu.\n Run the DC motor: With the MCLV2 board powered and programmed, rotate the potentiometer to accelerate motor / reverse direction. Setting the potentiometer at middle position (off) at power on to avoid current surge.\nData Visualization with picgui: Open the picgui interface (fig) (type picgui at matlab prompt or double click on the Interface Tx-Matlab block in the model) 1. Select host UART port and connect at 115200 bauds 1. Replace the default script within the picgui interface to a call the customized matlab script DataVisu.m 1. Push the start button to visualize runtime curves showing potentiometer, motor position, motor speed and current measured on shunt resistors\n fig: The picgui interface decode the incoming UART data stream and plot in real-time received values, here potentiometer, motor speed and current measured. Plots in figure are realized with a matlab script which is continuously refreshing the graphs using incoming data. This script can be modified providing all the matlab capabilities to customize visualization or perform further analysis on received data in real-time.\nBack to project presentation\n","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"8af11cfcdcb9f788b753973de8d08d3b","permalink":"https://lubin.kerhuel.eu/tutorial/subtutorial3/hardware_setup/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/tutorial/subtutorial3/hardware_setup/","section":"tutorial","summary":"Simulink model to target a dsPIC MCLV board running a DC motor The model contains blocks to configure dsPIC peripheral (PWM, ADC and QEI) to run a DC motor with the MCLV-V2 board equipped with the dsPIC-33EP256MC506 PIM using internal Op-Amps. Sensors measurements are visualized on the computer while the motor is running.\nGetting Started The model MCLV2_dsPIC33EP256MC506_externalOpAmp_HardwareTest.mdl is for code generation (peripheral blocks have no effects during a simulation).","tags":null,"title":"","type":"docs"},{"authors":null,"categories":null,"content":" Prototypage rapide avec Simulink sur dsPIC MPLAB device blocks for Simulink\nL.Kerhuel \u0026amp; R.Delpoux\n Pendule inverse  Video\nPlan: Modèle de simulation \u0026amp; génération de code\n Différences Temporel optimisation et type de données blocks et fonctionnalités Simulink  DSPACE  Aspect Temporel: Simulation Modélisation en temps continue, transformé de Laplace dans le domaine p (ou s)\n Solver résout les équations différentielles Pas de contrainte temps réelle Résultat dépend du solveur ; pas de calcul variable.  Aspect Temporel: Implémentation Implémentation en temps discret avec un pas de calcul fixe\n pas de solveur Contrainte temps réel Single-Rate \u0026amp; Multi-Rate Single-Tasking \u0026amp; Multi-Tasking   Discrete times  Single-rate:\n Les blocks ont tous la même période d\u0026rsquo;exécution (Même couleur)  Multi-Rate\n Les blocks peuvent avoir des périodes d\u0026rsquo;exécution différentes (Schéma multicolore)    Modèle multi-rate Charge CPU d\u0026rsquo;un modèle multi-rate single-tasking (@70 mips)  Charge CPU d\u0026rsquo;un modèle multi-rate single-tasking (@20 mips)  Single-Tasking Single-Tasking: Dans le slot de temps, l\u0026rsquo;exécution de tous les blocks doit se terminer avant la fin du slot.\nMulti-Tasking Multi-Tasking: Préemption possible -\u0026gt; Monotonic Rate Scheduler\n La tâche la plus fréquente à la priorité maximale  Préemptera une tache plus lente Beaucoup plus flexible Mode par défaut (voir options du solveur)   Charge CPU d\u0026rsquo;un modèle multi-rate single-tasking (@70 mips)  Charge CPU d\u0026rsquo;un modèle multi-rate single-tasking (@20 mips)  Tasking Conclusion  Single-Tasking @ 20 MIPS -\u0026gt; Overload  dispatcher la tache la plus lente sur plusieurs slots (option d\u0026rsquo;offset dans Time Step -\u0026gt; [.001 .005])  Multi-Tasking @ 20 MIPS -\u0026gt; Ok  Rate transfert block options  Data Integrity Deterministic data transfert    Optimisation type de données  Virgule Fixe Virgule Flottante  Flotant    IEEE 754 Single Double     Format width 32 64   Sign bit 1 1   exponent width 8 11   Precision width 23+1 52+1    1st bit of the significand is always 1. Phantom bit\nCustom 8 bit Floating point    Parameter Single Double Custom     Format width 32 64 8   Sign bit 1 1 1   exponent width 8 11 4   Precision width 23+1 52+1 3+1    Script Matlab pour tester un flottant 8 bits % 4 bit exponent (signed) emin = -7; emax = 6; % 3 bits significand p = 3; exps = 2.^[emin:emax]; vals = (2^p) + [0:(2^p-1)]; % significand with leading 1 TotalVal = vals'*exps; % add denormalized values 8bitFloat = unique([TotalVal ; 2^emin * [0:(2^m-1)]']); 8bitFloat = unique(flipud(-TotalVal) ;TotalVal]); % with neg vals  Simulink Data-type Datatype  int8\u0026hellip;uint23 fixdt(1,16,15)  Scaling is En15 (Exp neg) $$\\rightarrow 2^-15$$  fixdt(1,16)  signed (1) 16 bit width Scaling is derived from min \u0026amp; max   Datatype  fixdt(1,16,.01,0)  Scaling is sfix16Sp01 Slope point 01\n   TP https://www.ctrl-elec.fr https://lubin.kerhuel.eu/slides/slides_dcmotor_insa\nElements de correction PWM settings Liens:  MPLAB device blocks for Simulink: https://www.microchip.com/SimulinkBlocks MPLAB X: https://www.microchip.com/MPLABX XC16: https://www.microchip.com/XC16  ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1547655532,"objectID":"813e22095d4c80ec8db0c156d303b80c","permalink":"https://lubin.kerhuel.eu/slides/slides_dcmotor_insa/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/slides/slides_dcmotor_insa/","section":"slides","summary":"Prototypage rapide avec Simulink sur dsPIC MPLAB device blocks for Simulink\nL.Kerhuel \u0026amp; R.Delpoux\n Pendule inverse  Video\nPlan: Modèle de simulation \u0026amp; génération de code\n Différences Temporel optimisation et type de données blocks et fonctionnalités Simulink  DSPACE  Aspect Temporel: Simulation Modélisation en temps continue, transformé de Laplace dans le domaine p (ou s)\n Solver résout les équations différentielles Pas de contrainte temps réelle Résultat dépend du solveur ; pas de calcul variable.","tags":null,"title":"Prototypage Rapide avec Simulink sur dsPIC","type":"slides"},{"authors":null,"categories":null,"content":" Test slides  My Title !   mes notes\nControls  Next: Right Arrow or Space Previous: Left Arrow Start: Home Finish: End Overview: Esc Speaker notes: S Fullscreen: F Zoom: Alt + Click PDF Export: E  Code Highlighting Inline code: variable\nCode block:\nporridge = \u0026quot;blueberry\u0026quot; if porridge == \u0026quot;blueberry\u0026quot;: print(\u0026quot;Eating...\u0026quot;)  Math In-line math: $x + y = z$\nBlock math:\n$$ f\\left( x \\right) = \\;\\frac{{2\\left( {x + 4} \\right)\\left( {x - 4} \\right)}}{{\\left( {x + 4} \\right)\\left( {x + 1} \\right)}} $$\nFragments Make content appear incrementally\n{{% fragment %}} One {{% /fragment %}} {{% fragment %}} **Two** {{% /fragment %}} {{% fragment %}} Three {{% /fragment %}}  Press Space to play!\nOne  Two  Three \nA fragment can accept two optional parameters:\n class: use a custom style (requires definition in custom CSS) weight: sets the order in which a fragment appears  Speaker Notes Add speaker notes to your presentation\n{{% speaker_note %}} - Only the speaker can read these notes - Press `S` key to view {{% /speaker_note %}}  Press the S key to view the speaker notes!\n Only the speaker can read these notes Press S key to view   Themes  black: Black background, white text, blue links (default) white: White background, black text, blue links league: Gray background, white text, blue links beige: Beige background, dark text, brown links sky: Blue background, thin dark text, blue links   night: Black background, thick white text, orange links serif: Cappuccino background, gray text, brown links simple: White background, black text, blue links solarized: Cream-colored background, dark green text, blue links  Custom Slide Customize the slide style and background\n{{\u0026lt; slide background-image=\u0026quot;/img/boards.jpg\u0026quot; \u0026gt;}} {{\u0026lt; slide background-color=\u0026quot;#0000FF\u0026quot; \u0026gt;}} {{\u0026lt; slide class=\u0026quot;my-style\u0026quot; \u0026gt;}}  Custom CSS Example Let\u0026rsquo;s make headers navy colored.\nCreate assets/css/reveal_custom.css with:\n.reveal section h1, .reveal section h2, .reveal section h3 { color: navy; }  Questions? Ask\nDocumentation\n","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1547655532,"objectID":"83f508f052e23f7ee5731151e8db499c","permalink":"https://lubin.kerhuel.eu/slides/testslides/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/slides/testslides/","section":"slides","summary":"Test slides  My Title !   mes notes\nControls  Next: Right Arrow or Space Previous: Left Arrow Start: Home Finish: End Overview: Esc Speaker notes: S Fullscreen: F Zoom: Alt + Click PDF Export: E  Code Highlighting Inline code: variable\nCode block:\nporridge = \u0026quot;blueberry\u0026quot; if porridge == \u0026quot;blueberry\u0026quot;: print(\u0026quot;Eating...\u0026quot;)  Math In-line math: $x + y = z$\nBlock math:\n$$ f\\left( x \\right) = \\;\\frac{{2\\left( {x + 4} \\right)\\left( {x - 4} \\right)}}{{\\left( {x + 4} \\right)\\left( {x + 1} \\right)}} $$","tags":null,"title":"test slides","type":"slides"}]
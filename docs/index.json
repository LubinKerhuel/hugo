[{"authors":["lubin"],"categories":null,"content":"During my schrool time (1999-2005), control projects ended up with simple PID algorithm tuned with successive trials. Developping embedded C program took so much time than remaining time for modeling, identification and simulation tasks tend toward null.\nFirst Attempts to target dsPIC 16f with the Simulink code generator failed due to compiler incompatibility. In 2005 however, the dsPIC 33f compiler and the generated code gets compatible thus I started a blockset targetting dsPIC 33f. It does in\n$$ \\text{one push button} \\left\\{ \\begin{array}{l} \\text{- C code generation,} \\\\\n\\text{- Compilation,} \\\\\n\\text{- Upload \u0026amp; run on the target.} \\\\\n\\end{array} \\right. $$\nI completed a PhD thesis on bio-robotics from 2006 to 2009 using this approach. The model based designed reduces the time from the simulation or dSPACE test bench platform to our autonomous robot.\nI designed various data fusion algorithm for sports applications at MOVEA in 2010-2011, using a similar rapid prototyping scheme.\nI am now developping the MPLAB blockset at Microchip to target dsPIC and PIC32 microcontrollers.\nFor company, scientists, and students, model-based design enable focusing on ideas rather than getting lost in the embedded programming requirements. Shortening the loop-(back) $\\lbrace Simulation \\Leftrightarrow Hardware \\rbrace$ allows improving algorithms, getting better results, product, and possibly reduce the time to market.\nThe present website shares this experience of Rapid Prototyping tools through custom and hopefully fun projects. All are based on the Microchip blockset which is free. It requires matlab/simulink with embedded coder related toolboxes.\n","date":1548453998,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1548453998,"objectID":"a23063a19101e1fd52114ecb54c47e50","permalink":"https://lubin.kerhuel.eu/author/lubin/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/author/lubin/","section":"author","summary":"During my schrool time (1999-2005), control projects ended up with simple PID algorithm tuned with successive trials. Developping embedded C program took so much time than remaining time for modeling, identification and simulation tasks tend toward null.\nFirst Attempts to target dsPIC 16f with the Simulink code generator failed due to compiler incompatibility. In 2005 however, the dsPIC 33f compiler and the generated code gets compatible thus I started a blockset targetting dsPIC 33f.","tags":null,"title":"","type":"author"},{"authors":null,"categories":null,"content":"","date":-62135596800,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":-62135596800,"objectID":"d41d8cd98f00b204e9800998ecf8427e","permalink":"https://lubin.kerhuel.eu/author/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/author/","section":"author","summary":"","tags":null,"title":"Authors","type":"author"},{"authors":null,"categories":null,"content":"Overview of projects\n","date":1548663322,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1548663322,"objectID":"4cdd37113783e47641dd300543c94e1b","permalink":"https://lubin.kerhuel.eu/docs/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/docs/","section":"docs","summary":"Overview of projects","tags":null,"title":"Overview","type":"docs"},{"authors":null,"categories":null,"content":"","date":1543618800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1549300841,"objectID":"129288b19260e15ffe68b30053e899ae","permalink":"https://lubin.kerhuel.eu/project/inverted-pendulum/","publishdate":"2018-12-01T00:00:00+01:00","relpermalink":"/project/inverted-pendulum/","section":"project","summary":"Low cost inverted pendulum running on a microstick II dsPIC board. Angle is estimated with an IMU data fusion algorithm fed with the ICM-20608 Inertial sensor. LQR control loop drives two DC motors of the modified toy. No encoder sensor are present.","tags":["inverted pendulum","state space","LQR","rapid prototyping","model based design","matlab","simulink","DIY","dsPIC","L298N","ICM-20608"],"title":"Inverted Pendulum","type":"project"},{"authors":null,"categories":null,"content":" Control a 24V DC motor using the MCLV V2 board with a dsPIC 33EP256MC506. This hands-on is for 5th year students at INSA-Lyon.\nThe hands-on Lab subject available at: https://rtdc.ctrl-elec.fr/.\nSlides presents the adaptation required to go from a Simulink model for Simulation (or DSPACE) to a Simulink model targeting a microcontrollers. Two topics are presented:\n Real-time scheduler / CPU load analysis Fixed-point datatypes  Authors:  Romain DELPOUX (Romain.Delpoux at insa-lyon.fr), Assistant Professor, INSA de Lyon, Laboratoire Amp√®re UMR CNRS 5005. Lubin KERHUEL (Lubin.Kerhuel at microchip.com), Dr-Engineer, Microchip Technology Inc.  ","date":1543618800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1549300841,"objectID":"ca467799ccaf7d76ad29a70379a0e6c5","permalink":"https://lubin.kerhuel.eu/project/lab-dc-motor/","publishdate":"2018-12-01T00:00:00+01:00","relpermalink":"/project/lab-dc-motor/","section":"project","summary":"Simulation \u0026 real-time control of a Pravalux 24v DC motor (INSA Lyon hands-on)","tags":["simulink","matlab","motor","control","rapid prototyping"],"title":"Real Time Control for a DC Motor","type":"project"},{"authors":null,"categories":null,"content":" \r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\rTop of the inverted pendulum\n\r\r\rPresentation Stabilization of an inverted pendulum is a common engineering challenge. Objective is to build a low-cost DIY1 platform to test various feedback control loop.\nThis document describes the hardware and the theoretical model of the pendulum. Simulation are presented with Simulink models and an LQR2 feedback control loop finally stabilizes the platform.\n    -- Video of the stabilized platform with a 4 state LQR feedback loop. The platform is completely autonomous (no user input).\nThe electronic placed at the top of the pendulum composed of a dsPIC 16 bits microcontroller and an inertial sensor (accelerometers and rate gyro). The base of the pendulum is a modified RC toys comprising two wheels driven by two independent DC motor (see pictures below).\nHardware Overview The head and the base trolley are described successively. They are separated with an $8mm$ carbon tube. The pendulum length is $0.52m$ from wheel axis to the top. Wheels diameters is $8cm$. Pendulum total weight is $200g$ comprising $111g$ for the 4 AA batteries.\n\r\r\rInverted Pendulum platform\n\r\r\rHead electronics Microcontroller The controller is a Microstick II board equipped with a dsPIC 33EP128MC202 running at $\\approx 70\\ MIPS$. It is powered through the USB modified cable which provide only the power supply from 4 AA batteries hold in the base.\n\r\rMicrocontroller and sensor on top of the inverted pendulum\rA prototyping board support a Microstick II board with the dsPIC 33EP128MC202. A board from Drotek endowing the Invensense ICM-20608 inertial sensor is screwed on the base board.\n\r\r\rIMU sensor The unique sensor used is a 6 DoF3 sensor: the ICM-20608 from Invensense mounted on a Drotek board provides:\n a 3 axis Accelerometers and a 3 axis rate gyros.  The I2C blocks set the BUS clock at $400kHz$ and fetch the 6 sensors values every $1ms$ $(1kHz)$. The Simulink I2C blocks setting enable hot plug of the I2C sensor: The microcontroller initializes the sensor each time this last is detected or redetected on the I2C bus.\n The accelerometer is configured with a range of $\\pm 8g$ low pass filtered at $99Hz$. The rage gyro is configured with a range of $\\pm 500 \\deg/s$ low pass filtered at $250Hz$.  A Simulink IMU4 sub-system run a data fusion algorithm to reconstruct a drift-free quaternion angular position at $1kHz$ (the yaw angle drift when magnetometer is not present). The stabilization control loop uses the drift-free pitch angle.\nIt is possible to use other sensors like the MPU9250 or MPU6050 with either an I2C or SPI interface. The GY-91 board is a 10 DoF3 widespread board based on the 9 DoF MPU9250 (3 accelerometers, 3 magnetometers, 3 rate gyros) and has a pressure sensor.\nUART interface The PCB board provides a $3.3V$ regulator and 4 pin extra interface ( GND, +3.3v, Tx, Rx ) to connect either an UART data-logger or radio link for telemetry module or an RC receiver capable of S.BUS, S.Port or P.Port protocol (all UART based).\nBase trolley Motors The base trolley is a low cost a 2-wheel remote control toy named flywheels. The toy is from 2012 but 2 wheeled equivalents exist. Its electronics is removed. Two pairs of wires power two DC motors in either direction through an L298N H bridge board module.\n\r\rFlyWheels toy package\rFlyWheels toy package\n\r\r\r\r\rTwo DC motors\rTwo DC motors\n\r\r\r\rPower electronics The L298N H bridge controls two DC motors. For each motor:\n Two logic signals set the 4 states: direction CW or CCW, brake, or freewheel. The third logic signal power the motor depending on to the state defined.  The third signal is modulated with a 100Hz square periodic signal whose duty cycle vary from 0% to 100% (PWM). It sets the torque for the motor.\nThe flat multicolor ribbon connects 6 logic control signals (3 for each motor) from the Microstick II dsPIC output to the of the L298N H bridge.\n\r\rBase trolley of the inverted pendulum\rA L298N H bridge (for Arduino) power board drives the two DC motors of a modified FlyWheels toy. Four AA batteries powers the pendulum.\n\r\r\rBatteries Four $1.2V$ AA Ni-Mh batteries are dispatched on both side of the trolley. $\\approx 4.8V$ powers the motors and the electronics. The black and red wire from the trolley to the top of the pendulum powers the Microstick II electronic and sensors.\nPendulum Model The pendulum model is composed of two intertwined sub-system:\n The pendulum*, with 1 rotation DoF3 $\\theta$ angle around the wheel\u0026rsquo;s axis The trolley*, with 1 translation DoF3 $x$ position.  Equations Applying the Dynamic fundamental law on the pendulum: $$ \\sum \\vec{Force} = m.\\vec{a} $$\nWe model the three forces which are the weight $\\vec{P}$, the Friction $\\vec{F}$ which slow down the pendulum, and the Reaction $\\vec{R}$ from the rod:\n$$ \\underbrace{ -mg\\vec{j} }_{\\vec{P}} \\ - \\ \\underbrace{ k \\frac{\\partial \\vec{r}}{\\partial t} }_{\\vec{F}} \\ + \\ \\underbrace{ mg\\vec{j} . \\vec{r} + \\underbrace{Ctfg . \\vec{r}}_{\\text{Centrifugal}} }_{\\vec{R}} = ml \\frac{\\partial^2\\vec{ r }}{\\partial t^2} $$\nWith $ \\{ \\vec{i},\\vec{j} \\} $ the earth reference frame and $ \\{ \\vec{r},\\vec{n} \\} $ the pendulum frame (rod and normal direction). $m$ is the mass of the pendulum (without the trolley). $l$ is the distance from the inter-wheel\u0026rsquo;s axis to the center of mass of the pendulum (without the trolley)\n$$ \\left\\{ \\begin{array}{rcl} \\vec{i} \u0026amp; = \u0026amp; \\vec{n} . cos(\\theta) - \\vec{r} . sin(\\theta) \\\\\\ \\vec{j} \u0026amp; = \u0026amp; \\vec{n} . sin(\\theta) + \\vec{r} . cos(\\theta) \\end{array} \\right. $$\nWith\n$$ \\begin{array}{rcl} k \\frac{\\partial \\vec{r}}{\\partial t} \u0026amp; = \u0026amp; -k \\dot{\\theta} \\vec{n} \\\\\n\\end{array} $$\nand\n$$ \\begin{array}{rcl} ml \\frac{\\partial^2\\vec{ r }}{\\partial t^2}\n\u0026amp; = \u0026amp; -ml \\frac{\\partial }{\\partial t} \\left( \\dot{\\theta} \\vec{n} \\right) \\\\\n\u0026amp; = \u0026amp; -ml \\ddot{\\theta} \\vec{n} - ml\\dot{\\theta}^2 \\vec{r} \\end{array} $$\nSeparating each axis $ \\{ \\vec{r},\\vec{n} \\} $ we obtain: $$ \\left\\{ \\begin{array}{rcl} \\ddot{\\theta} + \\frac{km}{l}\\dot{\\theta} - \\frac{g}{l} . sin(\\theta) = 0 \\\\\\ ml\\dot{\\theta}^2 + Ctfg = 0 \\end{array} \\right. $$\nThe second equation provides the centrifugal force counteracted by the pendulum rod.\nThe first differential equation allows solving the angle $\\theta$ evolution. It can be linearized with $sin(\\theta) \\approx \\theta$ when the pendulum is up near $0$, or with $sin(\\theta) \\approx - (\\theta - \\pi)$ when the pendulum is down near $\\pi$.\nWhen the pendulum is up-side down (thus stable situation), the resulting $2^{nd}$ order system is characterized by:\n a natural oscillation frequency $w_n = \\sqrt{ \\frac{g}{l} } $, and a damping factor $\\zeta$.  In the laplace domain, differential equations for $\\theta$ becomes: $$ \\theta(s) \\left ( \\frac{1}{w_n^2}s^2 + \\frac{2 \\zeta}{w_n}s \\pm 1 \\right ) = 0 $$\nThe pendulum transfert function $F_p = \\frac{\\theta(s)}{E(s)}$ with a null input $E(s) = 1$ $$ F_p(s) = \\frac{1}{ \\frac{1}{w_n^2}s^2 + \\frac{2 \\zeta}{w_n}s \\pm 1 } $$\nUsing $\\pm 1 \\rightarrow +1$ when the pendulum is down side (stable) and $-1$ when up side (unstable).\nThe parameter $l$ could be measured from the platform hardware but the damping factor $\\zeta$ depends on friction and cannot be measured. Thus both $l$ and $\\zeta$ are determined by an identification on the free oscillating pendulum\nIdentification The pendulum is placed up-side-down between two chair back. The pendulum is let free to oscillate, motor off. The initial pendulum angle is $\\theta \\approx \\frac{\\pi}{2}$ (almost horizontal). It oscillates at its frequency $w_n$ until the damping friction ($\\zeta$) stop the oscillations. The $1kHz$ sampled angular speed and accelerations are recorded with openlager board connected on the UART interface.\n   Pendulum Parameters Identified Value     $l$ $0.45 m$   $k$ $0.4$   $w_n = \\sqrt{\\frac{g}{l}}$ $0.37 rad.s^{-1}$ ( $2.33 Hz$ )    ‚¨Ü Table of pendulum parameters\nRecorded data fed a Simulink model which reconstruct the pendulum angle with the IMU algorithm. Then the pendulum $\\theta$ oscillations is compared against a theoretical pendulum model. The model parameters $l$ and $\\zeta$ are tuned for the model to match with the experimental data.\nTrolley Model Equations The translational movement of the trolley is modeled as a $1^{st}$ order system characterized by its time constant $\\tau$. This dynamic includes the motor dynamics when it is loaded with the trolley considering the pendulum as vertical.\nThe model considers as negligible the effect of the pendulum forces (translational and rotational) applied on the trolley.\n$$ x(s) = \\frac{1}{\\tau s + 1} $$\n   Trolley Parameter Estimated Value     $\\tau$ $0.3s$    The trolley does not have any sensors. No encoder or current sensor are used to control the two motors. The parameters $\\tau$ is guessed instead of identified.\nIdentification Still the pendulum model including the trolley is simulated with its feedback loop controller and results are compared against recorded data of the real system running the same feedback loop controller. The simulated pendulum states are re-initialized periodically ($\\approx 2s$) with the real pendulum states as the model would diverge otherwise due to perturbations not modeled and model discrepancies. Correctness of the model can be checked between theses periodic re-initialization.\nController Stabilization overview: The microcontroller computes the angle of the pendulum from the inertial sensor measurements (accelerometers and rate gyro). A feedback loop stabilizes the pendulum up right while maintaining the pendulum position still. The pendulum translation is estimated through an internal dynamic model of the trolley stimulated with a copy of the DC motor command. The pendulum slow translations reflect the drift of the internal estimation of the displacement.\nVideo of the inverted Pendulum when it encounters a wall:     --\nAnother way to stabilize a pendulum with an electric see-saw (video).\n Do It Yourself ^ Linear Quadratic Regulator ^ Degree of Freedom ^ Inertial Measurement Unit ^   ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1549300841,"objectID":"b0ae7d29be8baee87b074905e65b1536","permalink":"https://lubin.kerhuel.eu/docs/inverted-pendulum/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/docs/inverted-pendulum/","section":"docs","summary":"LQR stabilization of an inverted pendulum platform made with low cost toy. Simulink model and generation of code for dsPIC Microchip microcontroller are provided (Rapid Control Prototyping : RCP)","tags":null,"title":"Inverted Pendulum","type":"docs"},{"authors":null,"categories":null,"content":" Prototypage rapide avec Simulink sur dsPIC MPLAB device blocks for Simulink\nL.Kerhuel \u0026amp; R.Delpoux\n Pendule inverse  Video\nPlan: Mod√®le de simulation \u0026amp; g√©n√©ration de code\n Diff√©rences Temporel optimisation et type de donn√©es blocks et fonctionnalit√©s Simulink  DSPACE  Aspect Temporel: Simulation Mod√©lisation en temps continue, transform√© de Laplace dans le domaine p (ou s)\n Solver r√©sout les √©quations diff√©rentielles Pas de contrainte temps r√©elle R√©sultat d√©pend du solveur ; pas de calcul variable.  Aspect Temporel: Impl√©mentation Impl√©mentation en temps discret avec un pas de calcul fixe\n pas de solveur Contrainte temps r√©el Single-Rate \u0026amp; Multi-Rate Single-Tasking \u0026amp; Multi-Tasking   Discrete times  Single-rate:\n Les blocks ont tous la m√™me p√©riode d\u0026rsquo;ex√©cution (M√™me couleur)  Multi-Rate\n Les blocks peuvent avoir des p√©riodes d\u0026rsquo;ex√©cution diff√©rentes (Sch√©ma multicolore)    Mod√®le multi-rate Charge CPU d\u0026rsquo;un mod√®le multi-rate single-tasking (@70 mips)  Charge CPU d\u0026rsquo;un mod√®le multi-rate single-tasking (@20 mips)  Single-Tasking Single-Tasking: Dans le slot de temps, l\u0026rsquo;ex√©cution de tous les blocks doit se terminer avant la fin du slot.\nMulti-Tasking Multi-Tasking: Pr√©emption possible -\u0026gt; Monotonic Rate Scheduler\n La t√¢che la plus fr√©quente √† la priorit√© maximale  Pr√©emptera une tache plus lente Beaucoup plus flexible Mode par d√©faut (voir options du solveur)   Charge CPU d\u0026rsquo;un mod√®le multi-rate single-tasking (@70 mips)  Charge CPU d\u0026rsquo;un mod√®le multi-rate single-tasking (@20 mips)  Tasking Conclusion  Single-Tasking @ 20 MIPS -\u0026gt; Overload  dispatcher la tache la plus lente sur plusieurs slots (option d\u0026rsquo;offset dans Time Step -\u0026gt; [.001 .005])  Multi-Tasking @ 20 MIPS -\u0026gt; Ok  Rate transfert block options  Data Integrity Deterministic data transfert    Optimisation type de donn√©es  Virgule Fixe Virgule Flottante  Flotant    IEEE 754 Single Double     Format width 32 64   Sign bit 1 1   exponent width 8 11   Precision width 23+1 52+1    1st bit of the significand is always 1. Phantom bit\nCustom 8 bit Floating point    Parameter Single Double Custom     Format width 32 64 8   Sign bit 1 1 1   exponent width 8 11 4   Precision width 23+1 52+1 3+1    Script Matlab pour tester un flottant 8 bits % 4 bit exponent (signed) emin = -7; emax = 6; % 3 bits significand p = 3; exps = 2.^[emin:emax]; vals = (2^p) + [0:(2^p-1)]; % significand with leading 1 TotalVal = vals'*exps; % add denormalized values 8bitFloat = unique([TotalVal ; 2^emin * [0:(2^m-1)]']); 8bitFloat = unique(flipud(-TotalVal) ;TotalVal]); % with neg vals  Simulink Data-type Datatype  int8\u0026hellip;uint23 fixdt(1,16,15)  Scaling is En15 (Exp neg) $$\\rightarrow 2^-15$$  fixdt(1,16)  signed (1) 16 bit width Scaling is derived from min \u0026amp; max   Datatype  fixdt(1,16,.01,0)  Scaling is sfix16Sp01 Slope point 01\n   TP https://www.ctrl-elec.fr https://lubin.kerhuel.eu/slides/slides_dcmotor_insa\nElements de correction PWM settings Liens:  MPLAB device blocks for Simulink: https://www.microchip.com/SimulinkBlocks MPLAB X: https://www.microchip.com/MPLABX XC16: https://www.microchip.com/XC16  ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1547655532,"objectID":"813e22095d4c80ec8db0c156d303b80c","permalink":"https://lubin.kerhuel.eu/slides/slides_dcmotor_insa/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/slides/slides_dcmotor_insa/","section":"slides","summary":"Prototypage rapide avec Simulink sur dsPIC MPLAB device blocks for Simulink\nL.Kerhuel \u0026amp; R.Delpoux\n Pendule inverse  Video\nPlan: Mod√®le de simulation \u0026amp; g√©n√©ration de code\n Diff√©rences Temporel optimisation et type de donn√©es blocks et fonctionnalit√©s Simulink  DSPACE  Aspect Temporel: Simulation Mod√©lisation en temps continue, transform√© de Laplace dans le domaine p (ou s)\n Solver r√©sout les √©quations diff√©rentielles Pas de contrainte temps r√©elle R√©sultat d√©pend du solveur ; pas de calcul variable.","tags":null,"title":"Prototypage Rapide avec Simulink sur dsPIC","type":"slides"},{"authors":null,"categories":null,"content":" Test slides Vertical slide 1 Vertical slide 2   My Title !   mes notes\nControls  Next: Right Arrow or Space Previous: Left Arrow Start: Home Finish: End Overview: Esc Speaker notes: S Fullscreen: F Zoom: Alt + Click PDF Export: E  Code Highlighting Inline code: variable\nCode block:\nporridge = \u0026quot;blueberry\u0026quot; if porridge == \u0026quot;blueberry\u0026quot;: print(\u0026quot;Eating...\u0026quot;)  Math In-line math: $x + y = z$\nBlock math:\n$$ f\\left( x \\right) = \\;\\frac{{2\\left( {x + 4} \\right)\\left( {x - 4} \\right)}}{{\\left( {x + 4} \\right)\\left( {x + 1} \\right)}} $$\nFragments Make content appear incrementally\n{{% fragment %}} One {{% /fragment %}} {{% fragment %}} **Two** {{% /fragment %}} {{% fragment %}} Three {{% /fragment %}}  Press Space to play!\nOne  Two  Three \nA fragment can accept two optional parameters:\n class: use a custom style (requires definition in custom CSS) weight: sets the order in which a fragment appears  Speaker Notes Add speaker notes to your presentation\n{{% speaker_note %}} - Only the speaker can read these notes - Press `S` key to view {{% /speaker_note %}}  Press the S key to view the speaker notes!\n Only the speaker can read these notes Press S key to view   Themes  black: Black background, white text, blue links (default) white: White background, black text, blue links league: Gray background, white text, blue links beige: Beige background, dark text, brown links sky: Blue background, thin dark text, blue links   night: Black background, thick white text, orange links serif: Cappuccino background, gray text, brown links simple: White background, black text, blue links solarized: Cream-colored background, dark green text, blue links  Custom Slide Customize the slide style and background\n{{\u0026lt; slide background-image=\u0026quot;/img/boards.jpg\u0026quot; \u0026gt;}} {{\u0026lt; slide background-color=\u0026quot;#0000FF\u0026quot; \u0026gt;}} {{\u0026lt; slide class=\u0026quot;my-style\u0026quot; \u0026gt;}}  Custom CSS Example Let\u0026rsquo;s make headers navy colored.\nCreate assets/css/reveal_custom.css with:\n.reveal section h1, .reveal section h2, .reveal section h3 { color: navy; }  Questions? Ask\nDocumentation\n","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1549319739,"objectID":"83f508f052e23f7ee5731151e8db499c","permalink":"https://lubin.kerhuel.eu/slides/testslides/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/slides/testslides/","section":"slides","summary":"Test slides Vertical slide 1 Vertical slide 2   My Title !   mes notes\nControls  Next: Right Arrow or Space Previous: Left Arrow Start: Home Finish: End Overview: Esc Speaker notes: S Fullscreen: F Zoom: Alt + Click PDF Export: E  Code Highlighting Inline code: variable\nCode block:\nporridge = \u0026quot;blueberry\u0026quot; if porridge == \u0026quot;blueberry\u0026quot;: print(\u0026quot;Eating...\u0026quot;)  Math In-line math: $x + y = z$","tags":null,"title":"test slides","type":"slides"}]
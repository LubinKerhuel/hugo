[{"authors":["lubin"],"categories":null,"content":"Control projects during my academic study ended-up with simplest PID algorithm tuned through successive trials. Code implementation for embedded systems requires an important effort. Time left for modeling, identification and simulation is often null.\nI started in 2005 developing a blockset for Matlab/Simulink targeting dsPIC 33F microcontrollers to overcome such constraint. Without a budget for dSPACE, SpeedGoat or another NI alternative, rapid prototyping became possible on any dsPIC based board.\n$$ \\text{One push button} \\left\\{ \\begin{array}{l} \\text{- C code generation,} \\\\\n\\text{- Compilation,} \\\\\n\\text{- Upload \u0026amp; run on the target.} \\\\\n\\end{array} \\right. $$\nThis Model Based Design (MBD) approach enabled efficient research on signal processing validated with real robot for my PhD thesis on bio-robotics from 2006 to 2009. It reduces the time from the simulation to our autonomous robot and replaced somehow our dSPACE platform which was not embedded anyway.\nI used the same Rapid Control Prototyping (RCP) to develop data fusion algorithm on motion analysis for wearable sports article at MOVEA in 2010-2011.\nI joined Microchip Technology where I am pursuing the development of the MPLAB blockset to target dsPIC and PIC32 microcontrollers.\nFor company, scientists, and students, rapid prototyping enables focusing on new ideas rather than getting into the details of embedded programming. Shortening the loopback $\\lbrace Simulation \\Leftrightarrow Hardware \\rbrace$ allows improving algorithms, obtaining better results, and reducing the time to market.\nI am not academic. I have limited opportunity for traditional publication. I share custom projects as they come using the most practical format for me to maintain. Most projects uses the free Microchip blockset targeting dsPIC, PIC32 and few others microcontrollers. Old project are available on my old website.\nNone are reference design. None are endorsed by Microchip Technology.\n","date":-62135596800,"expirydate":-62135596800,"kind":"taxonomy","lang":"en","lastmod":1559748359,"objectID":"b74c78333f3d47c95561f73c6171c0eb","permalink":"https://lubin.kerhuel.eu/authors/lubin/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/authors/lubin/","section":"authors","summary":"Control projects during my academic study ended-up with simplest PID algorithm tuned through successive trials. Code implementation for embedded systems requires an important effort. Time left for modeling, identification and simulation is often null.\nI started in 2005 developing a blockset for Matlab/Simulink targeting dsPIC 33F microcontrollers to overcome such constraint. Without a budget for dSPACE, SpeedGoat or another NI alternative, rapid prototyping became possible on any dsPIC based board.","tags":null,"title":"Lubin Kerhuel","type":"authors"},{"authors":"romain-delpoux","categories":null,"content":"","date":-62135596800,"expirydate":-62135596800,"kind":"taxonomy","lang":"en","lastmod":1559586029,"objectID":"7f78663cc7c5cee654bf777bfedd06f4","permalink":"https://lubin.kerhuel.eu/authors/romain-delpoux/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/authors/romain-delpoux/","section":"authors","summary":"","tags":null,"title":"Romain Delpoux","type":"authors"},{"authors":null,"categories":null,"content":"Overview of projects\n","date":-62135596800,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1548663322,"objectID":"4cdd37113783e47641dd300543c94e1b","permalink":"https://lubin.kerhuel.eu/docs/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/docs/","section":"docs","summary":"Overview of projects","tags":null,"title":"Overview","type":"docs"},{"authors":["Lubin Kerhuel"],"categories":["Electronics","sensor"],"content":" Table of Contents Principle A Pitot-Darcy tube is an air speed sensor commonly used in aviation. It consists of a tube pointing in the forward direction. When the sensor moves forward a stop pressure is created at its top. A differential pressure is measured between the top of the tube and the ambient pressure. One variant named from its inventor Prandtl tube has static air ports directly on the side of the tube.\nThe pressure measured is linear to the square of the air speed : $P_t = P_s + \\frac{1}{2}\\rho v^2$ where $ P_t $ and $P_s$ are the pressure in Pa, $\\rho$ is the fluid density constant typically in $[1.14 \\ 1.34]$ depending on temperature \u0026amp; altitude, and $v$ the speed in $m.s^{-1}$. The differential pressure measured is $P_{diff} = P_t - P_s = \\frac{1}{2}\\rho v^2$\nPrandtl tube Prandtl tube is made of an inner tube placed within an outer tube. At their top, both tubes are centered. Space between the two tubes is hermetically filled in with an epoxy adhesive (Araldite or equivalent) on few mm near the top. The side of the outer tube is drilled to sense the static pressure. At the bottom, the inner tube which is longer act as a connector for the dynamic pressure sensor and a tiny tube is added next to create another connector to the static pressure which lies in the empty space between the two tube.\nThe static pressure holes should be placed at a minimum distance from the top due to airflow perturbations. A distance 4 times the diameter of the outer tube is retains here.\nFirst test was done using brass tube. Inner tube is 1mm inside, 2mm outside. Outer tube was 3mm inside, 4mm outside. A lighter pitot tube was tested using one inner brass tube (1mm/2mm) with a carbon outer tube (3mm/5mm).\n\r\rBrass inner and outer tubes composing the pitot tube.\rTube alfer from Leroy Merlin. Inner tube is 2mm/1mm. Outer tube is 4mm/3mm (d=4mm). Outer tube length is m=86mm (21d). Four 1mm width holes are at l=16mm (4d) from the top.\n\r\r\rReferences:\n report by W.Gracey on the impact of the various shape on the measurement. report (french) from ANSTJ with general information on pitot sensor. website (French) from Rémi Bourgin with experimental pitot tube for RC plane  16mm m = 11d =44mm Tube altigator: d = 4mm l = 18mm m = 72mm -- Electronics Sensitivity requirements and Pressure sensor The differential pressure measured vary with the square of the speed. RC plane speed can be quite low. Challenge is to be sensitive enough to obtain good measurement even in the low speed range of few meters per seconds.\nThe MP3V5004dp from NXP is a sensitive differential pressure sensor. Its differential measurement range goes from 0 to 3.92 kPa. The analog output is ratio-metric and swing from 0.6V to 3V ($\\Delta V =2.4V$). For reference, 1 kPa is approximately the pressure of 10cm of water.\nWe are interested in speed range varying from $0$ to $25 m.s^{-1}$ ($90km/h$) which correspond to a maximum differential pressure of 3.75 cm of water, or 0.375 kPa. The MP3V5004DP sensor is used in 10% of its nominal range.\nTable below provide theoretical differential pressure expected for various speed using $P_{diff} = \\frac{1}{2}\\rho v^2$ with $\\rho=1.2$.\n   v (m/s) v (Km/h) $P_{diff}$ (Pa) ~ $H_2O$ (cm) MP3V5004dp \u0026amp; MCP3428 (0.2041Pa / LSB1)     1 3.6 0.6 0.006 3   2 7.2 2.4 0.024 12   4 14.4 9.6 0.096 47   7 25.2 29.4 0.294 144   10 36 60 0.6 294   15 54 135 1.3 661   20 72 240 2.4 1176   25 90 375 3.75 1837   30 108 540 5.4 2646   40 144 960 9.6 4704 (4095 sat)    Signal conditioning and conversion The pressure sensor is placed close (~10cm) to the pitot tube on the wing. The analog to digital conversion is also done on site to avoid noise pollution of analog signal. The MCP3428 from Microchip is a high resolution sigma-delta converter with four differential inputs and a programmable gain factor from 1 to 8. It has a digital I2C interface to connect to the dsPIC.\nThe MP3V5004dp output analog signal is connected to the MCP3428 Sigma-Delta ADC through a first order RC low pass filter with a cut off frequency at $28Hz$ ($R=5.6 kOhm$,$C=1\\mu F$). The 2nd differential input is connected on a voltage divisor with 1.2k and 560 ohms to the 3.3V ref and GND. $10\\mu F$ decoupling capacitor are used on power supply. The I2C bus wires are pulled up with 10kOhm and are connected to a 10pf capacitor protecting from glitches.\nThe ADC Sigma-Delta is configured for\n 12 bits x8 Gain 240 Samples Per Seconds (SPS)  The overall resolution is:\n (1) MP3V5004dp Analog output sensitivity is 1633 Pa/V (2) MCP3428 12 bits with a gain of 8 : 0.125mV/LSB1 with (1) and (2), we obtain $1633 * 0.125e^{-3} $ = 0.2041 Pa / LSB1  \r\rPressure sensor and electronics mounted on a DIP adapter board.\rDifferential pressure sensor (MP3V5004dp) with Analog to Digital converter integrating a differential amplifier (MCP3428). The MCP3428 communicate with the microcontroller through an I2C BUS. A 3.3V voltage regulator adapt and filter out the 5V input voltage.\n\r\r\rSensor static tests A 90 minutes lasting measurement is performed indoor without movements. Sensor output were logged at 100Hz. The figure below shows a slow drift. The sensor standard deviation measured on the overall measurement is 0.54 Pa (including the drift).\n\r\rDifferential Sensor static characteristics\r90 minutes lasting static measurement indoor shows a slow drift and a standard deviation of 0.54 Pa. Resolution is 0.2041 Pa / LSB\n\r\r\rThe sensor is sensitive to its own orientation. Moving the sensor up-side down create an offset of (100 LSB1; to be checked).\nFlight setup The sensor is mounted on the wing of a FirStar 1600 RC plane.\n\r\rFirStar 1600 from Volantex RC plane.\rPlatform used for testing with pitot sensor.\n\r\r\rA 2mm flexible tube, originally for protecting fish lines, connect the sensor to the pitot tube.\n\r\rFlashmer – flexible Tube 2mm. Image from Decathlon (france)\rFishing Tube used to connect pressure MP3V5004dp sensor to pitot tube.\n\r\r\rOne magnet is glued on the pitot tube. The pitot tube is attached to the plane through a 2nd magnet integrated into the wing. This flexible solution allows the tube to stay in place during flight, eject in case of hard landing reducing damages and is practical for storage and transportation.\n\r\rBrass pitot tube with its electronic board mounted on the bottom of the right Firstar 1600 wing.\r\r\r\r\r\rCarbon-Brass pitot tube attached to the wing with a magnet.\rOuter tube is a 5mm carbon tube. Inner tube is a brass 2mm/1mm tube.\n\r\r\rResults The MCP3428 samples $P_{diff}$ at 250Hz during flights. $V_{pitot}=\\sqrt{\\frac{2}{\\rho}*P_{diff}}$ with $\\rho = 1.2$.\nMatlab script converting 250Hz raw MCP3428 to Pressure (Pa) and Speed (m/s):\n% Pitot Calibration. P_pitot is a vector with raw MCP3428 output read from I2C bus. P_pitot_cal = 0.2041* (double(P_pitot) + 1800); % to Pa unit % Compute Speed (m/s) from diff pressure (in Pa). V_pitot = sqrt(max(0,(2/1.2) * P_pitot_cal));  Comparison with GPS ground speed In calm condition, the Ground Speed $V_{GPS}$ and Air Speed $V_{pitot}$ are equal.\nIn windy condition, wind average direction and strength are estimated combining $V_{GPS}$, $V_{pitot}$ and the plane yaw $\\Theta_{heading}$ direction (using GPS COG2). This wind estimation is described below.\nThe airplane ground speed (GPS) is estimated with the difference of the air speed (pitot) with the projected wind to the aircraft forward direction:\n$V_{GPS} \\approx V_{pitot} - V_{wind}*cos(\\Theta_{heading} + \\Theta_{wind}) $\nThe figure below presents the air speed in dashed blue. The reconstructed ground speed (thin black) matches accurately with the GPS velocity (large grey) which prove the correctness of the air-speed measurement as well as the wind strength and direction. The onshore wind is laminar with limited turbulences. The air-speed measurement presents a high sensitivity even at low speed.\n\r\rGPS Speed over ground (large grey). Pitot air-speed (dashed blue) with parameter $\\rho=1.2$. Reconstructed up-front wind (green). Pitot air-speed minus wind estimated (large green). up-front wind is estimated from the GPS COG angle ($\\approx \\theta_{heading}$), and the estimated wind strength ($V_{wind}= 2.5 m/s$) and direction ($\\theta_{wind} = 101°$).\rData log of the first 200s of the Firstar 1600 RC plane flight. On the black curve, the pitot is averaged and undersampled by group of 5 samples reducing its sampling rate from 250Hz to 50Hz. GPS (grey curve) and Pitot minus Wind (black) matches.\n\r\r\rRemaining error might be due to wind gust and GPS limited accuracy particularly at estimating vertical speed variations (During flight, the plane speed was change through climb/dive to log pitot tube reactions on a wide air-speed range).\nWind estimation Wind model considered is constant and characterized by\n its constant direction $\\Theta_{wind}$ its constant strength $V_{wind}$  Wind =\u0026gt; $V_{pitot} - V_{gps}$ The curve below shows the difference between the Ground speed (GPS) with the air speed (pitot) in function of the plane flight direction. This error (blue dashed points) fit with a sine wave. This sine wave is the speed offset added for each plane direction in $[0 \\ 2\\pi]$ by a wind with a constant strength and direction. Sine wave amplitude and phase is the wind strength and direction.\n\r\rGPS ground speed and pitot air speed difference in function of the plane direction during the 450s flight of a Firstar 1600.\rBlue dots are speed difference between GPS and pitot. The continuous green curve is the wind sine wave projection on the $\\Theta_{heading}$ plane direction. Sine phase is wind direction ($(\\pi-1.37*\\frac{180}{\\pi})=101°$, from East to West) and sine amplitude is wind strength (2.56m/s). Pitot values are averaged and under-sample by a factor 5.\n\r\r\rThis wind estimation is used to compensate the air-speed when comparing the GPS ground speed $V_{gps}$ with the pitot air-speed $V_{pitot}$ above.\nScript Matlab script to estimate wind off-line:\n% V_gps and V_pitot are two vector with all data measured. % V_pitot was under-sampled (averaging) by a factor 5 to fit the 50Hz log from the GPS. % GPS chip update frequency is 10Hz, but it is logged at 50Hz. V_err = V_pitot - V_gps; % Ground and Air speed difference (i.e. wind) M = [cos(COG); sin(COG) ]'; % COG is the direction (Theta in rad) vector data measured from the GPS y = V_err'; x = M\\y; % Solve wind strength and direction using linear algebra (MMSE) Theta_Wind = -atan2(x(2),x(1)); % Wind (go to) direction. Azimuth direction is opposite to trigo V_Wind = sqrt(sum(x(1:2).^2)); % Wind strength (m/s) plot(COG,V_err','.'); hold on; % plot Error blue dots plot([0:.01:(2*pi)],V_Wind*(cos([0:.01:(2*pi)]+ Theta_Wind)),'-k','linewidth',3); % plot wind  Discussion Using the GPS COG2 field is not exactly the plane yaw direction $\\Theta_{heading}$ but the plane flight direction. Thus the COG is a biased plane yaw $\\Theta_{heading}$ direction. It would be best to use plane orientation from the IMU sensor. It is not done here to reduce the number of sensors for this demonstration. The COG bias is small enough if we assume the wind speed to be small compared to the airplane air speed. It might be possible with a more sophisticated script to compensate this bias.\nOther flight inputs Plane was equipped with two GPS:\n one uBlox M8N GPS and one MTK3339.   The uBlox trace presented on the map below is better than the MTK trace. The uBlox chip was used exclusively for the curves above. The MTK trace can be shown on the map (top left icon). The KML file can be opened with Google Earth which provide a 3D view of the trace showing the height of the plane.\n  Least Significant Bit (or ULP: Unit in the Last Place)\r^ Course Over Ground\r^   ","date":1559001600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1559931175,"objectID":"ee6f9909f961cf96b2a6b108320fe801","permalink":"https://lubin.kerhuel.eu/post/pitot-build/","publishdate":"2019-05-28T00:00:00Z","relpermalink":"/post/pitot-build/","section":"post","summary":"DIY miniature pitot-tube with mechanic and electronics description and in flight sensor measurements. Air-speed performance is compared against a GPS ground speed reference. Estimate wind strength and direction mixing GPS and pitot outputs.","tags":["Pitot","sensor","air-speed"],"title":"Miniature air-speed sensor for RC plane or UAVs.","type":"post"},{"authors":null,"categories":null,"content":" A 16-bits autopilot designed with Simulink and rapid control prototyping tools Motivation Building a platform for testing various autopilot control loop has become simple thanks to the many low cost elements available. To cite few of them:\n 10 DoF IMU: (~$5\\ \\$$), GPS board: (~$10\\ \\$$), Pitot tube (custom): (~$20\\ \\$$), Microcontroller board: depend on the board; rely on $\\approx 5\\ \\$$ mcu, Plane platform: from $60$ to $120\\ \\$$ including servos and motors. You also need few RC hardware:  receiver remote control battery pack  few optional hardware for data logging, telemetry, camera\u0026hellip;  Difference with existing autopilot Many off the shelf autopilot exists and works great. To mention few of them:\n Ardupilot PX4 iNav LibrePilot Paparazzi. Others are listed on the DroneTrest review).  Usually, their internal parameters can be tuned. But, inserting your customized control-loop in such autopilot requires understanding the code structure underneath. Even well documented, it represents hundreds of C functions to navigate into, before starting any changes. Your custom control loop might not fit within the existing structure. You might want to implement a more advanced controller than existing PIDs, use a different sample rate etc\u0026hellip;\nStarting a new project is sometime faster than re-use a pre-existing advanced one. The presented autopilot uses a Model Based Design (MDB) approach: The autopilot code is generated from a unique Simulink model. Everything is within the diagram, from low level sensors handling up to the controller design. This MDB aproach is also named Rapid Control Prototyping (RCP).\nThe autopilot control-loop uses standard math blocks. Low level systems is taken care with the Microchip blockset driving the microcontroller peripherals. The UxV blockset provide easily access to GPS, Remote Control S.BUS, F.Port and Smart Port protocol, Mavlink messaging including Way Point and Parameters protocols. Such Simulink model allows to \u0026ldquo;get-in\u0026rdquo; the project graphically. It allows simulating parts of the system based on a simulated plane or based on values previously logged from a real flight which is helpful to design feed-forward sensor fusions algorithms.\nAnother key difference is the use of a 16-bit microcontroller while other autopilot uses 32-bit microcontroller. 16-bits dsPIC prove to provide all required resources thanks to the efficient architecture underneath which handle the many peripheral used in an efficient way (UART, I2C, Output Capture, Input Compare\u0026hellip;).\nNote however a similar model based design using dsPIC microcontroller beeing developed at UCSC by Pr G.H.Elkaim in a project named SLUG. Their design is independent from the one presented here. The original project handled by M.I Lizarraga SLUG is available online. The update SLUG II projects rely on the same tool used here to target the dsPIC: the blockset for Microchip microcontrollers (free).\nHardware list Various combination of material was tested. Below is a selected list of hardware which prove to be efficient.\n\r\rautopilot platform\rVolantex Firstar 1600 with Qx7 remote control.\n\r\r\r RC platform: Volantex Firstar 1600 with stock motors and servos (Alternative platform are Bixler 2 and Ranger 1600) Remote Control: FrSky QX7 Receiver: FrSky XSR-M / XSR used with either the S.Bus (receiver channel output) and S.port (Telemetry) protocol or with the F.Port protocol which combine both both S.bus with S.port saving one UART peripheral of the microcontroller. Each protocol uses only one wire thus half duplex UART. dsPIC UART peripheral enable configuring Tx and Rx on one line.\n Microcontroller: dsPIC 33EP on a AUAV V3 board. External motion sensor is used instead of built-in AUAV3 sensors. Tiny sensor board with recent chip are easier to firmly attach near the CG reducing vibrations. A custom board based on a dsPIC might replace the AUAV3 board which is difficult to find now. The UDB5 mini is similar and can still be found. IMU sensor: Gy-91 (10 DoF with 3 accelerometers, 3 rate gyro, 3 magnetometers and one barometer). Firmly attached near the CG of the plane. I2C bus is used between sensors and MCU. Pitot tube:  An inner tube and an outer tube on which four holes are done laterally. Signal conditioning: the pitot tube pressure sensor (MP3V 5004 DP) is done with a MCHP ADC converter which integrate an analog amplifier. Converted pressure is sent to the microcontroller through the I2C bus. See build and test page.  GPS: based on a $\\mu$blox M8N chip providing up to 10Hz refresh rate and provided good results compared to competitors chips. Data logger: OpenLager board to log on SD card. It allows logging continuous UART output flow with at a baud up to 2 470 000 (much higher than a 115 200 baud rate that OpenLog data logger cannot sustain.). Radio link: 3DR Sik based Radio module for Mavlink telemetry (plane attitude, position, Way Point and Parameters tuning) with qgroundcontrol base station running on most platforms (PC, android, windows, Linux). Action cam: RunCam2 to film the plane and its surface control from the top; getting a visual behavior of the autopilot in the action.  \r\rEmbedded electronics. One early configuration for testing various sensors. Elements used: X8R receiver, PDB-XPM power board, OpenLager SD data logger, AUAV3 16-bit dsPIC microcontroller with sensors (MPU6050), IMU board 1, IMU board 2, Pressure sensor MP3V5004DP for pitot tube, GPS1, GPS2, 3S 2200maH LiPo battery, Qx7 transmitter.\r\r\r\rResults Sliding mode-based controller tested in both pitch and roll axis with two mode:\n Control plane angular rate control (angular speed set-point given through the remote control) Control plane angle attitude (angle set point provided through the remote control)  Average CPU load was 7 to 8% on a dsPIC 33EP running at 70 MIPS. It includes the IMU estimation algorithm, autopilot control loop and all low tasks (handle various protocols (I2C, NMEA for GPS, F.Port, Mavlink and log sensors data at 1Khz through an UART configured at 24700000)\nTested with strong wind. Showing good robustness despite the low number of parameters tuned so far (video link on top).\nPitot tube air-speed estimation validated using GPS speed measurement as reference (here).\nValidated the wind speed and direction estimation based on a difference between the GPS and pitot tube speed measurement considering the plane orientation.\nValidated automatic calibration of the magnetometer\u0026rsquo;s axis offset and gain. Once in the air, the magnetic perturbation near the floor are negligible. An algorithm automatically determines if the calibration can be refined using current data (using standard flight input data, no looping or specific roll required).\nNext steps Reduce chattering on ailerons when sliding mode control is enabled.\nTest in flight Mavlink protocol parameters tuning.\nAdd automatic guidance of the plane, using Mavlink Way point sets.\nSite content Time constraints does not allow writing a complete description of the project as originally planned. Part of projects which I find interesting and inspiring will be posted.\nIdeas to dvpt:\n IMU Pitot tube Wind estimate UxV blocks including GPS, Remote Control and Mavlink blocks and functionalities Magnetometers auto calibration  ","date":1558216800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1559931175,"objectID":"04e0d53a7e70716ebb790ffe0137ed2b","permalink":"https://lubin.kerhuel.eu/project/autopilot-plane/","publishdate":"2019-05-19T00:00:00+02:00","relpermalink":"/project/autopilot-plane/","section":"project","summary":"Model based design for an RC plane autopilot","tags":["simulink","matlab","rapid prototyping","model based design (MDB)","dsPIC","sliding-mode","autopilot","UAV","Mavlink","UxV blockset","AUAV V3 board"],"title":"Autopilot for Plane based on Simulink","type":"project"},{"authors":["Lubin Kerhuel"],"categories":["Electronics"],"content":"The board PDB-XPW from MATEK System is a voltage regulator with an current measurement adapted for quad copters current with a max current measurement of 140 Amps. For an RC plane project, the current measurement might be reduced to increase current measurement resolution.\nThe chip \u0026ldquo;INA1x9 High-Side Measurement Current Shunt Monitor\u0026rdquo; from Texas Instrument condition and amplify the shunt resistor voltage drop providing an analog output proportional to the current.\nOn the PDB-XPW board, the INA1x9 chip is the black 5 pins component tagged E39 below the 0.05 Ohms shunt resistor, itself just below to the Power supply input connector.\nThe amplification gain is set with the 47 kOhm resistor next to the INA1x9 component. This original value of 47 kOhm correspond to a gain of 47. The gain is the value in kOhm as stated by the chip documentation:\n   Resistor Gain     1 kOhm 1   5 Kohm 5   10 Kohm 10   50 Kohm 50   100 Kohm 100    The 47 kOhm resistor is replaced with a 270 kOhm resistor providing a gain of 270 instead of 47. The original current measurement range is reduced from 140 (A) to 20 (A) (140 * 47\u0026frasl;270 = 20).\nThe current measurement output is an analog signal swinging from 0 to 3.3V coding linearly for current in [0 - 20] Amps range. This lower current range fit with the RC plane platform like Bixler 2, Firstar 1600 or Ranger 1600.\n","date":1558137600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1559860486,"objectID":"da6a22aa858c7a5f96d5e913362c1b8b","permalink":"https://lubin.kerhuel.eu/post/matek-pdb-xpw/","publishdate":"2019-05-18T00:00:00Z","relpermalink":"/post/matek-pdb-xpw/","section":"post","summary":"Adapt the MATEKSYS PDB-XPW power module for quad rotor to fit electric RC plane with lower current requirements. Change current measurement range by replacing one single resistor from the Op-Amp current measurement circuit.","tags":["Electronics","Power","PDB-XPW"],"title":"MATEKSYS PDB-XPW Dual BEC \u0026 Current Module tweak to increase current measurement sensitivity","type":"post"},{"authors":["Lubin Kerhuel"],"categories":["Sensor"],"content":"Cable exist to connect a RunCam2 action cam to an RC receiver for remotely start and stop a record from the receiver PWM output (20ms period, 1ms to 2ms duty cycle). The cable has logic to decode the RC PWM signal and generate the signal pulse scheme to start and stop the RunCam2 record.\nControlling the camera can be done with a microcontroller by generating the required pulse scheme described below.\nThe micro USB cable pinout (on the male part) is\n Pin 1 : GND Pin 3 : TTL signal (5V) Pin 5 : +5V (higher voltage possible for the RunCam2 connector)  When the Camera USB port is set for \u0026ldquo;Remote Control\u0026rdquo; and not for \u0026ldquo;mass storage\u0026rdquo; with the configuration application, it is possible to switch back and forth the camera from video mode to photo mode, and to start/stop recording, or take a picture.\nThe pulse scheme is the following:\n One pulse switch the camera from video recording mode to Photo mode. Two pulses separated with 85ms start or stop a video record (or take a picture in photo mode).  Pulse level is 5V but it works with 3.3V. Line is low state when idle. Pulses are 85ms in high state duration separated by 85ms on multiple pulse.\nTested with a runCam2 powered from a 3S LiPo battery (10 to 14V), no battery in the camera and pulse generated with a 3.3V dsPIC pin configured as digital output.\nThe figure below is the Simulink diagram with the logic used to generate the appropriate pulse on a dsPIC. Code is generated through the Simulink Coder and the MPLAB block from Microchip.\n\r\r\rSimulink logic to control a runCam2 action Cam. The subsystem time step resolution is 1ms. The integrator is reset on each state change of the subsystem input, which trig the generation of two 85ms pulse pattern. Integrator reset is locked while pulses are being generated. Logic at the output of the integrator generate the pulses. The generated code was tested on a dsPIC target\n\r\r\r","date":1558137600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1559586029,"objectID":"846bcf7bfde3b6d647364cf1e29ac2d5","permalink":"https://lubin.kerhuel.eu/post/runcam-remote-control-cable/","publishdate":"2019-05-18T00:00:00Z","relpermalink":"/post/runcam-remote-control-cable/","section":"post","summary":"Signal to remotely start / stop / take a picture on a runCam2 and compatible action cam through the USB connector.","tags":["Camera"],"title":"Start/Stop signal for RunCam2 action cam","type":"post"},{"authors":null,"categories":null,"content":"Simulink Rapid Prototyping based inverted pendulum running on a microstick II dsPIC board. The embedded IMU data fusion algorithm use the ICM-20608 inertial sensor to estimate the angle. LQR control loop drives two DC motors of the modified toy. No encoder sensor are present.\n","date":1543618800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1559082403,"objectID":"129288b19260e15ffe68b30053e899ae","permalink":"https://lubin.kerhuel.eu/project/inverted-pendulum/","publishdate":"2018-12-01T00:00:00+01:00","relpermalink":"/project/inverted-pendulum/","section":"project","summary":"Inverted pendulum running on a microstick II dsPIC board. An IMU algorithm estimate the angle based on a MEMS inertial sensor. LQR feedback controls the DC motors of the trolley. No encoder are used.","tags":null,"title":"Inverted Pendulum","type":"project"},{"authors":["Lubin Kerhuel","Romain Delpoux"],"categories":null,"content":"Control a 24V DC motor using the MCLV-V2 board with a dsPIC 33EP256MC506. This hands-on is for 5th year students at INSA-Lyon.\nThe hands-on Lab subject available at: https://rtdc.ctrl-elec.fr/.\nSlides presents the adaptation required to go from a Simulink model for Simulation (or DSPACE) to a Simulink model targeting a microcontrollers. Two topics are presented:\n Real-time scheduler / CPU load analysis Fixed-point datatypes  ","date":1543618800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1558794875,"objectID":"ca467799ccaf7d76ad29a70379a0e6c5","permalink":"https://lubin.kerhuel.eu/project/lab-dc-motor/","publishdate":"2018-12-01T00:00:00+01:00","relpermalink":"/project/lab-dc-motor/","section":"project","summary":"Simulation \u0026 real-time control of a Pravalux 24v DC motor (INSA Lyon hands-on)","tags":["simulink","matlab","motor","control","rapid prototyping"],"title":"Real Time Control for a DC Motor","type":"project"},{"authors":null,"categories":null,"content":" \r\r\rTop of the inverted pendulum\n\r\r\rPresentation Stabilization of an inverted pendulum is a common engineering challenge. Objective is to build a low-cost DIY1 platform to test various feedback control loop.\nThis document describes the hardware and the theoretical model of the pendulum. Simulation are presented with Simulink models and an LQR2 feedback control loop finally stabilizes the platform.\n    -- Video of the stabilized platform with a 4 state LQR feedback loop. The platform is completely autonomous (no user input).\nThe electronic placed at the top of the pendulum composed of a dsPIC 16 bits microcontroller and an inertial sensor (accelerometers and rate gyro). The base of the pendulum is a modified RC toys comprising two wheels driven by two independent DC motor (see pictures below).\nHardware Overview The head and the base trolley are described successively. They are separated with an $8mm$ carbon tube. The pendulum length is $0.52m$ from wheel axis to the top. Wheels diameters is $8cm$. Pendulum total weight is $200g$ comprising $111g$ for the 4 AA batteries.\n\r\r\rInverted Pendulum platform\n\r\r\rHead electronics Microcontroller The controller is a Microstick II board equipped with a dsPIC 33EP128MC202 running at $70\\ MIPS$. It is powered through the USB connector which only provide the power supply from 4 AA batteries hold in the base.\n\r\rMicrocontroller and sensor on top of the inverted pendulum\rA prototyping board support a Microstick II board with the dsPIC 33EP128MC202. A board from Drotek endowing the Invensense ICM-20608 inertial sensor is screwed on the base board.\n\r\r\rIMU sensor The unique sensor used is the 6 DoF3 Invensense ICM-20608 mounted on a Drotek sensor board. It endows:\n a 3 axis Accelerometers and a 3 axis rate gyros.  The I2C blocks set the BUS clock at $400kHz$ and fetch the 6 sensors values every $1ms$ $(1kHz)$. The Simulink I2C blocks setting enable hot plug of the I2C sensor: The microcontroller initializes the sensor each time it is newly detected on the I2C bus.\n The accelerometer is configured with a range of $\\pm 8g$ low pass filtered at $99Hz$. The rage gyro is configured with a range of $\\pm 500 \\deg/s$ low pass filtered at $250Hz$.  A Simulink IMU4 sub-system run a data fusion algorithm to reconstruct a drift-free quaternion angular position at $1kHz$ (the yaw angle drift when magnetometer is not present). The stabilization control loop uses the drift-free pitch angle.\nIt is possible to use other sensors like the MPU9250 or MPU6050 with either an I2C or SPI interface. The GY-91 board is a 10 DoF3 widespread board based on the 9 DoF MPU9250 (3 accelerometers, 3 magnetometers, 3 rate gyros) and has a pressure sensor.\nUART interface The PCB board provides a $3.3V$ regulator and 4 pin extra interface ( GND, +3.3v, Tx, Rx ) to connect either an UART data-logger or radio link for telemetry module or an RC receiver capable of S.BUS, S.Port or P.Port protocol (all UART based).\nBase trolley Motors The base trolley is a low cost a 2-wheel remote control toy named flywheels. The toy is from 2012 but 2 wheeled equivalents exist. Its electronics is removed. Two pairs of wires power two DC motors in either direction through an L298N H bridge board module.\n\r\rFlyWheels toy package\rFlyWheels toy package\n\r\r\r\r\rTwo DC motors\rTwo DC motors\n\r\r\r\rPower electronics The L298N H bridge controls two DC motors. For each motor:\n Two logic signals set the 4 states: direction CW or CCW, brake, or freewheel. The third logic signal power the motor depending on to the state defined.  The third signal is modulated with a 100Hz square periodic signal whose duty cycle vary from 0% to 100% (PWM). It sets the torque for the motor.\nThe flat multicolor ribbon connects 6 logic control signals (3 for each motor) from the Microstick II dsPIC output to the of the L298N H bridge.\n\r\rBase trolley of the inverted pendulum\rA L298N H bridge (for Arduino) power board drives the two DC motors of a modified FlyWheels toy. Four AA batteries powers the pendulum.\n\r\r\rBatteries Four $1.2V$ AA Ni-Mh batteries are dispatched on both side of the trolley. $\\approx 4.8V$ powers the motors and the electronics. The black and red wire from the trolley to the top of the pendulum powers the Microstick II electronic and sensors.\nPendulum Model The pendulum model is composed of two intertwined sub-system:\n The pendulum*, with 1 rotation DoF3 $\\theta$ angle around the wheel\u0026rsquo;s axis The trolley*, with 1 translation DoF3 $x$ position.  \r\rPendulum free body diagram\r$\\vec{P}$ is the weight at the center of gravity. $\\vec{R}$ is the reaction force from the stiff rod and the floor. $\\vec{F}$ is a friction force when the pendulum is rotating. $\\{ \\vec{i},\\vec{j} \\}$ is the earth frame and $\\{ \\vec{r},\\vec{n} \\}$ is the rotating pendulum frame. The inertial sensors are placed on top of the pendulum and measure all accelerations.\n\r\r\rPendul Equations The Dynamic fundamental law applied on the pendulum: $$ \\sum \\vec{Force} = m.\\vec{a} $$\nThe three forces presents are the weight $\\vec{P}$, the Friction $\\vec{F}$, and the Reaction $\\vec{R}$ from the rod \u0026amp; floor:\n$$ \\underbrace{ -mg\\vec{j} }_{\\vec{P}} \\ - \\ \\underbrace{ k \\frac{\\partial \\vec{r}}{\\partial t} }_{\\vec{F}} \\ + \\ \\underbrace{ ( mg\\vec{j} . \\vec{r} + \\underbrace{Ctfg}_{\\text{Centrifugal}} } _{\\vec{R} } ) . \\vec{r} = ml \\frac{\\partial^2\\vec{ r }}{\\partial t^2} $$\nWith $ \\{ \\vec{i},\\vec{j} \\} $ the static earth frame and $ \\{ \\vec{r},\\vec{n} \\} $ the pendulum frame (rod and normal direction). $m$ is the mass of the pendulum (without the trolley). $l$ is the length from the inter-wheel\u0026rsquo;s axis to the center of mass of the pendulum (without the trolley)\n$$ \\left\\{ \\begin{array}{rcl} \\vec{i} \u0026amp; = \u0026amp; \\vec{n} . cos(\\theta) - \\vec{r} . sin(\\theta) \\\\\n\\vec{j} \u0026amp; = \u0026amp; \\vec{n} . sin(\\theta) + \\vec{r} . cos(\\theta) \\end{array} \\right. $$\n$$\\vec{j}.\\vec{r} = cos(\\theta)$$\nConsidering the rotation $\\theta$, the first and second time derivative of $\\vec{r}$ are:\n$$ \\begin{array}{rcl} \\frac{\\partial \\vec{r}}{\\partial t} \u0026amp; = \u0026amp; - \\dot{\\theta} \\vec{n} \\\\\n\\frac{\\partial^2\\vec{ r }}{\\partial t^2} \u0026amp; = \u0026amp; - \\frac{\\partial }{\\partial t} \\left( \\dot{\\theta} \\vec{n} \\right) \\\\\n\u0026amp; = \u0026amp; - \\ddot{\\theta} \\vec{n} - \\dot{\\theta}^2 \\vec{r} \\end{array} $$\nThe projection of the forces equation in the pendulum frame $ \\{ \\vec{r},\\vec{n} \\} $ is: $$ \\left\\{ \\begin{array}{rcl} \\left( ml\\dot{\\theta}^2 + Ctfg \\right) \\vec{r} = \\vec{0} \\\\\n\\left( l \\ddot{\\theta} + \\frac{k}{m}\\dot{\\theta} - g . sin(\\theta) \\right) \\vec{n} = \\vec{0}\n\\end{array} \\right. $$\nThe first equation for the $\\vec{r}$ axis shows internal forces which cancel each other: the weight $\\vec{P} = -mg\\vec{j}$ which is compensated on the $\\vec{r}$ axis by the term $mg\\vec{j}.\\vec{r}$ from the reaction force which will also compensate for the Centrifugal force $ml\\dot{\\theta}^2$.\nThe second differential equation on the $\\vec{n}$ axis allows to solve for the evolution of the angle $\\theta$. It can be made linear with $sin(\\theta) \\approx \\theta$ when the pendulum is up near $0$, or with $sin(\\theta) \\approx - (\\theta - \\pi)$ when the pendulum is down near $\\pi$.\n\r\rPendulum model for rod rotation\rnon-linear model of the $\\theta$ angle evolution derived from the forces projected on the normal $\\vec{n}$ axis of the rod. The trolley linear acceleration input is added.\n\r\r\rThe linear approximation for $\\theta$ in the laplace domain is a $2^{nd}$ order system: $$ \\theta(s) \\left ( \\frac{1}{w_n^2}s^2 + \\frac{2 \\zeta}{w_n}s \\pm 1 \\right ) = 0 $$\nThe pendulum transfer function $F_p = \\frac{\\theta(s)}{E(s)}$ with a null input $E(s) = 1$ $$ F_p(s) = \\frac{1}{ \\frac{1}{w_n^2}s^2 + \\frac{2 \\zeta}{w_n}s \\pm 1 } $$\n The linear term for $sin$ is positive when the pendulum is up when $\\theta \\approx 0$ (unstable), and negative when pendulum is down when $\\theta \\approx \\pm \\pi$ (stable).   This transfer function is characterized when the pendulum is down by its natural frequency $w_n = \\sqrt{ \\frac{g}{l} } $, and a damping factor $\\zeta$.\nPendul identification The parameter $l$ could be estimated from the platform mechanical but the damping parameter $\\zeta$ (or frictions coefficient $k$) could not be estimated easily from the platform.\nThe simulation model is satisfactory when the calculation it performs make realistic prediction. Experimental measurement is a good method to refine a model and tune its parameters. In our case, the parameters $l$ and $\\zeta$ (or $k$) are identified from the experiment explained below.\nExperimental logs The pendulum is placed on a track (two chairs back to back) to be able to make a complete rotation. Motor are off and the pendulum is released up-side with in the unstable condition ($\\theta = -18°$ , $\\dot \\theta = 0$).\nIt oscillates until the damping friction ($\\zeta$) stops the free oscillations.\nThe $1kHz$ sampled rate gyro and accelerometers values are recorded onboard an openlager board connected on the dsPIC UART interface.\nSimulation from logs The measured inertial sensors are then re-used as data source in a Simulink model. $\\theta$ angle is reconstructed using an IMU complementary filter algorithm implemented in the quaternion angle representation.\nThe pendulum model is initialized with the experimentation initial condition ($\\theta = -18°$ , $\\dot \\theta = 0$). Trolley linear acceleration input is null. Parameters $l$ and $k$ are iteratively tuned until the model $\\hat{\\theta}$ angle fit with the measured oscillation $\\theta$.\n\r\rIdentification - experimental $\\theta$ angle reconstructed from inertial sensors (wide grey curve) vs pendulum model (read and blue dashed curves)\r$\\theta$ angle from free oscillation experiment is compared against two pendulum models. The pendulum is released at time $16.7s$ upside ($18°$) and let free to oscillate. The grey curve is the experimental angle reference reconstructed from inertial sensors measurements. The blue dashed curve is a pendulum model using a linear damping with $k = 0.4$. The red doted curve use a nonlinear damping with the nonlinear term -1.1*$sign(\\dot{\\theta})$ added to the linear damping with $k = 0.17$.\n\r\r\r   Pendulum Parameters Identified Value     $l$ $0.45 m$   $k$ $0.4$   $w_n = \\sqrt{\\frac{g}{l}}$ $4.67\\ rad.s^{-1}$ ( $0.74 Hz$ or $1.35s$ period )    ⬆ Identified pendulum parameters\nValidation and IMU improvement Parameters $l$ and $k$ can be further validated using the force equation and the estimated pendulum angle $\\theta$.\nThe IMU input measurements is composed of the rate gyro and the accelerometers data. Magnetometers is not used in this pendulum example. The IMU input also require the predicted acceleration vector (resp magnetometer is used). The IMU output the sensor orientation and provides the gravity vector prediction as seen in the sensor estimated attitude (i.e. quaternion angle).\nComparing the gravity vector predicted with the accelerometer\u0026rsquo;s measurement do not match because the sensor measures both the gravity plus the dynamic acceleration induced by the pendulum movements.\nConsidering the pendulum principal movement rotation $\\theta$, the equations of forces applied on the pendulum derive from $\\hat \\theta$ a prediction for the dynamic acceleration. The good match between the predicted acceleration and the experimental measurement confirm somehow the correctness of parameters $l$ and $k$ involved in these calculations.\nThe updated acceleration comprising both a static and dynamic part is fed into the IMU algorithm improving the IMU correction of the rate gyro integration drift even when the pendulum is not static.\nTrolley Model Trolley Equations  Below is under construction 🚧   The translational movement of the trolley is modeled as a $1^{st}$ order system characterized by its time constant $\\tau$. This dynamic includes the motor dynamics when it is loaded with the trolley considering the pendulum as vertical.\nThe model considers as negligible the effect of the pendulum forces (translational and rotational) applied on the trolley.\n$$ x(s) = \\frac{1}{\\tau s + 1} $$\nTrolley Identification    Trolley Parameter Estimated Value     $\\tau$ $0.3s$    The trolley does not have any sensors. No encoder or current sensor are used to control the two motors. The parameters $\\tau$ is \u0026ldquo;guessed\u0026rdquo; in a first step. In a second step, a $2^{nd}$ inertial sensor board is temporary glued in the middle of the wheel diameter to as the inertial sensor is in the wheel rotation axe. An identification can be computed from the motor set-point and the wheel movements while the pendulum was actively controlled up by a first feedback loop.\nStill the pendulum model including the trolley is simulated with its feedback loop controller and results are compared against recorded data of the real system running the same feedback loop controller. The simulated pendulum states are re-initialized periodically ($\\approx 2s$) with the real pendulum states as the model would diverge otherwise due to perturbations not modeled and model discrepancies. Correctness of the model can be checked between theses periodic re-initialization.\n\r\rIdentification of trolley in real inverted pendulum condition.\rThe angular speed rate of the wheel is measured with one rate gyro form one added GY-91 sensor board. The GY-91 board is hot glued on one pendulum wheel. The pendulum is stabilized with a controller using an estimated trolley model. Four wires from the GY-91 to the microcontroller power the sensor and retrieve sensor data through the I2C bus (2 wires).\n\r\r\rController Stabilization overview: The microcontroller computes the angle of the pendulum from the inertial sensor measurements (accelerometers and rate gyro). A feedback loop stabilizes the pendulum up right while maintaining the pendulum position still. The pendulum translation is estimated through an internal dynamic model of the trolley stimulated with a copy of the DC motor command. The pendulum slow translations reflect the drift of the internal estimation of the displacement.\nLinearized model LQR feedback controller Video of the inverted Pendulum when it encounters a wall:     --\nAnother way to stabilize a pendulum with an electric seesaw (video).\n Do It Yourself\r^ Linear Quadratic Regulator\r^ Degree of Freedom\r^ Inertial Measurement Unit\r^   ","date":1536444000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1559772550,"objectID":"b0ae7d29be8baee87b074905e65b1536","permalink":"https://lubin.kerhuel.eu/docs/inverted-pendulum/","publishdate":"2018-09-09T00:00:00+02:00","relpermalink":"/docs/inverted-pendulum/","section":"docs","summary":"LQR stabilization of an inverted pendulum platform based on a low-cost toy. Simulink model and generation of code for dsPIC Microchip microcontroller are provided (Rapid Control Prototyping: RCP)","tags":["inverted pendulum","state space","LQR","rapid prototyping","model based design (MDB)","matlab","simulink","DIY","dsPIC","L298N","ICM-20608","Microstick II","33EP128MC202"],"title":"Inverted Pendulum","type":"docs"},{"authors":null,"categories":null,"content":" Prototypage rapide avec Simulink sur dsPIC MPLAB device blocks for Simulink\nL.Kerhuel \u0026amp; R.Delpoux\nPendule inverse Video\nPlan: Modèle de simulation \u0026amp; génération de code\n Différences Temporel optimisation et type de données blocks et fonctionnalités Simulink  dSPACE  Aspect Temporel: Simulation Modélisation en temps continue, transformé de Laplace dans le domaine p (ou s)\n Solver résout les équations différentielles Pas de contrainte temps réelle Résultat dépend du solveur ; pas de calcul variable.  Aspect Temporel: Implémentation Implémentation en temps discret avec un pas de calcul fixe\n pas de solveur Contrainte temps réel Single-Rate \u0026amp; Multi-Rate Single-Tasking \u0026amp; Multi-Tasking   Discrete times  Single-rate:\n Les blocks ont tous la même période d\u0026rsquo;exécution (Même couleur)  Multi-Rate\n Les blocks peuvent avoir des périodes d\u0026rsquo;exécution différentes (Schéma multicolore)    Modèle multi-rate Charge CPU d\u0026rsquo;un modèle multi-rate single-tasking (@70 mips)  Charge CPU d\u0026rsquo;un modèle multi-rate single-tasking (@20 mips)  Single-Tasking Single-Tasking: Dans le slot de temps, l\u0026rsquo;exécution de tous les blocks doit se terminer avant la fin du slot.\nMulti-Tasking Multi-Tasking: Préemption possible -\u0026gt; Monotonic Rate Scheduler\n La tâche la plus fréquente à la priorité maximale  Préemptera une tache plus lente Beaucoup plus flexible Mode par défaut (voir options du solveur)   Charge CPU d\u0026rsquo;un modèle multi-rate single-tasking (@70 mips)  Charge CPU d\u0026rsquo;un modèle multi-rate single-tasking (@20 mips)  Tasking Conclusion  Single-Tasking @ 20 MIPS -\u0026gt; Overload  dispatcher la tache la plus lente sur plusieurs slots (option d\u0026rsquo;offset dans Time Step -\u0026gt; [.001 .005])  Multi-Tasking @ 20 MIPS -\u0026gt; Ok  Rate transfert block options  Data Integrity Deterministic data transfert    Optimisation type de données  Virgule Fixe Virgule Flottante  Flotant    IEEE 754 Single Double     Format width 32 64   Sign bit 1 1   exponent width 8 11   Precision width 23+1 52+1    1st bit of the significand is always 1. Phantom bit\nCustom 8 bit Floating point    Parameter Single Double Custom     Format width 32 64 8   Sign bit 1 1 1   exponent width 8 11 4   Precision width 23+1 52+1 3+1    Script Matlab pour tester un flottant 8 bits % 4 bit exponent (signed) emin = -7; emax = 6; % 3 bits significand p = 3; exps = 2.^[emin:emax]; vals = (2^p) + [0:(2^p-1)]; % significand with leading 1 TotalVal = vals'*exps; % add denormalized values 8bitFloat = unique([TotalVal ; 2^emin * [0:(2^m-1)]']); 8bitFloat = unique(flipud(-TotalVal) ;TotalVal]); % with neg vals  Simulink Data-type Datatype  int8\u0026hellip;uint23 fixdt(1,16,15)  Scaling is En15 (Exp neg) $$\\rightarrow 2^-15$$  fixdt(1,16)  signed (1) 16 bit width Scaling is derived from min \u0026amp; max   Datatype  fixdt(1,16,.01,0)  Scaling is sfix16Sp01 Slope point 01\n   TP https://www.ctrl-elec.fr https://lubin.kerhuel.eu/slides/slides_dcmotor_insa\nElements de correction PWM settings Liens:  MPLAB device blocks for Simulink: https://www.microchip.com/SimulinkBlocks MPLAB X: https://www.microchip.com/MPLABX XC16: https://www.microchip.com/XC16\n https://lubin.kerhuel.eu\n http://www.ctrl-elec.fr\n  ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1559562649,"objectID":"813e22095d4c80ec8db0c156d303b80c","permalink":"https://lubin.kerhuel.eu/slides/slides_dcmotor_insa/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/slides/slides_dcmotor_insa/","section":"slides","summary":"Prototypage rapide avec Simulink sur dsPIC MPLAB device blocks for Simulink\nL.Kerhuel \u0026amp; R.Delpoux\nPendule inverse Video\nPlan: Modèle de simulation \u0026amp; génération de code\n Différences Temporel optimisation et type de données blocks et fonctionnalités Simulink  dSPACE  Aspect Temporel: Simulation Modélisation en temps continue, transformé de Laplace dans le domaine p (ou s)\n Solver résout les équations différentielles Pas de contrainte temps réelle Résultat dépend du solveur ; pas de calcul variable.","tags":null,"title":"Prototypage Rapide avec Simulink sur dsPIC","type":"slides"},{"authors":null,"categories":null,"content":" Test slides # Vertical slide 1  # Vertical slide 2   My Title !   mes notes\nControls  Next: Right Arrow or Space Previous: Left Arrow Start: Home Finish: End Overview: Esc Speaker notes: S Fullscreen: F Zoom: Alt + Click PDF Export: E  Code Highlighting Inline code: variable\nCode block:\nporridge = \u0026quot;blueberry\u0026quot; if porridge == \u0026quot;blueberry\u0026quot;: print(\u0026quot;Eating...\u0026quot;)  Math In-line math: $x + y = z$\nBlock math:\n$$ f\\left( x \\right) = \\;\\frac{{2\\left( {x + 4} \\right)\\left( {x - 4} \\right)}}{{\\left( {x + 4} \\right)\\left( {x + 1} \\right)}} $$\nFragments Make content appear incrementally\n{{% fragment %}} One {{% /fragment %}} {{% fragment %}} **Two** {{% /fragment %}} {{% fragment %}} Three {{% /fragment %}}  Press Space to play!\nOne  Two  Three \nA fragment can accept two optional parameters:\n class: use a custom style (requires definition in custom CSS) weight: sets the order in which a fragment appears  Speaker Notes Add speaker notes to your presentation\n{{% speaker_note %}} - Only the speaker can read these notes - Press `S` key to view {{% /speaker_note %}}  Press the S key to view the speaker notes!\n Only the speaker can read these notes Press S key to view   Themes  black: Black background, white text, blue links (default) white: White background, black text, blue links league: Gray background, white text, blue links beige: Beige background, dark text, brown links sky: Blue background, thin dark text, blue links   night: Black background, thick white text, orange links serif: Cappuccino background, gray text, brown links simple: White background, black text, blue links solarized: Cream-colored background, dark green text, blue links  Custom Slide Customize the slide style and background\n{{\u0026lt; slide background-image=\u0026quot;/img/boards.jpg\u0026quot; \u0026gt;}} {{\u0026lt; slide background-color=\u0026quot;#0000FF\u0026quot; \u0026gt;}} {{\u0026lt; slide class=\u0026quot;my-style\u0026quot; \u0026gt;}}  Custom CSS Example Let\u0026rsquo;s make headers navy colored.\nCreate assets/css/reveal_custom.css with:\n.reveal section h1, .reveal section h2, .reveal section h3 { color: navy; }  Questions? Ask\nDocumentation\n","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1555927651,"objectID":"83f508f052e23f7ee5731151e8db499c","permalink":"https://lubin.kerhuel.eu/slides/testslides/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/slides/testslides/","section":"slides","summary":"Test slides # Vertical slide 1  # Vertical slide 2   My Title !   mes notes\nControls  Next: Right Arrow or Space Previous: Left Arrow Start: Home Finish: End Overview: Esc Speaker notes: S Fullscreen: F Zoom: Alt + Click PDF Export: E  Code Highlighting Inline code: variable\nCode block:\nporridge = \u0026quot;blueberry\u0026quot; if porridge == \u0026quot;blueberry\u0026quot;: print(\u0026quot;Eating...\u0026quot;)  Math In-line math: $x + y = z$","tags":null,"title":"test slides","type":"slides"}]
[{"authors":["lubin"],"categories":null,"content":"Control projects realized during my school years (1999-2005) ended-up with simple PID algorithm tuned through successive trials. Embedded systems programming takes so much time and the time left for modeling, identification and simulation was almost null.\nI started developing a blockset for Simulink targeting dsPIC 33F microcontrollers to overcome such constraint.\n$$ \\text{One push button} \\left\\{ \\begin{array}{l} \\text{- C code generation,} \\\\\n\\text{- Compilation,} \\\\\n\\text{- Upload \u0026amp; run on the target.} \\\\\n\\end{array} \\right. $$\nThis Model Based Design (MBD) aproach enabled efficient test with real robots of new signal processing developped in my PhD thesis on bio-robotics from 2006 to 2009. It reduces the time from the simulation to our autonomous robot and replaced somehow our dSPACE platform.\nI used the same Rapid Control Prototyping (RCP) to develop data fusion algorithm on motion analysis for wearable sports article at MOVEA in 2010-2011.\nI joined Microchip Technology where I am developing the MPLAB blockset to target dsPIC and PIC32 microcontrollers.\nFor company, scientists, and students, rapid prototyping enables focusing on new ideas rather than getting into the details of embedded programming. Shortening the loopback $\\lbrace Simulation \\Leftrightarrow Hardware \\rbrace$ allows improving algorithms, obtaining better results, and reducing the time to market.\nThe present website shares some experience through custom projects using Maltab/Simulink as Rapid Prototyping toolchain. Examples uses the (free) Microchip blockset targeting dsPIC.\nExamples are not reference design and are not endorsed by Microchip.\n","date":-62135596800,"expirydate":-62135596800,"kind":"taxonomy","lang":"en","lastmod":1557440957,"objectID":"b74c78333f3d47c95561f73c6171c0eb","permalink":"https://lubin.kerhuel.eu/authors/lubin/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/authors/lubin/","section":"authors","summary":"Control projects realized during my school years (1999-2005) ended-up with simple PID algorithm tuned through successive trials. Embedded systems programming takes so much time and the time left for modeling, identification and simulation was almost null.\nI started developing a blockset for Simulink targeting dsPIC 33F microcontrollers to overcome such constraint.\n$$ \\text{One push button} \\left\\{ \\begin{array}{l} \\text{- C code generation,} \\\\\n\\text{- Compilation,} \\\\\n\\text{- Upload \u0026amp; run on the target.","tags":null,"title":"Lubin Kerhuel","type":"authors"},{"authors":null,"categories":null,"content":"Overview of projects\n","date":-62135596800,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1548663322,"objectID":"4cdd37113783e47641dd300543c94e1b","permalink":"https://lubin.kerhuel.eu/docs/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/docs/","section":"docs","summary":"Overview of projects","tags":null,"title":"Overview","type":"docs"},{"authors":null,"categories":null,"content":"Simulink Rapid Prototyping based inverted pendulum running on a microstick II dsPIC board. The embedded IMU data fusion algorithm use the ICM-20608 inertial sensor to estimate the angle. LQR control loop drives two DC motors of the modified toy. No encoder sensor are present.\n","date":1543618800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1553454566,"objectID":"129288b19260e15ffe68b30053e899ae","permalink":"https://lubin.kerhuel.eu/project/inverted-pendulum/","publishdate":"2018-12-01T00:00:00+01:00","relpermalink":"/project/inverted-pendulum/","section":"project","summary":"Inverted pendulum running on a microstick II dsPIC board. An IMU algorithm estimate the angle based on a MEMS inertial sensor. LQR feedback controls the DC motors of the trolley. No encoder are used.","tags":["project"],"title":"Inverted Pendulum","type":"project"},{"authors":null,"categories":null,"content":" Control a 24V DC motor using the MCLV V2 board with a dsPIC 33EP256MC506. This hands-on is for 5th year students at INSA-Lyon.\nThe hands-on Lab subject available at: https://rtdc.ctrl-elec.fr/.\nSlides presents the adaptation required to go from a Simulink model for Simulation (or DSPACE) to a Simulink model targeting a microcontrollers. Two topics are presented:\n Real-time scheduler / CPU load analysis Fixed-point datatypes  Authors:  Romain DELPOUX (Romain.Delpoux at insa-lyon.fr), Assistant Professor, INSA de Lyon, Laboratoire Amp√®re UMR CNRS 5005. Lubin KERHUEL (Lubin.Kerhuel at microchip.com), Dr-Engineer, Microchip Technology Inc.  ","date":1543618800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1550053982,"objectID":"ca467799ccaf7d76ad29a70379a0e6c5","permalink":"https://lubin.kerhuel.eu/project/lab-dc-motor/","publishdate":"2018-12-01T00:00:00+01:00","relpermalink":"/project/lab-dc-motor/","section":"project","summary":"Simulation \u0026 real-time control of a Pravalux 24v DC motor (INSA Lyon hands-on)","tags":["simulink","matlab","motor","control","rapid prototyping"],"title":"Real Time Control for a DC Motor","type":"project"},{"authors":null,"categories":null,"content":" \r\r\rTop of the inverted pendulum\n\r\r\rPresentation Stabilization of an inverted pendulum is a common engineering challenge. Objective is to build a low-cost DIY1 platform to test various feedback control loop.\nThis document describes the hardware and the theoretical model of the pendulum. Simulation are presented with Simulink models and an LQR2 feedback control loop finally stabilizes the platform.\n    -- Video of the stabilized platform with a 4 state LQR feedback loop. The platform is completely autonomous (no user input).\nThe electronic placed at the top of the pendulum composed of a dsPIC 16 bits microcontroller and an inertial sensor (accelerometers and rate gyro). The base of the pendulum is a modified RC toys comprising two wheels driven by two independent DC motor (see pictures below).\nHardware Overview The head and the base trolley are described successively. They are separated with an $8mm$ carbon tube. The pendulum length is $0.52m$ from wheel axis to the top. Wheels diameters is $8cm$. Pendulum total weight is $200g$ comprising $111g$ for the 4 AA batteries.\n\r\r\rInverted Pendulum platform\n\r\r\rHead electronics Microcontroller The controller is a Microstick II board equipped with a dsPIC 33EP128MC202 running at $70\\ MIPS$. It is powered through the USB connector which only provide the power supply from 4 AA batteries hold in the base.\n\r\rMicrocontroller and sensor on top of the inverted pendulum\rA prototyping board support a Microstick II board with the dsPIC 33EP128MC202. A board from Drotek endowing the Invensense ICM-20608 inertial sensor is screwed on the base board.\n\r\r\rIMU sensor The unique sensor used is the 6 DoF3 Invensense ICM-20608 mounted on a Drotek sensor board. It endows:\n a 3 axis Accelerometers and a 3 axis rate gyros.  The I2C blocks set the BUS clock at $400kHz$ and fetch the 6 sensors values every $1ms$ $(1kHz)$. The Simulink I2C blocks setting enable hot plug of the I2C sensor: The microcontroller initializes the sensor each time it is newly detected on the I2C bus.\n The accelerometer is configured with a range of $\\pm 8g$ low pass filtered at $99Hz$. The rage gyro is configured with a range of $\\pm 500 \\deg/s$ low pass filtered at $250Hz$.  A Simulink IMU4 sub-system run a data fusion algorithm to reconstruct a drift-free quaternion angular position at $1kHz$ (the yaw angle drift when magnetometer is not present). The stabilization control loop uses the drift-free pitch angle.\nIt is possible to use other sensors like the MPU9250 or MPU6050 with either an I2C or SPI interface. The GY-91 board is a 10 DoF3 widespread board based on the 9 DoF MPU9250 (3 accelerometers, 3 magnetometers, 3 rate gyros) and has a pressure sensor.\nUART interface The PCB board provides a $3.3V$ regulator and 4 pin extra interface ( GND, +3.3v, Tx, Rx ) to connect either an UART data-logger or radio link for telemetry module or an RC receiver capable of S.BUS, S.Port or P.Port protocol (all UART based).\nBase trolley Motors The base trolley is a low cost a 2-wheel remote control toy named flywheels. The toy is from 2012 but 2 wheeled equivalents exist. Its electronics is removed. Two pairs of wires power two DC motors in either direction through an L298N H bridge board module.\n\r\rFlyWheels toy package\rFlyWheels toy package\n\r\r\r\r\rTwo DC motors\rTwo DC motors\n\r\r\r\rPower electronics The L298N H bridge controls two DC motors. For each motor:\n Two logic signals set the 4 states: direction CW or CCW, brake, or freewheel. The third logic signal power the motor depending on to the state defined.  The third signal is modulated with a 100Hz square periodic signal whose duty cycle vary from 0% to 100% (PWM). It sets the torque for the motor.\nThe flat multicolour ribbon connects 6 logic control signals (3 for each motor) from the Microstick II dsPIC output to the of the L298N H bridge.\n\r\rBase trolley of the inverted pendulum\rA L298N H bridge (for Arduino) power board drives the two DC motors of a modified FlyWheels toy. Four AA batteries powers the pendulum.\n\r\r\rBatteries Four $1.2V$ AA Ni-Mh batteries are dispatched on both side of the trolley. $\\approx 4.8V$ powers the motors and the electronics. The black and red wire from the trolley to the top of the pendulum powers the Microstick II electronic and sensors.\nPendulum Model The pendulum model is composed of two intertwined sub-system:\n The pendulum*, with 1 rotation DoF3 $\\theta$ angle around the wheel\u0026rsquo;s axis The trolley*, with 1 translation DoF3 $x$ position.  \r\rPendulum free body diagram\r$\\vec{P}$ is the weight at the center of gravity. $\\vec{R}$ is the reaction force from the stiff rod and the floor. $\\vec{F}$ is a friction force when the pendulum is rotating. $\\{ \\vec{i},\\vec{j} \\}$ is the earth frame and $\\{ \\vec{r},\\vec{n} \\}$ is the rotating pendulum frame. The inertial sensors are placed on top of the pendulum and measure all accelerations.\n\r\r\rEquations The Dynamic fundamental law applied on the pendulum: $$ \\sum \\vec{Force} = m.\\vec{a} $$\nThe three forces presents are the weight $\\vec{P}$, the Friction $\\vec{F}$, and the Reaction $\\vec{R}$ from the rod \u0026amp; floor:\n$$ \\underbrace{ -mg\\vec{j} }_{\\vec{P}} \\ - \\ \\underbrace{ k \\frac{\\partial \\vec{r}}{\\partial t} }_{\\vec{F}} \\ + \\ \\underbrace{ ( mg\\vec{j} . \\vec{r} + \\underbrace{Ctfg}_{\\text{Centrifugal}} } _{\\vec{R} } ) . \\vec{r} = ml \\frac{\\partial^2\\vec{ r }}{\\partial t^2} $$\nWith $ \\{ \\vec{i},\\vec{j} \\} $ the static earth frame and $ \\{ \\vec{r},\\vec{n} \\} $ the pendulum frame (rod and normal direction). $m$ is the mass of the pendulum (without the trolley). $l$ is the length from the inter-wheel\u0026rsquo;s axis to the center of mass of the pendulum (without the trolley)\n$$ \\left\\{ \\begin{array}{rcl} \\vec{i} \u0026amp; = \u0026amp; \\vec{n} . cos(\\theta) - \\vec{r} . sin(\\theta) \\\\\n\\vec{j} \u0026amp; = \u0026amp; \\vec{n} . sin(\\theta) + \\vec{r} . cos(\\theta) \\end{array} \\right. $$\n$$\\vec{j}.\\vec{r} = cos(\\theta)$$\nConsidering the rotation $\\theta$, the first and second time derivative of $\\vec{r}$ are:\n$$ \\begin{array}{rcl} \\frac{\\partial \\vec{r}}{\\partial t} \u0026amp; = \u0026amp; - \\dot{\\theta} \\vec{n} \\\\\n\\frac{\\partial^2\\vec{ r }}{\\partial t^2} \u0026amp; = \u0026amp; - \\frac{\\partial }{\\partial t} \\left( \\dot{\\theta} \\vec{n} \\right) \\\\\n\u0026amp; = \u0026amp; - \\ddot{\\theta} \\vec{n} - \\dot{\\theta}^2 \\vec{r} \\end{array} $$\nThe projection of the forces equation in the pendulum frame $ \\{ \\vec{r},\\vec{n} \\} $ is: $$ \\left\\{ \\begin{array}{rcl} \\left( ml\\dot{\\theta}^2 + Ctfg \\right) \\vec{r} = \\vec{0} \\\\\n\\left( l \\ddot{\\theta} + \\frac{k}{m}\\dot{\\theta} - g . sin(\\theta) \\right) \\vec{n} = \\vec{0}\n\\end{array} \\right. $$\nThe first equation for the $\\vec{r}$ axis shows internal forces which cancel each other: the weight $\\vec{P} = -mg\\vec{j}$ which is compensated on the $\\vec{r}$ axis by the term $mg\\vec{j}.\\vec{r}$ from the reaction force which will also compensate for the Centrifugal force $ml\\dot{\\theta}^2$.\nThe second differential equation on the $\\vec{n}$ axis allows to solve for the evolution of the angle $\\theta$. It can be made linear with $sin(\\theta) \\approx \\theta$ when the pendulum is up near $0$, or with $sin(\\theta) \\approx - (\\theta - \\pi)$ when the pendulum is down near $\\pi$.\n\r\rPendulum model for rod rotation\rnon-linear model of the $\\theta$ angle evolution derived from the forces projected on the normal $\\vec{n}$ axis of the rod. The trolley linear acceleration input is added.\n\r\r\rThe linear approximation for $\\theta$ in the laplace domain is a $2^{nd}$ order system: $$ \\theta(s) \\left ( \\frac{1}{w_n^2}s^2 + \\frac{2 \\zeta}{w_n}s \\pm 1 \\right ) = 0 $$\nThe pendulum transfer function $F_p = \\frac{\\theta(s)}{E(s)}$ with a null input $E(s) = 1$ $$ F_p(s) = \\frac{1}{ \\frac{1}{w_n^2}s^2 + \\frac{2 \\zeta}{w_n}s \\pm 1 } $$\n The linear term for $sin$ is positive when the pendulum is up when $\\theta \\approx 0$ (unstable), and negative when pendulum is down when $\\theta \\approx \\pm \\pi$ (stable).   This transfer function is characterized when the pendulum is down by its natural frequency $w_n = \\sqrt{ \\frac{g}{l} } $, and a damping factor $\\zeta$.\nIdentification The parameter $l$ could be estimated from the platform mechanical but the damping parameter $\\zeta$ (or frictions coefficient $k$) could not be estimated easily from the platform.\nThe simulation model is satisfactory when the calculation it performs make realistic prediction. Experimental measurement is a good method to refine a model and tune its parameters. In our case, the parameters $l$ and $\\zeta$ (or $k$) are identified from the experiment explained below.\nExperimental logs The pendulum is placed on a track (two chairs back to back) so as to be able to make a complete rotation. Motor are off and the pendulum is released up-side with in the unstable condition ($\\theta = -18¬∞$ , $\\dot \\theta = 0$).\nIt oscillates until the damping friction ($\\zeta$) stops the free oscillations.\nThe $1kHz$ sampled rate gyro and accelerometers values are recorded onboard an openlager board connected on the dsPIC UART interface.\nSimulation from logs The measured inertial sensors are then re-used as data source in a Simulink model. $\\theta$ angle is reconstructed using an IMU complementary filter algorithm implemented in the quaternion angle representation.\nThe pendulum model is initialized with the experimentation initial condition ($\\theta = -18¬∞$ , $\\dot \\theta = 0$). Trolley linear acceleration input is null. Parameters $l$ and $k$ are iteratively tuned until the model $\\hat{\\theta}$ angle fit with the measured oscillation $\\theta$.\n\r\rIdentification - experimental $\\theta$ angle reconstructed from inertial sensors (wide grey curve) vs pendulum model (read and blue dashed curves)\r$\\theta$ angle from free oscillation experiment is compared against two pendulum models. The pendulum is released at time $16.7s$ up side ($18¬∞$) and let free to oscillate. The grey curve is the experimental angle reference reconstructed from inertial sensors measurements. The blue dashed curve is a pendulum model using a linear damping with $k = 0.4$. The red doted curve use a non linear damping with the non linear term -1.1*$sign(\\dot{\\theta})$ added to the linear damping with $k = 0.17$.\n\r\r\r   Pendulum Parameters Identified Value     $l$ $0.45 m$   $k$ $0.4$   $w_n = \\sqrt{\\frac{g}{l}}$ $4.67\\ rad.s^{-1}$ ( $0.74 Hz$ or $1.35s$ period )    ‚¨Ü Identified pendulum parameters\nValidation and IMU improvement Parameters $l$ and $k$ can be further validated using the force equation and the estimated pendulum angle $\\theta$.\nThe IMU input measurements is composed of the rate gyro and the accelerometers data. Magnetometers is not used in this pendulum example. The IMU input also require the predicted acceleration vector (resp magnetometer is used). The IMU output the sensor orientation and provides the gravity vector prediction as seen in the sensor estimated attitude (i.e. quaternion angle).\nComparing the gravity vector predicted with the accelerometers measurement do not match because the sensor measures both the gravity plus the dynamic acceleration induced by the pendulum movements.\nConsidering the pendulum principal movement rotation $\\theta$, the equations of forces applied on the pendulum derive from $\\hat \\theta$ a prediction for the dynamic acceleration. The good match between the predicted acceleration and the experimental measurement confirm somehow the correctness of parameters $l$ and $k$ involved in theses calculations.\nThe updated acceleration comprising both a static and dynamic part is fed into the IMU algorithm improving the IMU correction of the rate gyro integration drift even when the pendulum is not static.\nTrolley Model Equations  Below is under construction !   The translational movement of the trolley is modeled as a $1^{st}$ order system characterized by its time constant $\\tau$. This dynamic includes the motor dynamics when it is loaded with the trolley considering the pendulum as vertical.\nThe model considers as negligible the effect of the pendulum forces (translational and rotational) applied on the trolley.\n$$ x(s) = \\frac{1}{\\tau s + 1} $$\nIdentification    Trolley Parameter Estimated Value     $\\tau$ $0.3s$    The trolley does not have any sensors. No encoder or current sensor are used to control the two motors. The parameters $\\tau$ is \u0026ldquo;guessed\u0026rdquo; in a first step. In a second step, a $2^{nd}$ inertial sensor board is temporary glued in the middle of the wheel diameter to as the inertial sensor is in the wheel rotation axe. An identification can be computed from the motor set-point and the wheel movements while the pendulum was actively controlled up by a first feedback loop.\nStill the pendulum model including the trolley is simulated with its feedback loop controller and results are compared against recorded data of the real system running the same feedback loop controller. The simulated pendulum states are re-initialized periodically ($\\approx 2s$) with the real pendulum states as the model would diverge otherwise due to perturbations not modeled and model discrepancies. Correctness of the model can be checked between theses periodic re-initialization.\nController Stabilization overview: The microcontroller computes the angle of the pendulum from the inertial sensor measurements (accelerometers and rate gyro). A feedback loop stabilizes the pendulum up right while maintaining the pendulum position still. The pendulum translation is estimated through an internal dynamic model of the trolley stimulated with a copy of the DC motor command. The pendulum slow translations reflect the drift of the internal estimation of the displacement.\nLinearized model LQR feedback controller Video of the inverted Pendulum when it encounters a wall:     --\nAnother way to stabilize a pendulum with an electric see-saw (video).\n Do It Yourself\r^ Linear Quadratic Regulator\r^ Degree of Freedom\r^ Inertial Measurement Unit\r^   ","date":1536444000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1553962754,"objectID":"b0ae7d29be8baee87b074905e65b1536","permalink":"https://lubin.kerhuel.eu/docs/inverted-pendulum/","publishdate":"2018-09-09T00:00:00+02:00","relpermalink":"/docs/inverted-pendulum/","section":"docs","summary":"LQR stabilization of an inverted pendulum platform based on a low cost toy. Simulink model and generation of code for dsPIC Microchip microcontroller are provided (Rapid Control Prototyping : RCP)","tags":["inverted pendulum","state space","LQR","rapid prototyping","model based design (MDB)","matlab","simulink","DIY","dsPIC","L298N","ICM-20608"],"title":"Inverted Pendulum","type":"docs"},{"authors":null,"categories":null,"content":" Prototypage rapide avec Simulink sur dsPIC MPLAB device blocks for Simulink\nL.Kerhuel \u0026amp; R.Delpoux\n Pendule inverse  Video\nPlan: Mod√®le de simulation \u0026amp; g√©n√©ration de code\n Diff√©rences Temporel optimisation et type de donn√©es blocks et fonctionnalit√©s Simulink  DSPACE  Aspect Temporel: Simulation Mod√©lisation en temps continue, transform√© de Laplace dans le domaine p (ou s)\n Solver r√©sout les √©quations diff√©rentielles Pas de contrainte temps r√©elle R√©sultat d√©pend du solveur ; pas de calcul variable.  Aspect Temporel: Impl√©mentation Impl√©mentation en temps discret avec un pas de calcul fixe\n pas de solveur Contrainte temps r√©el Single-Rate \u0026amp; Multi-Rate Single-Tasking \u0026amp; Multi-Tasking   Discrete times  Single-rate:\n Les blocks ont tous la m√™me p√©riode d\u0026rsquo;ex√©cution (M√™me couleur)  Multi-Rate\n Les blocks peuvent avoir des p√©riodes d\u0026rsquo;ex√©cution diff√©rentes (Sch√©ma multicolore)    Mod√®le multi-rate Charge CPU d\u0026rsquo;un mod√®le multi-rate single-tasking (@70 mips)  Charge CPU d\u0026rsquo;un mod√®le multi-rate single-tasking (@20 mips)  Single-Tasking Single-Tasking: Dans le slot de temps, l\u0026rsquo;ex√©cution de tous les blocks doit se terminer avant la fin du slot.\nMulti-Tasking Multi-Tasking: Pr√©emption possible -\u0026gt; Monotonic Rate Scheduler\n La t√¢che la plus fr√©quente √† la priorit√© maximale  Pr√©emptera une tache plus lente Beaucoup plus flexible Mode par d√©faut (voir options du solveur)   Charge CPU d\u0026rsquo;un mod√®le multi-rate single-tasking (@70 mips)  Charge CPU d\u0026rsquo;un mod√®le multi-rate single-tasking (@20 mips)  Tasking Conclusion  Single-Tasking @ 20 MIPS -\u0026gt; Overload  dispatcher la tache la plus lente sur plusieurs slots (option d\u0026rsquo;offset dans Time Step -\u0026gt; [.001 .005])  Multi-Tasking @ 20 MIPS -\u0026gt; Ok  Rate transfert block options  Data Integrity Deterministic data transfert    Optimisation type de donn√©es  Virgule Fixe Virgule Flottante  Flotant    IEEE 754 Single Double     Format width 32 64   Sign bit 1 1   exponent width 8 11   Precision width 23+1 52+1    1st bit of the significand is always 1. Phantom bit\nCustom 8 bit Floating point    Parameter Single Double Custom     Format width 32 64 8   Sign bit 1 1 1   exponent width 8 11 4   Precision width 23+1 52+1 3+1    Script Matlab pour tester un flottant 8 bits % 4 bit exponent (signed) emin = -7; emax = 6; % 3 bits significand p = 3; exps = 2.^[emin:emax]; vals = (2^p) + [0:(2^p-1)]; % significand with leading 1 TotalVal = vals'*exps; % add denormalized values 8bitFloat = unique([TotalVal ; 2^emin * [0:(2^m-1)]']); 8bitFloat = unique(flipud(-TotalVal) ;TotalVal]); % with neg vals  Simulink Data-type Datatype  int8\u0026hellip;uint23 fixdt(1,16,15)  Scaling is En15 (Exp neg) $$\\rightarrow 2^-15$$  fixdt(1,16)  signed (1) 16 bit width Scaling is derived from min \u0026amp; max   Datatype  fixdt(1,16,.01,0)  Scaling is sfix16Sp01 Slope point 01\n   TP https://www.ctrl-elec.fr https://lubin.kerhuel.eu/slides/slides_dcmotor_insa\nElements de correction PWM settings Liens:  MPLAB device blocks for Simulink: https://www.microchip.com/SimulinkBlocks MPLAB X: https://www.microchip.com/MPLABX XC16: https://www.microchip.com/XC16  ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1547655532,"objectID":"813e22095d4c80ec8db0c156d303b80c","permalink":"https://lubin.kerhuel.eu/slides/slides_dcmotor_insa/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/slides/slides_dcmotor_insa/","section":"slides","summary":"Prototypage rapide avec Simulink sur dsPIC MPLAB device blocks for Simulink\nL.Kerhuel \u0026amp; R.Delpoux\n Pendule inverse  Video\nPlan: Mod√®le de simulation \u0026amp; g√©n√©ration de code\n Diff√©rences Temporel optimisation et type de donn√©es blocks et fonctionnalit√©s Simulink  DSPACE  Aspect Temporel: Simulation Mod√©lisation en temps continue, transform√© de Laplace dans le domaine p (ou s)\n Solver r√©sout les √©quations diff√©rentielles Pas de contrainte temps r√©elle R√©sultat d√©pend du solveur ; pas de calcul variable.","tags":null,"title":"Prototypage Rapide avec Simulink sur dsPIC","type":"slides"},{"authors":null,"categories":null,"content":" Test slides # Vertical slide 1  # Vertical slide 2   My Title !   mes notes\nControls  Next: Right Arrow or Space Previous: Left Arrow Start: Home Finish: End Overview: Esc Speaker notes: S Fullscreen: F Zoom: Alt + Click PDF Export: E  Code Highlighting Inline code: variable\nCode block:\nporridge = \u0026quot;blueberry\u0026quot; if porridge == \u0026quot;blueberry\u0026quot;: print(\u0026quot;Eating...\u0026quot;)  Math In-line math: $x + y = z$\nBlock math:\n$$ f\\left( x \\right) = \\;\\frac{{2\\left( {x + 4} \\right)\\left( {x - 4} \\right)}}{{\\left( {x + 4} \\right)\\left( {x + 1} \\right)}} $$\nFragments Make content appear incrementally\n{{% fragment %}} One {{% /fragment %}} {{% fragment %}} **Two** {{% /fragment %}} {{% fragment %}} Three {{% /fragment %}}  Press Space to play!\nOne  Two  Three \nA fragment can accept two optional parameters:\n class: use a custom style (requires definition in custom CSS) weight: sets the order in which a fragment appears  Speaker Notes Add speaker notes to your presentation\n{{% speaker_note %}} - Only the speaker can read these notes - Press `S` key to view {{% /speaker_note %}}  Press the S key to view the speaker notes!\n Only the speaker can read these notes Press S key to view   Themes  black: Black background, white text, blue links (default) white: White background, black text, blue links league: Gray background, white text, blue links beige: Beige background, dark text, brown links sky: Blue background, thin dark text, blue links   night: Black background, thick white text, orange links serif: Cappuccino background, gray text, brown links simple: White background, black text, blue links solarized: Cream-colored background, dark green text, blue links  Custom Slide Customize the slide style and background\n{{\u0026lt; slide background-image=\u0026quot;/img/boards.jpg\u0026quot; \u0026gt;}} {{\u0026lt; slide background-color=\u0026quot;#0000FF\u0026quot; \u0026gt;}} {{\u0026lt; slide class=\u0026quot;my-style\u0026quot; \u0026gt;}}  Custom CSS Example Let\u0026rsquo;s make headers navy colored.\nCreate assets/css/reveal_custom.css with:\n.reveal section h1, .reveal section h2, .reveal section h3 { color: navy; }  Questions? Ask\nDocumentation\n","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1555927651,"objectID":"83f508f052e23f7ee5731151e8db499c","permalink":"https://lubin.kerhuel.eu/slides/testslides/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/slides/testslides/","section":"slides","summary":"Test slides # Vertical slide 1  # Vertical slide 2   My Title !   mes notes\nControls  Next: Right Arrow or Space Previous: Left Arrow Start: Home Finish: End Overview: Esc Speaker notes: S Fullscreen: F Zoom: Alt + Click PDF Export: E  Code Highlighting Inline code: variable\nCode block:\nporridge = \u0026quot;blueberry\u0026quot; if porridge == \u0026quot;blueberry\u0026quot;: print(\u0026quot;Eating...\u0026quot;)  Math In-line math: $x + y = z$","tags":null,"title":"test slides","type":"slides"}]